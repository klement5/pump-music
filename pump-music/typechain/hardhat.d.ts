/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IIFtso",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIFtso__factory>;
    getContractFactory(
      name: "FtsoV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FtsoV2Interface__factory>;
    getContractFactory(
      name: "IFtsoGenesis",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoGenesis__factory>;
    getContractFactory(
      name: "IFtsoManagerGenesis",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoManagerGenesis__factory>;
    getContractFactory(
      name: "IFtsoRegistryGenesis",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoRegistryGenesis__factory>;
    getContractFactory(
      name: "IAddressBinder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressBinder__factory>;
    getContractFactory(
      name: "IAddressValidityVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressValidityVerification__factory>;
    getContractFactory(
      name: "IBalanceDecreasingTransactionVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalanceDecreasingTransactionVerification__factory>;
    getContractFactory(
      name: "IClaimSetupManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IClaimSetupManager__factory>;
    getContractFactory(
      name: "IConfirmedBlockHeightExistsVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IConfirmedBlockHeightExistsVerification__factory>;
    getContractFactory(
      name: "IDelegationAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegationAccount__factory>;
    getContractFactory(
      name: "IDistributionToDelegators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDistributionToDelegators__factory>;
    getContractFactory(
      name: "IEntityManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEntityManager__factory>;
    getContractFactory(
      name: "IEVMTransactionVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEVMTransactionVerification__factory>;
    getContractFactory(
      name: "IFastUpdateIncentiveManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFastUpdateIncentiveManager__factory>;
    getContractFactory(
      name: "IFastUpdater",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFastUpdater__factory>;
    getContractFactory(
      name: "IFastUpdatesConfiguration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFastUpdatesConfiguration__factory>;
    getContractFactory(
      name: "IFdcHub",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFdcHub__factory>;
    getContractFactory(
      name: "IFdcInflationConfigurations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFdcInflationConfigurations__factory>;
    getContractFactory(
      name: "IFdcRequestFeeConfigurations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFdcRequestFeeConfigurations__factory>;
    getContractFactory(
      name: "IFdcVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFdcVerification__factory>;
    getContractFactory(
      name: "IFeeCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeCalculator__factory>;
    getContractFactory(
      name: "IFlareAssetRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlareAssetRegistry__factory>;
    getContractFactory(
      name: "IFlareContractRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlareContractRegistry__factory>;
    getContractFactory(
      name: "IFlareSystemsCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlareSystemsCalculator__factory>;
    getContractFactory(
      name: "IFlareSystemsManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlareSystemsManager__factory>;
    getContractFactory(
      name: "IFtso",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtso__factory>;
    getContractFactory(
      name: "IFtsoFeedDecimals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoFeedDecimals__factory>;
    getContractFactory(
      name: "IFtsoFeedIdConverter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoFeedIdConverter__factory>;
    getContractFactory(
      name: "IFtsoFeedPublisher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoFeedPublisher__factory>;
    getContractFactory(
      name: "IFtsoInflationConfigurations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoInflationConfigurations__factory>;
    getContractFactory(
      name: "IFtsoManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoManager__factory>;
    getContractFactory(
      name: "IFtsoRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoRegistry__factory>;
    getContractFactory(
      name: "IFtsoRewardManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoRewardManager__factory>;
    getContractFactory(
      name: "IFtsoRewardOffersManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFtsoRewardOffersManager__factory>;
    getContractFactory(
      name: "IGenericRewardManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericRewardManager__factory>;
    getContractFactory(
      name: "IGovernanceSettings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernanceSettings__factory>;
    getContractFactory(
      name: "IGovernanceVotePower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernanceVotePower__factory>;
    getContractFactory(
      name: "IIncreaseManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIncreaseManager__factory>;
    getContractFactory(
      name: "IJsonApiVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJsonApiVerification__factory>;
    getContractFactory(
      name: "IPaymentVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPaymentVerification__factory>;
    getContractFactory(
      name: "IPChainStakeMirror",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPChainStakeMirror__factory>;
    getContractFactory(
      name: "IPChainStakeMirrorMultiSigVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPChainStakeMirrorMultiSigVoting__factory>;
    getContractFactory(
      name: "IPChainVotePower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPChainVotePower__factory>;
    getContractFactory(
      name: "IPriceSubmitter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceSubmitter__factory>;
    getContractFactory(
      name: "IRandomProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRandomProvider__factory>;
    getContractFactory(
      name: "IReferencedPaymentNonexistenceVerification",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReferencedPaymentNonexistenceVerification__factory>;
    getContractFactory(
      name: "IRelay",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelay__factory>;
    getContractFactory(
      name: "IRewardManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardManager__factory>;
    getContractFactory(
      name: "IRNat",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRNat__factory>;
    getContractFactory(
      name: "IRNatAccount",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRNatAccount__factory>;
    getContractFactory(
      name: "ISubmission",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISubmission__factory>;
    getContractFactory(
      name: "IValidatorRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidatorRegistry__factory>;
    getContractFactory(
      name: "IVoterRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoterRegistry__factory>;
    getContractFactory(
      name: "IVoterWhitelister",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoterWhitelister__factory>;
    getContractFactory(
      name: "IVPContractEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVPContractEvents__factory>;
    getContractFactory(
      name: "IVPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVPToken__factory>;
    getContractFactory(
      name: "IWNat",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWNat__factory>;
    getContractFactory(
      name: "IWNatDelegationFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWNatDelegationFee__factory>;
    getContractFactory(
      name: "ProtocolsV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProtocolsV2Interface__factory>;
    getContractFactory(
      name: "RandomNumberV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RandomNumberV2Interface__factory>;
    getContractFactory(
      name: "RewardsV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsV2Interface__factory>;
    getContractFactory(
      name: "TestFtsoV2Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestFtsoV2Interface__factory>;
    getContractFactory(
      name: "IICleanable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IICleanable__factory>;
    getContractFactory(
      name: "IIGovernanceVotePower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIGovernanceVotePower__factory>;
    getContractFactory(
      name: "IIVPContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIVPContract__factory>;
    getContractFactory(
      name: "IIVPToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIVPToken__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MerkleProof",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleProof__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "ArtistRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArtistRegistry__factory>;
    getContractFactory(
      name: "BnbMemecoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BnbMemecoin__factory>;
    getContractFactory(
      name: "SpotifyArtistList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpotifyArtistList__factory>;

    getContractAt(
      name: "IIFtso",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIFtso>;
    getContractAt(
      name: "FtsoV2Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FtsoV2Interface>;
    getContractAt(
      name: "IFtsoGenesis",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoGenesis>;
    getContractAt(
      name: "IFtsoManagerGenesis",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoManagerGenesis>;
    getContractAt(
      name: "IFtsoRegistryGenesis",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoRegistryGenesis>;
    getContractAt(
      name: "IAddressBinder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressBinder>;
    getContractAt(
      name: "IAddressValidityVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressValidityVerification>;
    getContractAt(
      name: "IBalanceDecreasingTransactionVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalanceDecreasingTransactionVerification>;
    getContractAt(
      name: "IClaimSetupManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IClaimSetupManager>;
    getContractAt(
      name: "IConfirmedBlockHeightExistsVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IConfirmedBlockHeightExistsVerification>;
    getContractAt(
      name: "IDelegationAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegationAccount>;
    getContractAt(
      name: "IDistributionToDelegators",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDistributionToDelegators>;
    getContractAt(
      name: "IEntityManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEntityManager>;
    getContractAt(
      name: "IEVMTransactionVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEVMTransactionVerification>;
    getContractAt(
      name: "IFastUpdateIncentiveManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFastUpdateIncentiveManager>;
    getContractAt(
      name: "IFastUpdater",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFastUpdater>;
    getContractAt(
      name: "IFastUpdatesConfiguration",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFastUpdatesConfiguration>;
    getContractAt(
      name: "IFdcHub",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFdcHub>;
    getContractAt(
      name: "IFdcInflationConfigurations",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFdcInflationConfigurations>;
    getContractAt(
      name: "IFdcRequestFeeConfigurations",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFdcRequestFeeConfigurations>;
    getContractAt(
      name: "IFdcVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFdcVerification>;
    getContractAt(
      name: "IFeeCalculator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeCalculator>;
    getContractAt(
      name: "IFlareAssetRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlareAssetRegistry>;
    getContractAt(
      name: "IFlareContractRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlareContractRegistry>;
    getContractAt(
      name: "IFlareSystemsCalculator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlareSystemsCalculator>;
    getContractAt(
      name: "IFlareSystemsManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlareSystemsManager>;
    getContractAt(
      name: "IFtso",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtso>;
    getContractAt(
      name: "IFtsoFeedDecimals",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoFeedDecimals>;
    getContractAt(
      name: "IFtsoFeedIdConverter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoFeedIdConverter>;
    getContractAt(
      name: "IFtsoFeedPublisher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoFeedPublisher>;
    getContractAt(
      name: "IFtsoInflationConfigurations",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoInflationConfigurations>;
    getContractAt(
      name: "IFtsoManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoManager>;
    getContractAt(
      name: "IFtsoRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoRegistry>;
    getContractAt(
      name: "IFtsoRewardManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoRewardManager>;
    getContractAt(
      name: "IFtsoRewardOffersManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFtsoRewardOffersManager>;
    getContractAt(
      name: "IGenericRewardManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGenericRewardManager>;
    getContractAt(
      name: "IGovernanceSettings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernanceSettings>;
    getContractAt(
      name: "IGovernanceVotePower",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernanceVotePower>;
    getContractAt(
      name: "IIncreaseManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIncreaseManager>;
    getContractAt(
      name: "IJsonApiVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IJsonApiVerification>;
    getContractAt(
      name: "IPaymentVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPaymentVerification>;
    getContractAt(
      name: "IPChainStakeMirror",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPChainStakeMirror>;
    getContractAt(
      name: "IPChainStakeMirrorMultiSigVoting",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPChainStakeMirrorMultiSigVoting>;
    getContractAt(
      name: "IPChainVotePower",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPChainVotePower>;
    getContractAt(
      name: "IPriceSubmitter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceSubmitter>;
    getContractAt(
      name: "IRandomProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRandomProvider>;
    getContractAt(
      name: "IReferencedPaymentNonexistenceVerification",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IReferencedPaymentNonexistenceVerification>;
    getContractAt(
      name: "IRelay",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelay>;
    getContractAt(
      name: "IRewardManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardManager>;
    getContractAt(
      name: "IRNat",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRNat>;
    getContractAt(
      name: "IRNatAccount",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRNatAccount>;
    getContractAt(
      name: "ISubmission",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISubmission>;
    getContractAt(
      name: "IValidatorRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidatorRegistry>;
    getContractAt(
      name: "IVoterRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoterRegistry>;
    getContractAt(
      name: "IVoterWhitelister",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoterWhitelister>;
    getContractAt(
      name: "IVPContractEvents",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVPContractEvents>;
    getContractAt(
      name: "IVPToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVPToken>;
    getContractAt(
      name: "IWNat",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWNat>;
    getContractAt(
      name: "IWNatDelegationFee",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWNatDelegationFee>;
    getContractAt(
      name: "ProtocolsV2Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProtocolsV2Interface>;
    getContractAt(
      name: "RandomNumberV2Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RandomNumberV2Interface>;
    getContractAt(
      name: "RewardsV2Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsV2Interface>;
    getContractAt(
      name: "TestFtsoV2Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestFtsoV2Interface>;
    getContractAt(
      name: "IICleanable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IICleanable>;
    getContractAt(
      name: "IIGovernanceVotePower",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIGovernanceVotePower>;
    getContractAt(
      name: "IIVPContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIVPContract>;
    getContractAt(
      name: "IIVPToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIVPToken>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MerkleProof",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleProof>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "ArtistRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ArtistRegistry>;
    getContractAt(
      name: "BnbMemecoin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BnbMemecoin>;
    getContractAt(
      name: "SpotifyArtistList",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SpotifyArtistList>;

    deployContract(
      name: "IIFtso",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIFtso>;
    deployContract(
      name: "FtsoV2Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FtsoV2Interface>;
    deployContract(
      name: "IFtsoGenesis",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoGenesis>;
    deployContract(
      name: "IFtsoManagerGenesis",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoManagerGenesis>;
    deployContract(
      name: "IFtsoRegistryGenesis",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoRegistryGenesis>;
    deployContract(
      name: "IAddressBinder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressBinder>;
    deployContract(
      name: "IAddressValidityVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressValidityVerification>;
    deployContract(
      name: "IBalanceDecreasingTransactionVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBalanceDecreasingTransactionVerification>;
    deployContract(
      name: "IClaimSetupManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClaimSetupManager>;
    deployContract(
      name: "IConfirmedBlockHeightExistsVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IConfirmedBlockHeightExistsVerification>;
    deployContract(
      name: "IDelegationAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDelegationAccount>;
    deployContract(
      name: "IDistributionToDelegators",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDistributionToDelegators>;
    deployContract(
      name: "IEntityManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntityManager>;
    deployContract(
      name: "IEVMTransactionVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEVMTransactionVerification>;
    deployContract(
      name: "IFastUpdateIncentiveManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFastUpdateIncentiveManager>;
    deployContract(
      name: "IFastUpdater",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFastUpdater>;
    deployContract(
      name: "IFastUpdatesConfiguration",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFastUpdatesConfiguration>;
    deployContract(
      name: "IFdcHub",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFdcHub>;
    deployContract(
      name: "IFdcInflationConfigurations",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFdcInflationConfigurations>;
    deployContract(
      name: "IFdcRequestFeeConfigurations",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFdcRequestFeeConfigurations>;
    deployContract(
      name: "IFdcVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFdcVerification>;
    deployContract(
      name: "IFeeCalculator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeCalculator>;
    deployContract(
      name: "IFlareAssetRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlareAssetRegistry>;
    deployContract(
      name: "IFlareContractRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlareContractRegistry>;
    deployContract(
      name: "IFlareSystemsCalculator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlareSystemsCalculator>;
    deployContract(
      name: "IFlareSystemsManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlareSystemsManager>;
    deployContract(
      name: "IFtso",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtso>;
    deployContract(
      name: "IFtsoFeedDecimals",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoFeedDecimals>;
    deployContract(
      name: "IFtsoFeedIdConverter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoFeedIdConverter>;
    deployContract(
      name: "IFtsoFeedPublisher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoFeedPublisher>;
    deployContract(
      name: "IFtsoInflationConfigurations",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoInflationConfigurations>;
    deployContract(
      name: "IFtsoManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoManager>;
    deployContract(
      name: "IFtsoRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoRegistry>;
    deployContract(
      name: "IFtsoRewardManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoRewardManager>;
    deployContract(
      name: "IFtsoRewardOffersManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoRewardOffersManager>;
    deployContract(
      name: "IGenericRewardManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGenericRewardManager>;
    deployContract(
      name: "IGovernanceSettings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernanceSettings>;
    deployContract(
      name: "IGovernanceVotePower",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernanceVotePower>;
    deployContract(
      name: "IIncreaseManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIncreaseManager>;
    deployContract(
      name: "IJsonApiVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IJsonApiVerification>;
    deployContract(
      name: "IPaymentVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPaymentVerification>;
    deployContract(
      name: "IPChainStakeMirror",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPChainStakeMirror>;
    deployContract(
      name: "IPChainStakeMirrorMultiSigVoting",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPChainStakeMirrorMultiSigVoting>;
    deployContract(
      name: "IPChainVotePower",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPChainVotePower>;
    deployContract(
      name: "IPriceSubmitter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceSubmitter>;
    deployContract(
      name: "IRandomProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRandomProvider>;
    deployContract(
      name: "IReferencedPaymentNonexistenceVerification",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReferencedPaymentNonexistenceVerification>;
    deployContract(
      name: "IRelay",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRelay>;
    deployContract(
      name: "IRewardManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardManager>;
    deployContract(
      name: "IRNat",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRNat>;
    deployContract(
      name: "IRNatAccount",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRNatAccount>;
    deployContract(
      name: "ISubmission",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISubmission>;
    deployContract(
      name: "IValidatorRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidatorRegistry>;
    deployContract(
      name: "IVoterRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVoterRegistry>;
    deployContract(
      name: "IVoterWhitelister",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVoterWhitelister>;
    deployContract(
      name: "IVPContractEvents",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVPContractEvents>;
    deployContract(
      name: "IVPToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVPToken>;
    deployContract(
      name: "IWNat",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWNat>;
    deployContract(
      name: "IWNatDelegationFee",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWNatDelegationFee>;
    deployContract(
      name: "ProtocolsV2Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProtocolsV2Interface>;
    deployContract(
      name: "RandomNumberV2Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RandomNumberV2Interface>;
    deployContract(
      name: "RewardsV2Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardsV2Interface>;
    deployContract(
      name: "TestFtsoV2Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestFtsoV2Interface>;
    deployContract(
      name: "IICleanable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IICleanable>;
    deployContract(
      name: "IIGovernanceVotePower",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIGovernanceVotePower>;
    deployContract(
      name: "IIVPContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIVPContract>;
    deployContract(
      name: "IIVPToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIVPToken>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MerkleProof",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleProof>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "ArtistRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArtistRegistry>;
    deployContract(
      name: "BnbMemecoin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BnbMemecoin>;
    deployContract(
      name: "SpotifyArtistList",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotifyArtistList>;

    deployContract(
      name: "IIFtso",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIFtso>;
    deployContract(
      name: "FtsoV2Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FtsoV2Interface>;
    deployContract(
      name: "IFtsoGenesis",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoGenesis>;
    deployContract(
      name: "IFtsoManagerGenesis",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoManagerGenesis>;
    deployContract(
      name: "IFtsoRegistryGenesis",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoRegistryGenesis>;
    deployContract(
      name: "IAddressBinder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressBinder>;
    deployContract(
      name: "IAddressValidityVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressValidityVerification>;
    deployContract(
      name: "IBalanceDecreasingTransactionVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBalanceDecreasingTransactionVerification>;
    deployContract(
      name: "IClaimSetupManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IClaimSetupManager>;
    deployContract(
      name: "IConfirmedBlockHeightExistsVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IConfirmedBlockHeightExistsVerification>;
    deployContract(
      name: "IDelegationAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDelegationAccount>;
    deployContract(
      name: "IDistributionToDelegators",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDistributionToDelegators>;
    deployContract(
      name: "IEntityManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEntityManager>;
    deployContract(
      name: "IEVMTransactionVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEVMTransactionVerification>;
    deployContract(
      name: "IFastUpdateIncentiveManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFastUpdateIncentiveManager>;
    deployContract(
      name: "IFastUpdater",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFastUpdater>;
    deployContract(
      name: "IFastUpdatesConfiguration",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFastUpdatesConfiguration>;
    deployContract(
      name: "IFdcHub",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFdcHub>;
    deployContract(
      name: "IFdcInflationConfigurations",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFdcInflationConfigurations>;
    deployContract(
      name: "IFdcRequestFeeConfigurations",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFdcRequestFeeConfigurations>;
    deployContract(
      name: "IFdcVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFdcVerification>;
    deployContract(
      name: "IFeeCalculator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeCalculator>;
    deployContract(
      name: "IFlareAssetRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlareAssetRegistry>;
    deployContract(
      name: "IFlareContractRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlareContractRegistry>;
    deployContract(
      name: "IFlareSystemsCalculator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlareSystemsCalculator>;
    deployContract(
      name: "IFlareSystemsManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlareSystemsManager>;
    deployContract(
      name: "IFtso",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtso>;
    deployContract(
      name: "IFtsoFeedDecimals",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoFeedDecimals>;
    deployContract(
      name: "IFtsoFeedIdConverter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoFeedIdConverter>;
    deployContract(
      name: "IFtsoFeedPublisher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoFeedPublisher>;
    deployContract(
      name: "IFtsoInflationConfigurations",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoInflationConfigurations>;
    deployContract(
      name: "IFtsoManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoManager>;
    deployContract(
      name: "IFtsoRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoRegistry>;
    deployContract(
      name: "IFtsoRewardManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoRewardManager>;
    deployContract(
      name: "IFtsoRewardOffersManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFtsoRewardOffersManager>;
    deployContract(
      name: "IGenericRewardManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGenericRewardManager>;
    deployContract(
      name: "IGovernanceSettings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernanceSettings>;
    deployContract(
      name: "IGovernanceVotePower",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernanceVotePower>;
    deployContract(
      name: "IIncreaseManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIncreaseManager>;
    deployContract(
      name: "IJsonApiVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IJsonApiVerification>;
    deployContract(
      name: "IPaymentVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPaymentVerification>;
    deployContract(
      name: "IPChainStakeMirror",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPChainStakeMirror>;
    deployContract(
      name: "IPChainStakeMirrorMultiSigVoting",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPChainStakeMirrorMultiSigVoting>;
    deployContract(
      name: "IPChainVotePower",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPChainVotePower>;
    deployContract(
      name: "IPriceSubmitter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceSubmitter>;
    deployContract(
      name: "IRandomProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRandomProvider>;
    deployContract(
      name: "IReferencedPaymentNonexistenceVerification",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReferencedPaymentNonexistenceVerification>;
    deployContract(
      name: "IRelay",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRelay>;
    deployContract(
      name: "IRewardManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRewardManager>;
    deployContract(
      name: "IRNat",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRNat>;
    deployContract(
      name: "IRNatAccount",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRNatAccount>;
    deployContract(
      name: "ISubmission",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISubmission>;
    deployContract(
      name: "IValidatorRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValidatorRegistry>;
    deployContract(
      name: "IVoterRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVoterRegistry>;
    deployContract(
      name: "IVoterWhitelister",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVoterWhitelister>;
    deployContract(
      name: "IVPContractEvents",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVPContractEvents>;
    deployContract(
      name: "IVPToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVPToken>;
    deployContract(
      name: "IWNat",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWNat>;
    deployContract(
      name: "IWNatDelegationFee",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWNatDelegationFee>;
    deployContract(
      name: "ProtocolsV2Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProtocolsV2Interface>;
    deployContract(
      name: "RandomNumberV2Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RandomNumberV2Interface>;
    deployContract(
      name: "RewardsV2Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RewardsV2Interface>;
    deployContract(
      name: "TestFtsoV2Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestFtsoV2Interface>;
    deployContract(
      name: "IICleanable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IICleanable>;
    deployContract(
      name: "IIGovernanceVotePower",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIGovernanceVotePower>;
    deployContract(
      name: "IIVPContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIVPContract>;
    deployContract(
      name: "IIVPToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIVPToken>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MerkleProof",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleProof>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "ArtistRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ArtistRegistry>;
    deployContract(
      name: "BnbMemecoin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BnbMemecoin>;
    deployContract(
      name: "SpotifyArtistList",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SpotifyArtistList>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
