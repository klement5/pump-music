/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ArtistRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFees"
      | "artists"
      | "getArtistFees"
      | "registerArtist"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ArtistRegistered"): EventFragment;

  encodeFunctionData(functionFragment: "addFees", values: [string]): string;
  encodeFunctionData(functionFragment: "artists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getArtistFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerArtist",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "artists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getArtistFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace ArtistRegisteredEvent {
  export type InputTuple = [spotifyId: string, memecoinAddress: AddressLike];
  export type OutputTuple = [spotifyId: string, memecoinAddress: string];
  export interface OutputObject {
    spotifyId: string;
    memecoinAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArtistRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ArtistRegistry;
  waitForDeployment(): Promise<this>;

  interface: ArtistRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFees: TypedContractMethod<[spotifyId: string], [void], "payable">;

  artists: TypedContractMethod<
    [arg0: string],
    [[string, bigint] & { memecoinAddress: string; accumulatedFees: bigint }],
    "view"
  >;

  getArtistFees: TypedContractMethod<[spotifyId: string], [bigint], "view">;

  registerArtist: TypedContractMethod<
    [spotifyId: string, name: string, symbol: string],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[spotifyId: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFees"
  ): TypedContractMethod<[spotifyId: string], [void], "payable">;
  getFunction(
    nameOrSignature: "artists"
  ): TypedContractMethod<
    [arg0: string],
    [[string, bigint] & { memecoinAddress: string; accumulatedFees: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getArtistFees"
  ): TypedContractMethod<[spotifyId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerArtist"
  ): TypedContractMethod<
    [spotifyId: string, name: string, symbol: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[spotifyId: string], [void], "nonpayable">;

  getEvent(
    key: "ArtistRegistered"
  ): TypedContractEvent<
    ArtistRegisteredEvent.InputTuple,
    ArtistRegisteredEvent.OutputTuple,
    ArtistRegisteredEvent.OutputObject
  >;

  filters: {
    "ArtistRegistered(string,address)": TypedContractEvent<
      ArtistRegisteredEvent.InputTuple,
      ArtistRegisteredEvent.OutputTuple,
      ArtistRegisteredEvent.OutputObject
    >;
    ArtistRegistered: TypedContractEvent<
      ArtistRegisteredEvent.InputTuple,
      ArtistRegisteredEvent.OutputTuple,
      ArtistRegisteredEvent.OutputObject
    >;
  };
}
