/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace TestFtsoV2Interface {
  export type FeedDataStruct = {
    votingRoundId: BigNumberish;
    id: BytesLike;
    value: BigNumberish;
    turnoutBIPS: BigNumberish;
    decimals: BigNumberish;
  };

  export type FeedDataStructOutput = [
    votingRoundId: bigint,
    id: string,
    value: bigint,
    turnoutBIPS: bigint,
    decimals: bigint
  ] & {
    votingRoundId: bigint;
    id: string;
    value: bigint;
    turnoutBIPS: bigint;
    decimals: bigint;
  };

  export type FeedDataWithProofStruct = {
    proof: BytesLike[];
    body: TestFtsoV2Interface.FeedDataStruct;
  };

  export type FeedDataWithProofStructOutput = [
    proof: string[],
    body: TestFtsoV2Interface.FeedDataStructOutput
  ] & { proof: string[]; body: TestFtsoV2Interface.FeedDataStructOutput };
}

export interface TestFtsoV2InterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFeedById"
      | "getFeedByIdInWei"
      | "getFeedByIndex"
      | "getFeedByIndexInWei"
      | "getFeedId"
      | "getFeedIndex"
      | "getFeedsById"
      | "getFeedsByIdInWei"
      | "getFeedsByIndex"
      | "getFeedsByIndexInWei"
      | "verifyFeedData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFeedById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedByIdInWei",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedByIndexInWei",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedIndex",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedsById",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedsByIdInWei",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedsByIndex",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedsByIndexInWei",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFeedData",
    values: [TestFtsoV2Interface.FeedDataWithProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeedById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedByIdInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedByIndexInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeedId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedsById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedsByIdInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedsByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedsByIndexInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyFeedData",
    data: BytesLike
  ): Result;
}

export interface TestFtsoV2Interface extends BaseContract {
  connect(runner?: ContractRunner | null): TestFtsoV2Interface;
  waitForDeployment(): Promise<this>;

  interface: TestFtsoV2InterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFeedById: TypedContractMethod<
    [_feedId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        _value: bigint;
        _decimals: bigint;
        _timestamp: bigint;
      }
    ],
    "view"
  >;

  getFeedByIdInWei: TypedContractMethod<
    [_feedId: BytesLike],
    [[bigint, bigint] & { _value: bigint; _timestamp: bigint }],
    "view"
  >;

  getFeedByIndex: TypedContractMethod<
    [_index: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        _value: bigint;
        _decimals: bigint;
        _timestamp: bigint;
      }
    ],
    "view"
  >;

  getFeedByIndexInWei: TypedContractMethod<
    [_index: BigNumberish],
    [[bigint, bigint] & { _value: bigint; _timestamp: bigint }],
    "view"
  >;

  getFeedId: TypedContractMethod<[_index: BigNumberish], [string], "view">;

  getFeedIndex: TypedContractMethod<[_feedId: BytesLike], [bigint], "view">;

  getFeedsById: TypedContractMethod<
    [_feedIds: BytesLike[]],
    [
      [bigint[], bigint[], bigint] & {
        _values: bigint[];
        _decimals: bigint[];
        _timestamp: bigint;
      }
    ],
    "view"
  >;

  getFeedsByIdInWei: TypedContractMethod<
    [_feedIds: BytesLike[]],
    [[bigint[], bigint] & { _values: bigint[]; _timestamp: bigint }],
    "view"
  >;

  getFeedsByIndex: TypedContractMethod<
    [_indices: BigNumberish[]],
    [
      [bigint[], bigint[], bigint] & {
        _values: bigint[];
        _decimals: bigint[];
        _timestamp: bigint;
      }
    ],
    "view"
  >;

  getFeedsByIndexInWei: TypedContractMethod<
    [_indices: BigNumberish[]],
    [[bigint[], bigint] & { _values: bigint[]; _timestamp: bigint }],
    "view"
  >;

  verifyFeedData: TypedContractMethod<
    [_feedData: TestFtsoV2Interface.FeedDataWithProofStruct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFeedById"
  ): TypedContractMethod<
    [_feedId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        _value: bigint;
        _decimals: bigint;
        _timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedByIdInWei"
  ): TypedContractMethod<
    [_feedId: BytesLike],
    [[bigint, bigint] & { _value: bigint; _timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedByIndex"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        _value: bigint;
        _decimals: bigint;
        _timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedByIndexInWei"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [[bigint, bigint] & { _value: bigint; _timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedId"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFeedIndex"
  ): TypedContractMethod<[_feedId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeedsById"
  ): TypedContractMethod<
    [_feedIds: BytesLike[]],
    [
      [bigint[], bigint[], bigint] & {
        _values: bigint[];
        _decimals: bigint[];
        _timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedsByIdInWei"
  ): TypedContractMethod<
    [_feedIds: BytesLike[]],
    [[bigint[], bigint] & { _values: bigint[]; _timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedsByIndex"
  ): TypedContractMethod<
    [_indices: BigNumberish[]],
    [
      [bigint[], bigint[], bigint] & {
        _values: bigint[];
        _decimals: bigint[];
        _timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedsByIndexInWei"
  ): TypedContractMethod<
    [_indices: BigNumberish[]],
    [[bigint[], bigint] & { _values: bigint[]; _timestamp: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyFeedData"
  ): TypedContractMethod<
    [_feedData: TestFtsoV2Interface.FeedDataWithProofStruct],
    [boolean],
    "view"
  >;

  filters: {};
}
