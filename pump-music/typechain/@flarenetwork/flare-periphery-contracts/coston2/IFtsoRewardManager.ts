/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IFtsoRewardManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "active"
      | "autoClaim"
      | "claim"
      | "claimFromDataProviders"
      | "claimReward"
      | "claimRewardFromDataProviders"
      | "getClaimedReward"
      | "getCurrentRewardEpoch"
      | "getDataProviderCurrentFeePercentage"
      | "getDataProviderFeePercentage"
      | "getDataProviderPerformanceInfo"
      | "getDataProviderScheduledFeePercentageChanges"
      | "getEpochReward"
      | "getEpochsWithClaimableRewards"
      | "getEpochsWithUnclaimedRewards"
      | "getInitialRewardEpoch"
      | "getRewardEpochToExpireNext"
      | "getRewardEpochVotePowerBlock"
      | "getStateOfRewards"
      | "getStateOfRewardsFromDataProviders"
      | "nextClaimableRewardEpoch"
      | "setDataProviderFeePercentage"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeePercentageChanged"
      | "FtsoRewardManagerActivated"
      | "FtsoRewardManagerDeactivated"
      | "RewardClaimed"
      | "RewardClaimsEnabled"
      | "RewardClaimsExpired"
      | "RewardsDistributed"
      | "UnearnedRewardsAccrued"
  ): EventFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "autoClaim",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFromDataProviders",
    values: [AddressLike, AddressLike, BigNumberish[], AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardFromDataProviders",
    values: [AddressLike, BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedReward",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderCurrentFeePercentage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderFeePercentage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderPerformanceInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderScheduledFeePercentageChanges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochsWithClaimableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochsWithUnclaimedRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochToExpireNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochVotePowerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewards",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewardsFromDataProviders",
    values: [AddressLike, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimableRewardEpoch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataProviderFeePercentage",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "autoClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderCurrentFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderPerformanceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderScheduledFeePercentageChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochsWithClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochsWithUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochToExpireNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewardsFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimableRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataProviderFeePercentage",
    data: BytesLike
  ): Result;
}

export namespace FeePercentageChangedEvent {
  export type InputTuple = [
    dataProvider: AddressLike,
    value: BigNumberish,
    validFromEpoch: BigNumberish
  ];
  export type OutputTuple = [
    dataProvider: string,
    value: bigint,
    validFromEpoch: bigint
  ];
  export interface OutputObject {
    dataProvider: string;
    value: bigint;
    validFromEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FtsoRewardManagerActivatedEvent {
  export type InputTuple = [ftsoRewardManager: AddressLike];
  export type OutputTuple = [ftsoRewardManager: string];
  export interface OutputObject {
    ftsoRewardManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FtsoRewardManagerDeactivatedEvent {
  export type InputTuple = [ftsoRewardManager: AddressLike];
  export type OutputTuple = [ftsoRewardManager: string];
  export interface OutputObject {
    ftsoRewardManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    dataProvider: AddressLike,
    whoClaimed: AddressLike,
    sentTo: AddressLike,
    rewardEpoch: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    dataProvider: string,
    whoClaimed: string,
    sentTo: string,
    rewardEpoch: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    dataProvider: string;
    whoClaimed: string;
    sentTo: string;
    rewardEpoch: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimsEnabledEvent {
  export type InputTuple = [rewardEpochId: BigNumberish];
  export type OutputTuple = [rewardEpochId: bigint];
  export interface OutputObject {
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimsExpiredEvent {
  export type InputTuple = [rewardEpochId: BigNumberish];
  export type OutputTuple = [rewardEpochId: bigint];
  export interface OutputObject {
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    ftso: AddressLike,
    epochId: BigNumberish,
    addresses: AddressLike[],
    rewards: BigNumberish[]
  ];
  export type OutputTuple = [
    ftso: string,
    epochId: bigint,
    addresses: string[],
    rewards: bigint[]
  ];
  export interface OutputObject {
    ftso: string;
    epochId: bigint;
    addresses: string[];
    rewards: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnearnedRewardsAccruedEvent {
  export type InputTuple = [epochId: BigNumberish, reward: BigNumberish];
  export type OutputTuple = [epochId: bigint, reward: bigint];
  export interface OutputObject {
    epochId: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFtsoRewardManager extends BaseContract {
  connect(runner?: ContractRunner | null): IFtsoRewardManager;
  waitForDeployment(): Promise<this>;

  interface: IFtsoRewardManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  active: TypedContractMethod<[], [boolean], "view">;

  autoClaim: TypedContractMethod<
    [_rewardOwners: AddressLike[], _rewardEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<
    [
      _rewardOwner: AddressLike,
      _recipient: AddressLike,
      _rewardEpoch: BigNumberish,
      _wrap: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  claimFromDataProviders: TypedContractMethod<
    [
      _rewardOwner: AddressLike,
      _recipient: AddressLike,
      _rewardEpochs: BigNumberish[],
      _dataProviders: AddressLike[],
      _wrap: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  claimReward: TypedContractMethod<
    [_recipient: AddressLike, _rewardEpochs: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  claimRewardFromDataProviders: TypedContractMethod<
    [
      _recipient: AddressLike,
      _rewardEpochs: BigNumberish[],
      _dataProviders: AddressLike[]
    ],
    [bigint],
    "nonpayable"
  >;

  getClaimedReward: TypedContractMethod<
    [
      _rewardEpoch: BigNumberish,
      _dataProvider: AddressLike,
      _claimer: AddressLike
    ],
    [[boolean, bigint] & { _claimed: boolean; _amount: bigint }],
    "view"
  >;

  getCurrentRewardEpoch: TypedContractMethod<[], [bigint], "view">;

  getDataProviderCurrentFeePercentage: TypedContractMethod<
    [_dataProvider: AddressLike],
    [bigint],
    "view"
  >;

  getDataProviderFeePercentage: TypedContractMethod<
    [_dataProvider: AddressLike, _rewardEpoch: BigNumberish],
    [bigint],
    "view"
  >;

  getDataProviderPerformanceInfo: TypedContractMethod<
    [_rewardEpoch: BigNumberish, _dataProvider: AddressLike],
    [
      [bigint, bigint] & {
        _rewardAmount: bigint;
        _votePowerIgnoringRevocation: bigint;
      }
    ],
    "view"
  >;

  getDataProviderScheduledFeePercentageChanges: TypedContractMethod<
    [_dataProvider: AddressLike],
    [
      [bigint[], bigint[], boolean[]] & {
        _feePercentageBIPS: bigint[];
        _validFromEpoch: bigint[];
        _fixed: boolean[];
      }
    ],
    "view"
  >;

  getEpochReward: TypedContractMethod<
    [_rewardEpoch: BigNumberish],
    [[bigint, bigint] & { _totalReward: bigint; _claimedReward: bigint }],
    "view"
  >;

  getEpochsWithClaimableRewards: TypedContractMethod<
    [],
    [[bigint, bigint] & { _startEpochId: bigint; _endEpochId: bigint }],
    "view"
  >;

  getEpochsWithUnclaimedRewards: TypedContractMethod<
    [_beneficiary: AddressLike],
    [bigint[]],
    "view"
  >;

  getInitialRewardEpoch: TypedContractMethod<[], [bigint], "view">;

  getRewardEpochToExpireNext: TypedContractMethod<[], [bigint], "view">;

  getRewardEpochVotePowerBlock: TypedContractMethod<
    [_rewardEpoch: BigNumberish],
    [bigint],
    "view"
  >;

  getStateOfRewards: TypedContractMethod<
    [_beneficiary: AddressLike, _rewardEpoch: BigNumberish],
    [
      [string[], bigint[], boolean[], boolean] & {
        _dataProviders: string[];
        _rewardAmounts: bigint[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    ],
    "view"
  >;

  getStateOfRewardsFromDataProviders: TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _rewardEpoch: BigNumberish,
      _dataProviders: AddressLike[]
    ],
    [
      [bigint[], boolean[], boolean] & {
        _rewardAmounts: bigint[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    ],
    "view"
  >;

  nextClaimableRewardEpoch: TypedContractMethod<
    [_rewardOwner: AddressLike],
    [bigint],
    "view"
  >;

  setDataProviderFeePercentage: TypedContractMethod<
    [_feePercentageBIPS: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "active"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "autoClaim"
  ): TypedContractMethod<
    [_rewardOwners: AddressLike[], _rewardEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      _rewardOwner: AddressLike,
      _recipient: AddressLike,
      _rewardEpoch: BigNumberish,
      _wrap: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimFromDataProviders"
  ): TypedContractMethod<
    [
      _rewardOwner: AddressLike,
      _recipient: AddressLike,
      _rewardEpochs: BigNumberish[],
      _dataProviders: AddressLike[],
      _wrap: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<
    [_recipient: AddressLike, _rewardEpochs: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewardFromDataProviders"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _rewardEpochs: BigNumberish[],
      _dataProviders: AddressLike[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getClaimedReward"
  ): TypedContractMethod<
    [
      _rewardEpoch: BigNumberish,
      _dataProvider: AddressLike,
      _claimer: AddressLike
    ],
    [[boolean, bigint] & { _claimed: boolean; _amount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentRewardEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDataProviderCurrentFeePercentage"
  ): TypedContractMethod<[_dataProvider: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDataProviderFeePercentage"
  ): TypedContractMethod<
    [_dataProvider: AddressLike, _rewardEpoch: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDataProviderPerformanceInfo"
  ): TypedContractMethod<
    [_rewardEpoch: BigNumberish, _dataProvider: AddressLike],
    [
      [bigint, bigint] & {
        _rewardAmount: bigint;
        _votePowerIgnoringRevocation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDataProviderScheduledFeePercentageChanges"
  ): TypedContractMethod<
    [_dataProvider: AddressLike],
    [
      [bigint[], bigint[], boolean[]] & {
        _feePercentageBIPS: bigint[];
        _validFromEpoch: bigint[];
        _fixed: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochReward"
  ): TypedContractMethod<
    [_rewardEpoch: BigNumberish],
    [[bigint, bigint] & { _totalReward: bigint; _claimedReward: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochsWithClaimableRewards"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { _startEpochId: bigint; _endEpochId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochsWithUnclaimedRewards"
  ): TypedContractMethod<[_beneficiary: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getInitialRewardEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardEpochToExpireNext"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardEpochVotePowerBlock"
  ): TypedContractMethod<[_rewardEpoch: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStateOfRewards"
  ): TypedContractMethod<
    [_beneficiary: AddressLike, _rewardEpoch: BigNumberish],
    [
      [string[], bigint[], boolean[], boolean] & {
        _dataProviders: string[];
        _rewardAmounts: bigint[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStateOfRewardsFromDataProviders"
  ): TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _rewardEpoch: BigNumberish,
      _dataProviders: AddressLike[]
    ],
    [
      [bigint[], boolean[], boolean] & {
        _rewardAmounts: bigint[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextClaimableRewardEpoch"
  ): TypedContractMethod<[_rewardOwner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDataProviderFeePercentage"
  ): TypedContractMethod<
    [_feePercentageBIPS: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "FeePercentageChanged"
  ): TypedContractEvent<
    FeePercentageChangedEvent.InputTuple,
    FeePercentageChangedEvent.OutputTuple,
    FeePercentageChangedEvent.OutputObject
  >;
  getEvent(
    key: "FtsoRewardManagerActivated"
  ): TypedContractEvent<
    FtsoRewardManagerActivatedEvent.InputTuple,
    FtsoRewardManagerActivatedEvent.OutputTuple,
    FtsoRewardManagerActivatedEvent.OutputObject
  >;
  getEvent(
    key: "FtsoRewardManagerDeactivated"
  ): TypedContractEvent<
    FtsoRewardManagerDeactivatedEvent.InputTuple,
    FtsoRewardManagerDeactivatedEvent.OutputTuple,
    FtsoRewardManagerDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimsEnabled"
  ): TypedContractEvent<
    RewardClaimsEnabledEvent.InputTuple,
    RewardClaimsEnabledEvent.OutputTuple,
    RewardClaimsEnabledEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimsExpired"
  ): TypedContractEvent<
    RewardClaimsExpiredEvent.InputTuple,
    RewardClaimsExpiredEvent.OutputTuple,
    RewardClaimsExpiredEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "UnearnedRewardsAccrued"
  ): TypedContractEvent<
    UnearnedRewardsAccruedEvent.InputTuple,
    UnearnedRewardsAccruedEvent.OutputTuple,
    UnearnedRewardsAccruedEvent.OutputObject
  >;

  filters: {
    "FeePercentageChanged(address,uint256,uint256)": TypedContractEvent<
      FeePercentageChangedEvent.InputTuple,
      FeePercentageChangedEvent.OutputTuple,
      FeePercentageChangedEvent.OutputObject
    >;
    FeePercentageChanged: TypedContractEvent<
      FeePercentageChangedEvent.InputTuple,
      FeePercentageChangedEvent.OutputTuple,
      FeePercentageChangedEvent.OutputObject
    >;

    "FtsoRewardManagerActivated(address)": TypedContractEvent<
      FtsoRewardManagerActivatedEvent.InputTuple,
      FtsoRewardManagerActivatedEvent.OutputTuple,
      FtsoRewardManagerActivatedEvent.OutputObject
    >;
    FtsoRewardManagerActivated: TypedContractEvent<
      FtsoRewardManagerActivatedEvent.InputTuple,
      FtsoRewardManagerActivatedEvent.OutputTuple,
      FtsoRewardManagerActivatedEvent.OutputObject
    >;

    "FtsoRewardManagerDeactivated(address)": TypedContractEvent<
      FtsoRewardManagerDeactivatedEvent.InputTuple,
      FtsoRewardManagerDeactivatedEvent.OutputTuple,
      FtsoRewardManagerDeactivatedEvent.OutputObject
    >;
    FtsoRewardManagerDeactivated: TypedContractEvent<
      FtsoRewardManagerDeactivatedEvent.InputTuple,
      FtsoRewardManagerDeactivatedEvent.OutputTuple,
      FtsoRewardManagerDeactivatedEvent.OutputObject
    >;

    "RewardClaimed(address,address,address,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RewardClaimsEnabled(uint256)": TypedContractEvent<
      RewardClaimsEnabledEvent.InputTuple,
      RewardClaimsEnabledEvent.OutputTuple,
      RewardClaimsEnabledEvent.OutputObject
    >;
    RewardClaimsEnabled: TypedContractEvent<
      RewardClaimsEnabledEvent.InputTuple,
      RewardClaimsEnabledEvent.OutputTuple,
      RewardClaimsEnabledEvent.OutputObject
    >;

    "RewardClaimsExpired(uint256)": TypedContractEvent<
      RewardClaimsExpiredEvent.InputTuple,
      RewardClaimsExpiredEvent.OutputTuple,
      RewardClaimsExpiredEvent.OutputObject
    >;
    RewardClaimsExpired: TypedContractEvent<
      RewardClaimsExpiredEvent.InputTuple,
      RewardClaimsExpiredEvent.OutputTuple,
      RewardClaimsExpiredEvent.OutputObject
    >;

    "RewardsDistributed(address,uint256,address[],uint256[])": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "UnearnedRewardsAccrued(uint256,uint256)": TypedContractEvent<
      UnearnedRewardsAccruedEvent.InputTuple,
      UnearnedRewardsAccruedEvent.OutputTuple,
      UnearnedRewardsAccruedEvent.OutputObject
    >;
    UnearnedRewardsAccrued: TypedContractEvent<
      UnearnedRewardsAccruedEvent.InputTuple,
      UnearnedRewardsAccruedEvent.OutputTuple,
      UnearnedRewardsAccruedEvent.OutputObject
    >;
  };
}
