/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IBalanceDecreasingTransaction {
  export type RequestBodyStruct = {
    transactionId: BytesLike;
    sourceAddressIndicator: BytesLike;
  };

  export type RequestBodyStructOutput = [
    transactionId: string,
    sourceAddressIndicator: string
  ] & { transactionId: string; sourceAddressIndicator: string };

  export type ResponseBodyStruct = {
    blockNumber: BigNumberish;
    blockTimestamp: BigNumberish;
    sourceAddressHash: BytesLike;
    spentAmount: BigNumberish;
    standardPaymentReference: BytesLike;
  };

  export type ResponseBodyStructOutput = [
    blockNumber: bigint,
    blockTimestamp: bigint,
    sourceAddressHash: string,
    spentAmount: bigint,
    standardPaymentReference: string
  ] & {
    blockNumber: bigint;
    blockTimestamp: bigint;
    sourceAddressHash: string;
    spentAmount: bigint;
    standardPaymentReference: string;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IBalanceDecreasingTransaction.RequestBodyStruct;
    responseBody: IBalanceDecreasingTransaction.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IBalanceDecreasingTransaction.RequestBodyStructOutput,
    responseBody: IBalanceDecreasingTransaction.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IBalanceDecreasingTransaction.RequestBodyStructOutput;
    responseBody: IBalanceDecreasingTransaction.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IBalanceDecreasingTransaction.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IBalanceDecreasingTransaction.ResponseStructOutput
  ] & {
    merkleProof: string[];
    data: IBalanceDecreasingTransaction.ResponseStructOutput;
  };
}

export interface IBalanceDecreasingTransactionVerificationInterface
  extends Interface {
  getFunction(
    nameOrSignature: "verifyBalanceDecreasingTransaction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyBalanceDecreasingTransaction",
    values: [IBalanceDecreasingTransaction.ProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyBalanceDecreasingTransaction",
    data: BytesLike
  ): Result;
}

export interface IBalanceDecreasingTransactionVerification
  extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): IBalanceDecreasingTransactionVerification;
  waitForDeployment(): Promise<this>;

  interface: IBalanceDecreasingTransactionVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyBalanceDecreasingTransaction: TypedContractMethod<
    [_proof: IBalanceDecreasingTransaction.ProofStruct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyBalanceDecreasingTransaction"
  ): TypedContractMethod<
    [_proof: IBalanceDecreasingTransaction.ProofStruct],
    [boolean],
    "view"
  >;

  filters: {};
}
