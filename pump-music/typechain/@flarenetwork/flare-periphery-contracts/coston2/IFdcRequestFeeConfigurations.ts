/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IFdcRequestFeeConfigurationsInterface extends Interface {
  getFunction(nameOrSignature: "getRequestFee"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TypeAndSourceFeeRemoved" | "TypeAndSourceFeeSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getRequestFee",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRequestFee",
    data: BytesLike
  ): Result;
}

export namespace TypeAndSourceFeeRemovedEvent {
  export type InputTuple = [attestationType: BytesLike, source: BytesLike];
  export type OutputTuple = [attestationType: string, source: string];
  export interface OutputObject {
    attestationType: string;
    source: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TypeAndSourceFeeSetEvent {
  export type InputTuple = [
    attestationType: BytesLike,
    source: BytesLike,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    attestationType: string,
    source: string,
    fee: bigint
  ];
  export interface OutputObject {
    attestationType: string;
    source: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFdcRequestFeeConfigurations extends BaseContract {
  connect(runner?: ContractRunner | null): IFdcRequestFeeConfigurations;
  waitForDeployment(): Promise<this>;

  interface: IFdcRequestFeeConfigurationsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRequestFee: TypedContractMethod<[_data: BytesLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRequestFee"
  ): TypedContractMethod<[_data: BytesLike], [bigint], "view">;

  getEvent(
    key: "TypeAndSourceFeeRemoved"
  ): TypedContractEvent<
    TypeAndSourceFeeRemovedEvent.InputTuple,
    TypeAndSourceFeeRemovedEvent.OutputTuple,
    TypeAndSourceFeeRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TypeAndSourceFeeSet"
  ): TypedContractEvent<
    TypeAndSourceFeeSetEvent.InputTuple,
    TypeAndSourceFeeSetEvent.OutputTuple,
    TypeAndSourceFeeSetEvent.OutputObject
  >;

  filters: {
    "TypeAndSourceFeeRemoved(bytes32,bytes32)": TypedContractEvent<
      TypeAndSourceFeeRemovedEvent.InputTuple,
      TypeAndSourceFeeRemovedEvent.OutputTuple,
      TypeAndSourceFeeRemovedEvent.OutputObject
    >;
    TypeAndSourceFeeRemoved: TypedContractEvent<
      TypeAndSourceFeeRemovedEvent.InputTuple,
      TypeAndSourceFeeRemovedEvent.OutputTuple,
      TypeAndSourceFeeRemovedEvent.OutputObject
    >;

    "TypeAndSourceFeeSet(bytes32,bytes32,uint256)": TypedContractEvent<
      TypeAndSourceFeeSetEvent.InputTuple,
      TypeAndSourceFeeSetEvent.OutputTuple,
      TypeAndSourceFeeSetEvent.OutputObject
    >;
    TypeAndSourceFeeSet: TypedContractEvent<
      TypeAndSourceFeeSetEvent.InputTuple,
      TypeAndSourceFeeSetEvent.OutputTuple,
      TypeAndSourceFeeSetEvent.OutputObject
    >;
  };
}
