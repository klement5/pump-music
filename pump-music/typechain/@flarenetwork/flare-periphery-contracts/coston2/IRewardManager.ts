/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace RewardsV2Interface {
  export type RewardClaimStruct = {
    rewardEpochId: BigNumberish;
    beneficiary: BytesLike;
    amount: BigNumberish;
    claimType: BigNumberish;
  };

  export type RewardClaimStructOutput = [
    rewardEpochId: bigint,
    beneficiary: string,
    amount: bigint,
    claimType: bigint
  ] & {
    rewardEpochId: bigint;
    beneficiary: string;
    amount: bigint;
    claimType: bigint;
  };

  export type RewardClaimWithProofStruct = {
    merkleProof: BytesLike[];
    body: RewardsV2Interface.RewardClaimStruct;
  };

  export type RewardClaimWithProofStructOutput = [
    merkleProof: string[],
    body: RewardsV2Interface.RewardClaimStructOutput
  ] & {
    merkleProof: string[];
    body: RewardsV2Interface.RewardClaimStructOutput;
  };

  export type RewardStateStruct = {
    rewardEpochId: BigNumberish;
    beneficiary: BytesLike;
    amount: BigNumberish;
    claimType: BigNumberish;
    initialised: boolean;
  };

  export type RewardStateStructOutput = [
    rewardEpochId: bigint,
    beneficiary: string,
    amount: bigint,
    claimType: bigint,
    initialised: boolean
  ] & {
    rewardEpochId: bigint;
    beneficiary: string;
    amount: bigint;
    claimType: bigint;
    initialised: boolean;
  };
}

export declare namespace IRewardManager {
  export type UnclaimedRewardStateStruct = {
    initialised: boolean;
    amount: BigNumberish;
    weight: BigNumberish;
  };

  export type UnclaimedRewardStateStructOutput = [
    initialised: boolean,
    amount: bigint,
    weight: bigint
  ] & { initialised: boolean; amount: bigint; weight: bigint };
}

export interface IRewardManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "active"
      | "autoClaim"
      | "claim"
      | "cleanupBlockNumber"
      | "firstClaimableRewardEpochId"
      | "getCurrentRewardEpochId"
      | "getInitialRewardEpochId"
      | "getNextClaimableRewardEpochId"
      | "getRewardEpochIdToExpireNext"
      | "getRewardEpochIdsWithClaimableRewards"
      | "getRewardEpochTotals"
      | "getStateOfRewards"
      | "getStateOfRewardsAt"
      | "getTotals"
      | "getUnclaimedRewardState"
      | "initialiseWeightBasedClaims"
      | "noOfInitialisedWeightBasedClaims"
      | "rewardManagerId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RewardClaimed"
      | "RewardClaimsEnabled"
      | "RewardClaimsExpired"
  ): EventFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "autoClaim",
    values: [
      AddressLike[],
      BigNumberish,
      RewardsV2Interface.RewardClaimWithProofStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      boolean,
      RewardsV2Interface.RewardClaimWithProofStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanupBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstClaimableRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextClaimableRewardEpochId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochIdToExpireNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochIdsWithClaimableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochTotals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewardsAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTotals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedRewardState",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialiseWeightBasedClaims",
    values: [RewardsV2Interface.RewardClaimWithProofStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "noOfInitialisedWeightBasedClaims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManagerId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "autoClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cleanupBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstClaimableRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextClaimableRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochIdToExpireNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochIdsWithClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochTotals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewardsAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTotals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedRewardState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialiseWeightBasedClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noOfInitialisedWeightBasedClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManagerId",
    data: BytesLike
  ): Result;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    rewardOwner: AddressLike,
    recipient: AddressLike,
    rewardEpochId: BigNumberish,
    claimType: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    rewardOwner: string,
    recipient: string,
    rewardEpochId: bigint,
    claimType: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    rewardOwner: string;
    recipient: string;
    rewardEpochId: bigint;
    claimType: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimsEnabledEvent {
  export type InputTuple = [rewardEpochId: BigNumberish];
  export type OutputTuple = [rewardEpochId: bigint];
  export interface OutputObject {
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimsExpiredEvent {
  export type InputTuple = [rewardEpochId: BigNumberish];
  export type OutputTuple = [rewardEpochId: bigint];
  export interface OutputObject {
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRewardManager extends BaseContract {
  connect(runner?: ContractRunner | null): IRewardManager;
  waitForDeployment(): Promise<this>;

  interface: IRewardManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  active: TypedContractMethod<[], [boolean], "view">;

  autoClaim: TypedContractMethod<
    [
      _rewardOwners: AddressLike[],
      _rewardEpochId: BigNumberish,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[]
    ],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<
    [
      _rewardOwner: AddressLike,
      _recipient: AddressLike,
      _rewardEpochId: BigNumberish,
      _wrap: boolean,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[]
    ],
    [bigint],
    "nonpayable"
  >;

  cleanupBlockNumber: TypedContractMethod<[], [bigint], "view">;

  firstClaimableRewardEpochId: TypedContractMethod<[], [bigint], "view">;

  getCurrentRewardEpochId: TypedContractMethod<[], [bigint], "view">;

  getInitialRewardEpochId: TypedContractMethod<[], [bigint], "view">;

  getNextClaimableRewardEpochId: TypedContractMethod<
    [_rewardOwner: AddressLike],
    [bigint],
    "view"
  >;

  getRewardEpochIdToExpireNext: TypedContractMethod<[], [bigint], "view">;

  getRewardEpochIdsWithClaimableRewards: TypedContractMethod<
    [],
    [[bigint, bigint] & { _startEpochId: bigint; _endEpochId: bigint }],
    "view"
  >;

  getRewardEpochTotals: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalRewardsWei: bigint;
        _totalInflationRewardsWei: bigint;
        _initialisedRewardsWei: bigint;
        _claimedRewardsWei: bigint;
        _burnedRewardsWei: bigint;
      }
    ],
    "view"
  >;

  getStateOfRewards: TypedContractMethod<
    [_rewardOwner: AddressLike],
    [RewardsV2Interface.RewardStateStructOutput[][]],
    "view"
  >;

  getStateOfRewardsAt: TypedContractMethod<
    [_rewardOwner: AddressLike, _rewardEpochId: BigNumberish],
    [RewardsV2Interface.RewardStateStructOutput[]],
    "view"
  >;

  getTotals: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalRewardsWei: bigint;
        _totalInflationRewardsWei: bigint;
        _totalClaimedWei: bigint;
        _totalBurnedWei: bigint;
      }
    ],
    "view"
  >;

  getUnclaimedRewardState: TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _rewardEpochId: BigNumberish,
      _claimType: BigNumberish
    ],
    [IRewardManager.UnclaimedRewardStateStructOutput],
    "view"
  >;

  initialiseWeightBasedClaims: TypedContractMethod<
    [_proofs: RewardsV2Interface.RewardClaimWithProofStruct[]],
    [void],
    "nonpayable"
  >;

  noOfInitialisedWeightBasedClaims: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  rewardManagerId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "active"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "autoClaim"
  ): TypedContractMethod<
    [
      _rewardOwners: AddressLike[],
      _rewardEpochId: BigNumberish,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [
      _rewardOwner: AddressLike,
      _recipient: AddressLike,
      _rewardEpochId: BigNumberish,
      _wrap: boolean,
      _proofs: RewardsV2Interface.RewardClaimWithProofStruct[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cleanupBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "firstClaimableRewardEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRewardEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInitialRewardEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNextClaimableRewardEpochId"
  ): TypedContractMethod<[_rewardOwner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardEpochIdToExpireNext"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardEpochIdsWithClaimableRewards"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { _startEpochId: bigint; _endEpochId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardEpochTotals"
  ): TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalRewardsWei: bigint;
        _totalInflationRewardsWei: bigint;
        _initialisedRewardsWei: bigint;
        _claimedRewardsWei: bigint;
        _burnedRewardsWei: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStateOfRewards"
  ): TypedContractMethod<
    [_rewardOwner: AddressLike],
    [RewardsV2Interface.RewardStateStructOutput[][]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStateOfRewardsAt"
  ): TypedContractMethod<
    [_rewardOwner: AddressLike, _rewardEpochId: BigNumberish],
    [RewardsV2Interface.RewardStateStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotals"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        _totalRewardsWei: bigint;
        _totalInflationRewardsWei: bigint;
        _totalClaimedWei: bigint;
        _totalBurnedWei: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnclaimedRewardState"
  ): TypedContractMethod<
    [
      _beneficiary: AddressLike,
      _rewardEpochId: BigNumberish,
      _claimType: BigNumberish
    ],
    [IRewardManager.UnclaimedRewardStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialiseWeightBasedClaims"
  ): TypedContractMethod<
    [_proofs: RewardsV2Interface.RewardClaimWithProofStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "noOfInitialisedWeightBasedClaims"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardManagerId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimsEnabled"
  ): TypedContractEvent<
    RewardClaimsEnabledEvent.InputTuple,
    RewardClaimsEnabledEvent.OutputTuple,
    RewardClaimsEnabledEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimsExpired"
  ): TypedContractEvent<
    RewardClaimsExpiredEvent.InputTuple,
    RewardClaimsExpiredEvent.OutputTuple,
    RewardClaimsExpiredEvent.OutputObject
  >;

  filters: {
    "RewardClaimed(address,address,address,uint24,uint8,uint120)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "RewardClaimsEnabled(uint256)": TypedContractEvent<
      RewardClaimsEnabledEvent.InputTuple,
      RewardClaimsEnabledEvent.OutputTuple,
      RewardClaimsEnabledEvent.OutputObject
    >;
    RewardClaimsEnabled: TypedContractEvent<
      RewardClaimsEnabledEvent.InputTuple,
      RewardClaimsEnabledEvent.OutputTuple,
      RewardClaimsEnabledEvent.OutputObject
    >;

    "RewardClaimsExpired(uint256)": TypedContractEvent<
      RewardClaimsExpiredEvent.InputTuple,
      RewardClaimsExpiredEvent.OutputTuple,
      RewardClaimsExpiredEvent.OutputObject
    >;
    RewardClaimsExpired: TypedContractEvent<
      RewardClaimsExpiredEvent.InputTuple,
      RewardClaimsExpiredEvent.OutputTuple,
      RewardClaimsExpiredEvent.OutputObject
    >;
  };
}
