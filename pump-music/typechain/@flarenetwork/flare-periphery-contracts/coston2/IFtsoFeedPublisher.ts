/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IFtsoFeedPublisher {
  export type FeedStruct = {
    votingRoundId: BigNumberish;
    id: BytesLike;
    value: BigNumberish;
    turnoutBIPS: BigNumberish;
    decimals: BigNumberish;
  };

  export type FeedStructOutput = [
    votingRoundId: bigint,
    id: string,
    value: bigint,
    turnoutBIPS: bigint,
    decimals: bigint
  ] & {
    votingRoundId: bigint;
    id: string;
    value: bigint;
    turnoutBIPS: bigint;
    decimals: bigint;
  };

  export type FeedWithProofStruct = {
    merkleProof: BytesLike[];
    body: IFtsoFeedPublisher.FeedStruct;
  };

  export type FeedWithProofStructOutput = [
    merkleProof: string[],
    body: IFtsoFeedPublisher.FeedStructOutput
  ] & { merkleProof: string[]; body: IFtsoFeedPublisher.FeedStructOutput };
}

export interface IFtsoFeedPublisherInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "feedsHistorySize"
      | "ftsoProtocolId"
      | "getCurrentFeed"
      | "getFeed"
      | "publish"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FtsoFeedPublished"): EventFragment;

  encodeFunctionData(
    functionFragment: "feedsHistorySize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ftsoProtocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFeed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeed",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publish",
    values: [IFtsoFeedPublisher.FeedWithProofStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "feedsHistorySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ftsoProtocolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publish", data: BytesLike): Result;
}

export namespace FtsoFeedPublishedEvent {
  export type InputTuple = [
    votingRoundId: BigNumberish,
    id: BytesLike,
    value: BigNumberish,
    turnoutBIPS: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [
    votingRoundId: bigint,
    id: string,
    value: bigint,
    turnoutBIPS: bigint,
    decimals: bigint
  ];
  export interface OutputObject {
    votingRoundId: bigint;
    id: string;
    value: bigint;
    turnoutBIPS: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFtsoFeedPublisher extends BaseContract {
  connect(runner?: ContractRunner | null): IFtsoFeedPublisher;
  waitForDeployment(): Promise<this>;

  interface: IFtsoFeedPublisherInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  feedsHistorySize: TypedContractMethod<[], [bigint], "view">;

  ftsoProtocolId: TypedContractMethod<[], [bigint], "view">;

  getCurrentFeed: TypedContractMethod<
    [_feedId: BytesLike],
    [IFtsoFeedPublisher.FeedStructOutput],
    "view"
  >;

  getFeed: TypedContractMethod<
    [_feedId: BytesLike, _votingRoundId: BigNumberish],
    [IFtsoFeedPublisher.FeedStructOutput],
    "view"
  >;

  publish: TypedContractMethod<
    [_proofs: IFtsoFeedPublisher.FeedWithProofStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "feedsHistorySize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ftsoProtocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentFeed"
  ): TypedContractMethod<
    [_feedId: BytesLike],
    [IFtsoFeedPublisher.FeedStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeed"
  ): TypedContractMethod<
    [_feedId: BytesLike, _votingRoundId: BigNumberish],
    [IFtsoFeedPublisher.FeedStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "publish"
  ): TypedContractMethod<
    [_proofs: IFtsoFeedPublisher.FeedWithProofStruct[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FtsoFeedPublished"
  ): TypedContractEvent<
    FtsoFeedPublishedEvent.InputTuple,
    FtsoFeedPublishedEvent.OutputTuple,
    FtsoFeedPublishedEvent.OutputObject
  >;

  filters: {
    "FtsoFeedPublished(uint32,bytes21,int32,uint16,int8)": TypedContractEvent<
      FtsoFeedPublishedEvent.InputTuple,
      FtsoFeedPublishedEvent.OutputTuple,
      FtsoFeedPublishedEvent.OutputObject
    >;
    FtsoFeedPublished: TypedContractEvent<
      FtsoFeedPublishedEvent.InputTuple,
      FtsoFeedPublishedEvent.OutputTuple,
      FtsoFeedPublishedEvent.OutputObject
    >;
  };
}
