/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IAddressValidity {
  export type RequestBodyStruct = { addressStr: string };

  export type RequestBodyStructOutput = [addressStr: string] & {
    addressStr: string;
  };

  export type ResponseBodyStruct = {
    isValid: boolean;
    standardAddress: string;
    standardAddressHash: BytesLike;
  };

  export type ResponseBodyStructOutput = [
    isValid: boolean,
    standardAddress: string,
    standardAddressHash: string
  ] & {
    isValid: boolean;
    standardAddress: string;
    standardAddressHash: string;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IAddressValidity.RequestBodyStruct;
    responseBody: IAddressValidity.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IAddressValidity.RequestBodyStructOutput,
    responseBody: IAddressValidity.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IAddressValidity.RequestBodyStructOutput;
    responseBody: IAddressValidity.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IAddressValidity.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IAddressValidity.ResponseStructOutput
  ] & { merkleProof: string[]; data: IAddressValidity.ResponseStructOutput };
}

export declare namespace IBalanceDecreasingTransaction {
  export type RequestBodyStruct = {
    transactionId: BytesLike;
    sourceAddressIndicator: BytesLike;
  };

  export type RequestBodyStructOutput = [
    transactionId: string,
    sourceAddressIndicator: string
  ] & { transactionId: string; sourceAddressIndicator: string };

  export type ResponseBodyStruct = {
    blockNumber: BigNumberish;
    blockTimestamp: BigNumberish;
    sourceAddressHash: BytesLike;
    spentAmount: BigNumberish;
    standardPaymentReference: BytesLike;
  };

  export type ResponseBodyStructOutput = [
    blockNumber: bigint,
    blockTimestamp: bigint,
    sourceAddressHash: string,
    spentAmount: bigint,
    standardPaymentReference: string
  ] & {
    blockNumber: bigint;
    blockTimestamp: bigint;
    sourceAddressHash: string;
    spentAmount: bigint;
    standardPaymentReference: string;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IBalanceDecreasingTransaction.RequestBodyStruct;
    responseBody: IBalanceDecreasingTransaction.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IBalanceDecreasingTransaction.RequestBodyStructOutput,
    responseBody: IBalanceDecreasingTransaction.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IBalanceDecreasingTransaction.RequestBodyStructOutput;
    responseBody: IBalanceDecreasingTransaction.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IBalanceDecreasingTransaction.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IBalanceDecreasingTransaction.ResponseStructOutput
  ] & {
    merkleProof: string[];
    data: IBalanceDecreasingTransaction.ResponseStructOutput;
  };
}

export declare namespace IConfirmedBlockHeightExists {
  export type RequestBodyStruct = {
    blockNumber: BigNumberish;
    queryWindow: BigNumberish;
  };

  export type RequestBodyStructOutput = [
    blockNumber: bigint,
    queryWindow: bigint
  ] & { blockNumber: bigint; queryWindow: bigint };

  export type ResponseBodyStruct = {
    blockTimestamp: BigNumberish;
    numberOfConfirmations: BigNumberish;
    lowestQueryWindowBlockNumber: BigNumberish;
    lowestQueryWindowBlockTimestamp: BigNumberish;
  };

  export type ResponseBodyStructOutput = [
    blockTimestamp: bigint,
    numberOfConfirmations: bigint,
    lowestQueryWindowBlockNumber: bigint,
    lowestQueryWindowBlockTimestamp: bigint
  ] & {
    blockTimestamp: bigint;
    numberOfConfirmations: bigint;
    lowestQueryWindowBlockNumber: bigint;
    lowestQueryWindowBlockTimestamp: bigint;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IConfirmedBlockHeightExists.RequestBodyStruct;
    responseBody: IConfirmedBlockHeightExists.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IConfirmedBlockHeightExists.RequestBodyStructOutput,
    responseBody: IConfirmedBlockHeightExists.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IConfirmedBlockHeightExists.RequestBodyStructOutput;
    responseBody: IConfirmedBlockHeightExists.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IConfirmedBlockHeightExists.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IConfirmedBlockHeightExists.ResponseStructOutput
  ] & {
    merkleProof: string[];
    data: IConfirmedBlockHeightExists.ResponseStructOutput;
  };
}

export declare namespace IEVMTransaction {
  export type RequestBodyStruct = {
    transactionHash: BytesLike;
    requiredConfirmations: BigNumberish;
    provideInput: boolean;
    listEvents: boolean;
    logIndices: BigNumberish[];
  };

  export type RequestBodyStructOutput = [
    transactionHash: string,
    requiredConfirmations: bigint,
    provideInput: boolean,
    listEvents: boolean,
    logIndices: bigint[]
  ] & {
    transactionHash: string;
    requiredConfirmations: bigint;
    provideInput: boolean;
    listEvents: boolean;
    logIndices: bigint[];
  };

  export type EventStruct = {
    logIndex: BigNumberish;
    emitterAddress: AddressLike;
    topics: BytesLike[];
    data: BytesLike;
    removed: boolean;
  };

  export type EventStructOutput = [
    logIndex: bigint,
    emitterAddress: string,
    topics: string[],
    data: string,
    removed: boolean
  ] & {
    logIndex: bigint;
    emitterAddress: string;
    topics: string[];
    data: string;
    removed: boolean;
  };

  export type ResponseBodyStruct = {
    blockNumber: BigNumberish;
    timestamp: BigNumberish;
    sourceAddress: AddressLike;
    isDeployment: boolean;
    receivingAddress: AddressLike;
    value: BigNumberish;
    input: BytesLike;
    status: BigNumberish;
    events: IEVMTransaction.EventStruct[];
  };

  export type ResponseBodyStructOutput = [
    blockNumber: bigint,
    timestamp: bigint,
    sourceAddress: string,
    isDeployment: boolean,
    receivingAddress: string,
    value: bigint,
    input: string,
    status: bigint,
    events: IEVMTransaction.EventStructOutput[]
  ] & {
    blockNumber: bigint;
    timestamp: bigint;
    sourceAddress: string;
    isDeployment: boolean;
    receivingAddress: string;
    value: bigint;
    input: string;
    status: bigint;
    events: IEVMTransaction.EventStructOutput[];
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IEVMTransaction.RequestBodyStruct;
    responseBody: IEVMTransaction.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IEVMTransaction.RequestBodyStructOutput,
    responseBody: IEVMTransaction.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IEVMTransaction.RequestBodyStructOutput;
    responseBody: IEVMTransaction.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IEVMTransaction.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IEVMTransaction.ResponseStructOutput
  ] & { merkleProof: string[]; data: IEVMTransaction.ResponseStructOutput };
}

export declare namespace IPayment {
  export type RequestBodyStruct = {
    transactionId: BytesLike;
    inUtxo: BigNumberish;
    utxo: BigNumberish;
  };

  export type RequestBodyStructOutput = [
    transactionId: string,
    inUtxo: bigint,
    utxo: bigint
  ] & { transactionId: string; inUtxo: bigint; utxo: bigint };

  export type ResponseBodyStruct = {
    blockNumber: BigNumberish;
    blockTimestamp: BigNumberish;
    sourceAddressHash: BytesLike;
    sourceAddressesRoot: BytesLike;
    receivingAddressHash: BytesLike;
    intendedReceivingAddressHash: BytesLike;
    spentAmount: BigNumberish;
    intendedSpentAmount: BigNumberish;
    receivedAmount: BigNumberish;
    intendedReceivedAmount: BigNumberish;
    standardPaymentReference: BytesLike;
    oneToOne: boolean;
    status: BigNumberish;
  };

  export type ResponseBodyStructOutput = [
    blockNumber: bigint,
    blockTimestamp: bigint,
    sourceAddressHash: string,
    sourceAddressesRoot: string,
    receivingAddressHash: string,
    intendedReceivingAddressHash: string,
    spentAmount: bigint,
    intendedSpentAmount: bigint,
    receivedAmount: bigint,
    intendedReceivedAmount: bigint,
    standardPaymentReference: string,
    oneToOne: boolean,
    status: bigint
  ] & {
    blockNumber: bigint;
    blockTimestamp: bigint;
    sourceAddressHash: string;
    sourceAddressesRoot: string;
    receivingAddressHash: string;
    intendedReceivingAddressHash: string;
    spentAmount: bigint;
    intendedSpentAmount: bigint;
    receivedAmount: bigint;
    intendedReceivedAmount: bigint;
    standardPaymentReference: string;
    oneToOne: boolean;
    status: bigint;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IPayment.RequestBodyStruct;
    responseBody: IPayment.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IPayment.RequestBodyStructOutput,
    responseBody: IPayment.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IPayment.RequestBodyStructOutput;
    responseBody: IPayment.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IPayment.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IPayment.ResponseStructOutput
  ] & { merkleProof: string[]; data: IPayment.ResponseStructOutput };
}

export declare namespace IReferencedPaymentNonexistence {
  export type RequestBodyStruct = {
    minimalBlockNumber: BigNumberish;
    deadlineBlockNumber: BigNumberish;
    deadlineTimestamp: BigNumberish;
    destinationAddressHash: BytesLike;
    amount: BigNumberish;
    standardPaymentReference: BytesLike;
    checkSourceAddresses: boolean;
    sourceAddressesRoot: BytesLike;
  };

  export type RequestBodyStructOutput = [
    minimalBlockNumber: bigint,
    deadlineBlockNumber: bigint,
    deadlineTimestamp: bigint,
    destinationAddressHash: string,
    amount: bigint,
    standardPaymentReference: string,
    checkSourceAddresses: boolean,
    sourceAddressesRoot: string
  ] & {
    minimalBlockNumber: bigint;
    deadlineBlockNumber: bigint;
    deadlineTimestamp: bigint;
    destinationAddressHash: string;
    amount: bigint;
    standardPaymentReference: string;
    checkSourceAddresses: boolean;
    sourceAddressesRoot: string;
  };

  export type ResponseBodyStruct = {
    minimalBlockTimestamp: BigNumberish;
    firstOverflowBlockNumber: BigNumberish;
    firstOverflowBlockTimestamp: BigNumberish;
  };

  export type ResponseBodyStructOutput = [
    minimalBlockTimestamp: bigint,
    firstOverflowBlockNumber: bigint,
    firstOverflowBlockTimestamp: bigint
  ] & {
    minimalBlockTimestamp: bigint;
    firstOverflowBlockNumber: bigint;
    firstOverflowBlockTimestamp: bigint;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IReferencedPaymentNonexistence.RequestBodyStruct;
    responseBody: IReferencedPaymentNonexistence.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IReferencedPaymentNonexistence.RequestBodyStructOutput,
    responseBody: IReferencedPaymentNonexistence.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IReferencedPaymentNonexistence.RequestBodyStructOutput;
    responseBody: IReferencedPaymentNonexistence.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IReferencedPaymentNonexistence.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IReferencedPaymentNonexistence.ResponseStructOutput
  ] & {
    merkleProof: string[];
    data: IReferencedPaymentNonexistence.ResponseStructOutput;
  };
}

export interface IFdcVerificationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "verifyAddressValidity"
      | "verifyBalanceDecreasingTransaction"
      | "verifyConfirmedBlockHeightExists"
      | "verifyEVMTransaction"
      | "verifyPayment"
      | "verifyReferencedPaymentNonexistence"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyAddressValidity",
    values: [IAddressValidity.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBalanceDecreasingTransaction",
    values: [IBalanceDecreasingTransaction.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyConfirmedBlockHeightExists",
    values: [IConfirmedBlockHeightExists.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyEVMTransaction",
    values: [IEVMTransaction.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPayment",
    values: [IPayment.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyReferencedPaymentNonexistence",
    values: [IReferencedPaymentNonexistence.ProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyAddressValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBalanceDecreasingTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyConfirmedBlockHeightExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyEVMTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyReferencedPaymentNonexistence",
    data: BytesLike
  ): Result;
}

export interface IFdcVerification extends BaseContract {
  connect(runner?: ContractRunner | null): IFdcVerification;
  waitForDeployment(): Promise<this>;

  interface: IFdcVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyAddressValidity: TypedContractMethod<
    [_proof: IAddressValidity.ProofStruct],
    [boolean],
    "view"
  >;

  verifyBalanceDecreasingTransaction: TypedContractMethod<
    [_proof: IBalanceDecreasingTransaction.ProofStruct],
    [boolean],
    "view"
  >;

  verifyConfirmedBlockHeightExists: TypedContractMethod<
    [_proof: IConfirmedBlockHeightExists.ProofStruct],
    [boolean],
    "view"
  >;

  verifyEVMTransaction: TypedContractMethod<
    [_proof: IEVMTransaction.ProofStruct],
    [boolean],
    "view"
  >;

  verifyPayment: TypedContractMethod<
    [_proof: IPayment.ProofStruct],
    [boolean],
    "view"
  >;

  verifyReferencedPaymentNonexistence: TypedContractMethod<
    [_proof: IReferencedPaymentNonexistence.ProofStruct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyAddressValidity"
  ): TypedContractMethod<
    [_proof: IAddressValidity.ProofStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyBalanceDecreasingTransaction"
  ): TypedContractMethod<
    [_proof: IBalanceDecreasingTransaction.ProofStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyConfirmedBlockHeightExists"
  ): TypedContractMethod<
    [_proof: IConfirmedBlockHeightExists.ProofStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyEVMTransaction"
  ): TypedContractMethod<
    [_proof: IEVMTransaction.ProofStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyPayment"
  ): TypedContractMethod<[_proof: IPayment.ProofStruct], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyReferencedPaymentNonexistence"
  ): TypedContractMethod<
    [_proof: IReferencedPaymentNonexistence.ProofStruct],
    [boolean],
    "view"
  >;

  filters: {};
}
