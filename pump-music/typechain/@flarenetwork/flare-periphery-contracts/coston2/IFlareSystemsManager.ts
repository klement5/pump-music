/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IFlareSystemsManager {
  export type NumberOfWeightBasedClaimsStruct = {
    rewardManagerId: BigNumberish;
    noOfWeightBasedClaims: BigNumberish;
  };

  export type NumberOfWeightBasedClaimsStructOutput = [
    rewardManagerId: bigint,
    noOfWeightBasedClaims: bigint
  ] & { rewardManagerId: bigint; noOfWeightBasedClaims: bigint };

  export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

  export type SignatureStructOutput = [v: bigint, r: string, s: string] & {
    v: bigint;
    r: string;
    s: string;
  };
}

export interface IFlareSystemsManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "firstRewardEpochStartTs"
      | "firstVotingRoundStartTs"
      | "getCurrentRewardEpoch"
      | "getCurrentRewardEpochId"
      | "getCurrentVotingEpochId"
      | "getSeed"
      | "getStartVotingRoundId"
      | "getThreshold"
      | "getVotePowerBlock"
      | "getVoterRegistrationData"
      | "isVoterRegistrationEnabled"
      | "rewardEpochDurationSeconds"
      | "signNewSigningPolicy"
      | "signRewards"
      | "signUptimeVote"
      | "submitUptimeVote"
      | "votingEpochDurationSeconds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RandomAcquisitionStarted"
      | "RewardEpochStarted"
      | "RewardsSigned"
      | "SignUptimeVoteEnabled"
      | "SigningPolicySigned"
      | "UptimeVoteSigned"
      | "UptimeVoteSubmitted"
      | "VotePowerBlockSelected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "firstRewardEpochStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstVotingRoundStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotingEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSeed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartVotingRoundId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePowerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterRegistrationData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoterRegistrationEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signNewSigningPolicy",
    values: [BigNumberish, BytesLike, IFlareSystemsManager.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "signRewards",
    values: [
      BigNumberish,
      IFlareSystemsManager.NumberOfWeightBasedClaimsStruct[],
      BytesLike,
      IFlareSystemsManager.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signUptimeVote",
    values: [BigNumberish, BytesLike, IFlareSystemsManager.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "submitUptimeVote",
    values: [BigNumberish, BytesLike[], IFlareSystemsManager.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEpochDurationSeconds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "firstRewardEpochStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstVotingRoundStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotingEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStartVotingRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterRegistrationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoterRegistrationEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signNewSigningPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signUptimeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitUptimeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEpochDurationSeconds",
    data: BytesLike
  ): Result;
}

export namespace RandomAcquisitionStartedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [rewardEpochId: bigint, timestamp: bigint];
  export interface OutputObject {
    rewardEpochId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardEpochStartedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    startVotingRoundId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    startVotingRoundId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    startVotingRoundId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsSignedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    signingPolicyAddress: AddressLike,
    voter: AddressLike,
    rewardsHash: BytesLike,
    noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStruct[],
    timestamp: BigNumberish,
    thresholdReached: boolean
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    signingPolicyAddress: string,
    voter: string,
    rewardsHash: string,
    noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStructOutput[],
    timestamp: bigint,
    thresholdReached: boolean
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    signingPolicyAddress: string;
    voter: string;
    rewardsHash: string;
    noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStructOutput[];
    timestamp: bigint;
    thresholdReached: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignUptimeVoteEnabledEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [rewardEpochId: bigint, timestamp: bigint];
  export interface OutputObject {
    rewardEpochId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SigningPolicySignedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    signingPolicyAddress: AddressLike,
    voter: AddressLike,
    timestamp: BigNumberish,
    thresholdReached: boolean
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    signingPolicyAddress: string,
    voter: string,
    timestamp: bigint,
    thresholdReached: boolean
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    signingPolicyAddress: string;
    voter: string;
    timestamp: bigint;
    thresholdReached: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UptimeVoteSignedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    signingPolicyAddress: AddressLike,
    voter: AddressLike,
    uptimeVoteHash: BytesLike,
    timestamp: BigNumberish,
    thresholdReached: boolean
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    signingPolicyAddress: string,
    voter: string,
    uptimeVoteHash: string,
    timestamp: bigint,
    thresholdReached: boolean
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    signingPolicyAddress: string;
    voter: string;
    uptimeVoteHash: string;
    timestamp: bigint;
    thresholdReached: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UptimeVoteSubmittedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    signingPolicyAddress: AddressLike,
    voter: AddressLike,
    nodeIds: BytesLike[],
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    signingPolicyAddress: string,
    voter: string,
    nodeIds: string[],
    timestamp: bigint
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    signingPolicyAddress: string;
    voter: string;
    nodeIds: string[];
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotePowerBlockSelectedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    votePowerBlock: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    votePowerBlock: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    votePowerBlock: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFlareSystemsManager extends BaseContract {
  connect(runner?: ContractRunner | null): IFlareSystemsManager;
  waitForDeployment(): Promise<this>;

  interface: IFlareSystemsManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  firstRewardEpochStartTs: TypedContractMethod<[], [bigint], "view">;

  firstVotingRoundStartTs: TypedContractMethod<[], [bigint], "view">;

  getCurrentRewardEpoch: TypedContractMethod<[], [bigint], "view">;

  getCurrentRewardEpochId: TypedContractMethod<[], [bigint], "view">;

  getCurrentVotingEpochId: TypedContractMethod<[], [bigint], "view">;

  getSeed: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  getStartVotingRoundId: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  getThreshold: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  getVotePowerBlock: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  getVoterRegistrationData: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [[bigint, boolean] & { _votePowerBlock: bigint; _enabled: boolean }],
    "view"
  >;

  isVoterRegistrationEnabled: TypedContractMethod<[], [boolean], "view">;

  rewardEpochDurationSeconds: TypedContractMethod<[], [bigint], "view">;

  signNewSigningPolicy: TypedContractMethod<
    [
      _rewardEpochId: BigNumberish,
      _newSigningPolicyHash: BytesLike,
      _signature: IFlareSystemsManager.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  signRewards: TypedContractMethod<
    [
      _rewardEpochId: BigNumberish,
      _noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStruct[],
      _rewardsHash: BytesLike,
      _signature: IFlareSystemsManager.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  signUptimeVote: TypedContractMethod<
    [
      _rewardEpochId: BigNumberish,
      _uptimeVoteHash: BytesLike,
      _signature: IFlareSystemsManager.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  submitUptimeVote: TypedContractMethod<
    [
      _rewardEpochId: BigNumberish,
      _nodeIds: BytesLike[],
      _signature: IFlareSystemsManager.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  votingEpochDurationSeconds: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "firstRewardEpochStartTs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "firstVotingRoundStartTs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRewardEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRewardEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentVotingEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSeed"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStartVotingRoundId"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getThreshold"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVotePowerBlock"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoterRegistrationData"
  ): TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [[bigint, boolean] & { _votePowerBlock: bigint; _enabled: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVoterRegistrationEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rewardEpochDurationSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "signNewSigningPolicy"
  ): TypedContractMethod<
    [
      _rewardEpochId: BigNumberish,
      _newSigningPolicyHash: BytesLike,
      _signature: IFlareSystemsManager.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signRewards"
  ): TypedContractMethod<
    [
      _rewardEpochId: BigNumberish,
      _noOfWeightBasedClaims: IFlareSystemsManager.NumberOfWeightBasedClaimsStruct[],
      _rewardsHash: BytesLike,
      _signature: IFlareSystemsManager.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "signUptimeVote"
  ): TypedContractMethod<
    [
      _rewardEpochId: BigNumberish,
      _uptimeVoteHash: BytesLike,
      _signature: IFlareSystemsManager.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitUptimeVote"
  ): TypedContractMethod<
    [
      _rewardEpochId: BigNumberish,
      _nodeIds: BytesLike[],
      _signature: IFlareSystemsManager.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingEpochDurationSeconds"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "RandomAcquisitionStarted"
  ): TypedContractEvent<
    RandomAcquisitionStartedEvent.InputTuple,
    RandomAcquisitionStartedEvent.OutputTuple,
    RandomAcquisitionStartedEvent.OutputObject
  >;
  getEvent(
    key: "RewardEpochStarted"
  ): TypedContractEvent<
    RewardEpochStartedEvent.InputTuple,
    RewardEpochStartedEvent.OutputTuple,
    RewardEpochStartedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsSigned"
  ): TypedContractEvent<
    RewardsSignedEvent.InputTuple,
    RewardsSignedEvent.OutputTuple,
    RewardsSignedEvent.OutputObject
  >;
  getEvent(
    key: "SignUptimeVoteEnabled"
  ): TypedContractEvent<
    SignUptimeVoteEnabledEvent.InputTuple,
    SignUptimeVoteEnabledEvent.OutputTuple,
    SignUptimeVoteEnabledEvent.OutputObject
  >;
  getEvent(
    key: "SigningPolicySigned"
  ): TypedContractEvent<
    SigningPolicySignedEvent.InputTuple,
    SigningPolicySignedEvent.OutputTuple,
    SigningPolicySignedEvent.OutputObject
  >;
  getEvent(
    key: "UptimeVoteSigned"
  ): TypedContractEvent<
    UptimeVoteSignedEvent.InputTuple,
    UptimeVoteSignedEvent.OutputTuple,
    UptimeVoteSignedEvent.OutputObject
  >;
  getEvent(
    key: "UptimeVoteSubmitted"
  ): TypedContractEvent<
    UptimeVoteSubmittedEvent.InputTuple,
    UptimeVoteSubmittedEvent.OutputTuple,
    UptimeVoteSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "VotePowerBlockSelected"
  ): TypedContractEvent<
    VotePowerBlockSelectedEvent.InputTuple,
    VotePowerBlockSelectedEvent.OutputTuple,
    VotePowerBlockSelectedEvent.OutputObject
  >;

  filters: {
    "RandomAcquisitionStarted(uint24,uint64)": TypedContractEvent<
      RandomAcquisitionStartedEvent.InputTuple,
      RandomAcquisitionStartedEvent.OutputTuple,
      RandomAcquisitionStartedEvent.OutputObject
    >;
    RandomAcquisitionStarted: TypedContractEvent<
      RandomAcquisitionStartedEvent.InputTuple,
      RandomAcquisitionStartedEvent.OutputTuple,
      RandomAcquisitionStartedEvent.OutputObject
    >;

    "RewardEpochStarted(uint24,uint32,uint64)": TypedContractEvent<
      RewardEpochStartedEvent.InputTuple,
      RewardEpochStartedEvent.OutputTuple,
      RewardEpochStartedEvent.OutputObject
    >;
    RewardEpochStarted: TypedContractEvent<
      RewardEpochStartedEvent.InputTuple,
      RewardEpochStartedEvent.OutputTuple,
      RewardEpochStartedEvent.OutputObject
    >;

    "RewardsSigned(uint24,address,address,bytes32,tuple[],uint64,bool)": TypedContractEvent<
      RewardsSignedEvent.InputTuple,
      RewardsSignedEvent.OutputTuple,
      RewardsSignedEvent.OutputObject
    >;
    RewardsSigned: TypedContractEvent<
      RewardsSignedEvent.InputTuple,
      RewardsSignedEvent.OutputTuple,
      RewardsSignedEvent.OutputObject
    >;

    "SignUptimeVoteEnabled(uint24,uint64)": TypedContractEvent<
      SignUptimeVoteEnabledEvent.InputTuple,
      SignUptimeVoteEnabledEvent.OutputTuple,
      SignUptimeVoteEnabledEvent.OutputObject
    >;
    SignUptimeVoteEnabled: TypedContractEvent<
      SignUptimeVoteEnabledEvent.InputTuple,
      SignUptimeVoteEnabledEvent.OutputTuple,
      SignUptimeVoteEnabledEvent.OutputObject
    >;

    "SigningPolicySigned(uint24,address,address,uint64,bool)": TypedContractEvent<
      SigningPolicySignedEvent.InputTuple,
      SigningPolicySignedEvent.OutputTuple,
      SigningPolicySignedEvent.OutputObject
    >;
    SigningPolicySigned: TypedContractEvent<
      SigningPolicySignedEvent.InputTuple,
      SigningPolicySignedEvent.OutputTuple,
      SigningPolicySignedEvent.OutputObject
    >;

    "UptimeVoteSigned(uint24,address,address,bytes32,uint64,bool)": TypedContractEvent<
      UptimeVoteSignedEvent.InputTuple,
      UptimeVoteSignedEvent.OutputTuple,
      UptimeVoteSignedEvent.OutputObject
    >;
    UptimeVoteSigned: TypedContractEvent<
      UptimeVoteSignedEvent.InputTuple,
      UptimeVoteSignedEvent.OutputTuple,
      UptimeVoteSignedEvent.OutputObject
    >;

    "UptimeVoteSubmitted(uint24,address,address,bytes20[],uint64)": TypedContractEvent<
      UptimeVoteSubmittedEvent.InputTuple,
      UptimeVoteSubmittedEvent.OutputTuple,
      UptimeVoteSubmittedEvent.OutputObject
    >;
    UptimeVoteSubmitted: TypedContractEvent<
      UptimeVoteSubmittedEvent.InputTuple,
      UptimeVoteSubmittedEvent.OutputTuple,
      UptimeVoteSubmittedEvent.OutputObject
    >;

    "VotePowerBlockSelected(uint24,uint64,uint64)": TypedContractEvent<
      VotePowerBlockSelectedEvent.InputTuple,
      VotePowerBlockSelectedEvent.OutputTuple,
      VotePowerBlockSelectedEvent.OutputObject
    >;
    VotePowerBlockSelected: TypedContractEvent<
      VotePowerBlockSelectedEvent.InputTuple,
      VotePowerBlockSelectedEvent.OutputTuple,
      VotePowerBlockSelectedEvent.OutputObject
    >;
  };
}
