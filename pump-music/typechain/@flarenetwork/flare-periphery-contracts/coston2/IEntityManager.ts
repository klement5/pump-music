/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IEntityManager {
  export type VoterAddressesStruct = {
    submitAddress: AddressLike;
    submitSignaturesAddress: AddressLike;
    signingPolicyAddress: AddressLike;
  };

  export type VoterAddressesStructOutput = [
    submitAddress: string,
    submitSignaturesAddress: string,
    signingPolicyAddress: string
  ] & {
    submitAddress: string;
    submitSignaturesAddress: string;
    signingPolicyAddress: string;
  };
}

export interface IEntityManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "confirmDelegationAddressRegistration"
      | "confirmSigningPolicyAddressRegistration"
      | "confirmSubmitAddressRegistration"
      | "confirmSubmitSignaturesAddressRegistration"
      | "getDelegationAddressOf"
      | "getDelegationAddressOfAt"
      | "getNodeIdsOf"
      | "getNodeIdsOfAt"
      | "getPublicKeyOf"
      | "getPublicKeyOfAt"
      | "getVoterAddresses"
      | "getVoterAddressesAt"
      | "getVoterForDelegationAddress"
      | "getVoterForNodeId"
      | "getVoterForPublicKey"
      | "getVoterForSigningPolicyAddress"
      | "getVoterForSubmitAddress"
      | "getVoterForSubmitSignaturesAddress"
      | "proposeDelegationAddress"
      | "proposeSigningPolicyAddress"
      | "proposeSubmitAddress"
      | "proposeSubmitSignaturesAddress"
      | "registerNodeId"
      | "registerPublicKey"
      | "unregisterNodeId"
      | "unregisterPublicKey"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DelegationAddressProposed"
      | "DelegationAddressRegistrationConfirmed"
      | "MaxNodeIdsPerEntitySet"
      | "NodeIdRegistered"
      | "NodeIdUnregistered"
      | "PublicKeyRegistered"
      | "PublicKeyUnregistered"
      | "SigningPolicyAddressProposed"
      | "SigningPolicyAddressRegistrationConfirmed"
      | "SubmitAddressProposed"
      | "SubmitAddressRegistrationConfirmed"
      | "SubmitSignaturesAddressProposed"
      | "SubmitSignaturesAddressRegistrationConfirmed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "confirmDelegationAddressRegistration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmSigningPolicyAddressRegistration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmSubmitAddressRegistration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmSubmitSignaturesAddressRegistration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationAddressOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationAddressOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeIdsOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeIdsOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKeyOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKeyOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterAddressesAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForDelegationAddress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForNodeId",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForPublicKey",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForSigningPolicyAddress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForSubmitAddress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterForSubmitSignaturesAddress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeDelegationAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSigningPolicyAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSubmitAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSubmitSignaturesAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNodeId",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPublicKey",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterNodeId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterPublicKey",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmDelegationAddressRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmSigningPolicyAddressRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmSubmitAddressRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmSubmitSignaturesAddressRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationAddressOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationAddressOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeIdsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeIdsOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKeyOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKeyOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterAddressesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForDelegationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForNodeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForSigningPolicyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForSubmitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterForSubmitSignaturesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeDelegationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSigningPolicyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSubmitAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSubmitSignaturesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNodeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterNodeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterPublicKey",
    data: BytesLike
  ): Result;
}

export namespace DelegationAddressProposedEvent {
  export type InputTuple = [voter: AddressLike, delegationAddress: AddressLike];
  export type OutputTuple = [voter: string, delegationAddress: string];
  export interface OutputObject {
    voter: string;
    delegationAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegationAddressRegistrationConfirmedEvent {
  export type InputTuple = [voter: AddressLike, delegationAddress: AddressLike];
  export type OutputTuple = [voter: string, delegationAddress: string];
  export interface OutputObject {
    voter: string;
    delegationAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxNodeIdsPerEntitySetEvent {
  export type InputTuple = [maxNodeIdsPerEntity: BigNumberish];
  export type OutputTuple = [maxNodeIdsPerEntity: bigint];
  export interface OutputObject {
    maxNodeIdsPerEntity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeIdRegisteredEvent {
  export type InputTuple = [voter: AddressLike, nodeId: BytesLike];
  export type OutputTuple = [voter: string, nodeId: string];
  export interface OutputObject {
    voter: string;
    nodeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeIdUnregisteredEvent {
  export type InputTuple = [voter: AddressLike, nodeId: BytesLike];
  export type OutputTuple = [voter: string, nodeId: string];
  export interface OutputObject {
    voter: string;
    nodeId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicKeyRegisteredEvent {
  export type InputTuple = [
    voter: AddressLike,
    part1: BytesLike,
    part2: BytesLike
  ];
  export type OutputTuple = [voter: string, part1: string, part2: string];
  export interface OutputObject {
    voter: string;
    part1: string;
    part2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicKeyUnregisteredEvent {
  export type InputTuple = [
    voter: AddressLike,
    part1: BytesLike,
    part2: BytesLike
  ];
  export type OutputTuple = [voter: string, part1: string, part2: string];
  export interface OutputObject {
    voter: string;
    part1: string;
    part2: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SigningPolicyAddressProposedEvent {
  export type InputTuple = [
    voter: AddressLike,
    signingPolicyAddress: AddressLike
  ];
  export type OutputTuple = [voter: string, signingPolicyAddress: string];
  export interface OutputObject {
    voter: string;
    signingPolicyAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SigningPolicyAddressRegistrationConfirmedEvent {
  export type InputTuple = [
    voter: AddressLike,
    signingPolicyAddress: AddressLike
  ];
  export type OutputTuple = [voter: string, signingPolicyAddress: string];
  export interface OutputObject {
    voter: string;
    signingPolicyAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitAddressProposedEvent {
  export type InputTuple = [voter: AddressLike, submitAddress: AddressLike];
  export type OutputTuple = [voter: string, submitAddress: string];
  export interface OutputObject {
    voter: string;
    submitAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitAddressRegistrationConfirmedEvent {
  export type InputTuple = [voter: AddressLike, submitAddress: AddressLike];
  export type OutputTuple = [voter: string, submitAddress: string];
  export interface OutputObject {
    voter: string;
    submitAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitSignaturesAddressProposedEvent {
  export type InputTuple = [
    voter: AddressLike,
    submitSignaturesAddress: AddressLike
  ];
  export type OutputTuple = [voter: string, submitSignaturesAddress: string];
  export interface OutputObject {
    voter: string;
    submitSignaturesAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitSignaturesAddressRegistrationConfirmedEvent {
  export type InputTuple = [
    voter: AddressLike,
    submitSignaturesAddress: AddressLike
  ];
  export type OutputTuple = [voter: string, submitSignaturesAddress: string];
  export interface OutputObject {
    voter: string;
    submitSignaturesAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IEntityManager extends BaseContract {
  connect(runner?: ContractRunner | null): IEntityManager;
  waitForDeployment(): Promise<this>;

  interface: IEntityManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  confirmDelegationAddressRegistration: TypedContractMethod<
    [_voter: AddressLike],
    [void],
    "nonpayable"
  >;

  confirmSigningPolicyAddressRegistration: TypedContractMethod<
    [_voter: AddressLike],
    [void],
    "nonpayable"
  >;

  confirmSubmitAddressRegistration: TypedContractMethod<
    [_voter: AddressLike],
    [void],
    "nonpayable"
  >;

  confirmSubmitSignaturesAddressRegistration: TypedContractMethod<
    [_voter: AddressLike],
    [void],
    "nonpayable"
  >;

  getDelegationAddressOf: TypedContractMethod<
    [_voter: AddressLike],
    [string],
    "view"
  >;

  getDelegationAddressOfAt: TypedContractMethod<
    [_voter: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;

  getNodeIdsOf: TypedContractMethod<[_voter: AddressLike], [string[]], "view">;

  getNodeIdsOfAt: TypedContractMethod<
    [_voter: AddressLike, _blockNumber: BigNumberish],
    [string[]],
    "view"
  >;

  getPublicKeyOf: TypedContractMethod<
    [_voter: AddressLike],
    [[string, string]],
    "view"
  >;

  getPublicKeyOfAt: TypedContractMethod<
    [_voter: AddressLike, _blockNumber: BigNumberish],
    [[string, string]],
    "view"
  >;

  getVoterAddresses: TypedContractMethod<
    [_voter: AddressLike],
    [IEntityManager.VoterAddressesStructOutput],
    "view"
  >;

  getVoterAddressesAt: TypedContractMethod<
    [_voter: AddressLike, _blockNumber: BigNumberish],
    [IEntityManager.VoterAddressesStructOutput],
    "view"
  >;

  getVoterForDelegationAddress: TypedContractMethod<
    [_delegationAddress: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;

  getVoterForNodeId: TypedContractMethod<
    [_nodeId: BytesLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;

  getVoterForPublicKey: TypedContractMethod<
    [_part1: BytesLike, _part2: BytesLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;

  getVoterForSigningPolicyAddress: TypedContractMethod<
    [_signingPolicyAddress: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;

  getVoterForSubmitAddress: TypedContractMethod<
    [_submitAddress: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;

  getVoterForSubmitSignaturesAddress: TypedContractMethod<
    [_submitSignaturesAddress: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;

  proposeDelegationAddress: TypedContractMethod<
    [_delegationAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  proposeSigningPolicyAddress: TypedContractMethod<
    [_signingPolicyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  proposeSubmitAddress: TypedContractMethod<
    [_submitAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  proposeSubmitSignaturesAddress: TypedContractMethod<
    [_submitSignaturesAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  registerNodeId: TypedContractMethod<
    [_nodeId: BytesLike, _certificateRaw: BytesLike, _signature: BytesLike],
    [void],
    "nonpayable"
  >;

  registerPublicKey: TypedContractMethod<
    [_part1: BytesLike, _part2: BytesLike, _verificationData: BytesLike],
    [void],
    "nonpayable"
  >;

  unregisterNodeId: TypedContractMethod<
    [_nodeId: BytesLike],
    [void],
    "nonpayable"
  >;

  unregisterPublicKey: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "confirmDelegationAddressRegistration"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmSigningPolicyAddressRegistration"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmSubmitAddressRegistration"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmSubmitSignaturesAddressRegistration"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDelegationAddressOf"
  ): TypedContractMethod<[_voter: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDelegationAddressOfAt"
  ): TypedContractMethod<
    [_voter: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNodeIdsOf"
  ): TypedContractMethod<[_voter: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getNodeIdsOfAt"
  ): TypedContractMethod<
    [_voter: AddressLike, _blockNumber: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPublicKeyOf"
  ): TypedContractMethod<[_voter: AddressLike], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "getPublicKeyOfAt"
  ): TypedContractMethod<
    [_voter: AddressLike, _blockNumber: BigNumberish],
    [[string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterAddresses"
  ): TypedContractMethod<
    [_voter: AddressLike],
    [IEntityManager.VoterAddressesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterAddressesAt"
  ): TypedContractMethod<
    [_voter: AddressLike, _blockNumber: BigNumberish],
    [IEntityManager.VoterAddressesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterForDelegationAddress"
  ): TypedContractMethod<
    [_delegationAddress: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterForNodeId"
  ): TypedContractMethod<
    [_nodeId: BytesLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterForPublicKey"
  ): TypedContractMethod<
    [_part1: BytesLike, _part2: BytesLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterForSigningPolicyAddress"
  ): TypedContractMethod<
    [_signingPolicyAddress: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterForSubmitAddress"
  ): TypedContractMethod<
    [_submitAddress: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterForSubmitSignaturesAddress"
  ): TypedContractMethod<
    [_submitSignaturesAddress: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposeDelegationAddress"
  ): TypedContractMethod<
    [_delegationAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeSigningPolicyAddress"
  ): TypedContractMethod<
    [_signingPolicyAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeSubmitAddress"
  ): TypedContractMethod<[_submitAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proposeSubmitSignaturesAddress"
  ): TypedContractMethod<
    [_submitSignaturesAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerNodeId"
  ): TypedContractMethod<
    [_nodeId: BytesLike, _certificateRaw: BytesLike, _signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerPublicKey"
  ): TypedContractMethod<
    [_part1: BytesLike, _part2: BytesLike, _verificationData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unregisterNodeId"
  ): TypedContractMethod<[_nodeId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterPublicKey"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DelegationAddressProposed"
  ): TypedContractEvent<
    DelegationAddressProposedEvent.InputTuple,
    DelegationAddressProposedEvent.OutputTuple,
    DelegationAddressProposedEvent.OutputObject
  >;
  getEvent(
    key: "DelegationAddressRegistrationConfirmed"
  ): TypedContractEvent<
    DelegationAddressRegistrationConfirmedEvent.InputTuple,
    DelegationAddressRegistrationConfirmedEvent.OutputTuple,
    DelegationAddressRegistrationConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "MaxNodeIdsPerEntitySet"
  ): TypedContractEvent<
    MaxNodeIdsPerEntitySetEvent.InputTuple,
    MaxNodeIdsPerEntitySetEvent.OutputTuple,
    MaxNodeIdsPerEntitySetEvent.OutputObject
  >;
  getEvent(
    key: "NodeIdRegistered"
  ): TypedContractEvent<
    NodeIdRegisteredEvent.InputTuple,
    NodeIdRegisteredEvent.OutputTuple,
    NodeIdRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "NodeIdUnregistered"
  ): TypedContractEvent<
    NodeIdUnregisteredEvent.InputTuple,
    NodeIdUnregisteredEvent.OutputTuple,
    NodeIdUnregisteredEvent.OutputObject
  >;
  getEvent(
    key: "PublicKeyRegistered"
  ): TypedContractEvent<
    PublicKeyRegisteredEvent.InputTuple,
    PublicKeyRegisteredEvent.OutputTuple,
    PublicKeyRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "PublicKeyUnregistered"
  ): TypedContractEvent<
    PublicKeyUnregisteredEvent.InputTuple,
    PublicKeyUnregisteredEvent.OutputTuple,
    PublicKeyUnregisteredEvent.OutputObject
  >;
  getEvent(
    key: "SigningPolicyAddressProposed"
  ): TypedContractEvent<
    SigningPolicyAddressProposedEvent.InputTuple,
    SigningPolicyAddressProposedEvent.OutputTuple,
    SigningPolicyAddressProposedEvent.OutputObject
  >;
  getEvent(
    key: "SigningPolicyAddressRegistrationConfirmed"
  ): TypedContractEvent<
    SigningPolicyAddressRegistrationConfirmedEvent.InputTuple,
    SigningPolicyAddressRegistrationConfirmedEvent.OutputTuple,
    SigningPolicyAddressRegistrationConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "SubmitAddressProposed"
  ): TypedContractEvent<
    SubmitAddressProposedEvent.InputTuple,
    SubmitAddressProposedEvent.OutputTuple,
    SubmitAddressProposedEvent.OutputObject
  >;
  getEvent(
    key: "SubmitAddressRegistrationConfirmed"
  ): TypedContractEvent<
    SubmitAddressRegistrationConfirmedEvent.InputTuple,
    SubmitAddressRegistrationConfirmedEvent.OutputTuple,
    SubmitAddressRegistrationConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "SubmitSignaturesAddressProposed"
  ): TypedContractEvent<
    SubmitSignaturesAddressProposedEvent.InputTuple,
    SubmitSignaturesAddressProposedEvent.OutputTuple,
    SubmitSignaturesAddressProposedEvent.OutputObject
  >;
  getEvent(
    key: "SubmitSignaturesAddressRegistrationConfirmed"
  ): TypedContractEvent<
    SubmitSignaturesAddressRegistrationConfirmedEvent.InputTuple,
    SubmitSignaturesAddressRegistrationConfirmedEvent.OutputTuple,
    SubmitSignaturesAddressRegistrationConfirmedEvent.OutputObject
  >;

  filters: {
    "DelegationAddressProposed(address,address)": TypedContractEvent<
      DelegationAddressProposedEvent.InputTuple,
      DelegationAddressProposedEvent.OutputTuple,
      DelegationAddressProposedEvent.OutputObject
    >;
    DelegationAddressProposed: TypedContractEvent<
      DelegationAddressProposedEvent.InputTuple,
      DelegationAddressProposedEvent.OutputTuple,
      DelegationAddressProposedEvent.OutputObject
    >;

    "DelegationAddressRegistrationConfirmed(address,address)": TypedContractEvent<
      DelegationAddressRegistrationConfirmedEvent.InputTuple,
      DelegationAddressRegistrationConfirmedEvent.OutputTuple,
      DelegationAddressRegistrationConfirmedEvent.OutputObject
    >;
    DelegationAddressRegistrationConfirmed: TypedContractEvent<
      DelegationAddressRegistrationConfirmedEvent.InputTuple,
      DelegationAddressRegistrationConfirmedEvent.OutputTuple,
      DelegationAddressRegistrationConfirmedEvent.OutputObject
    >;

    "MaxNodeIdsPerEntitySet(uint256)": TypedContractEvent<
      MaxNodeIdsPerEntitySetEvent.InputTuple,
      MaxNodeIdsPerEntitySetEvent.OutputTuple,
      MaxNodeIdsPerEntitySetEvent.OutputObject
    >;
    MaxNodeIdsPerEntitySet: TypedContractEvent<
      MaxNodeIdsPerEntitySetEvent.InputTuple,
      MaxNodeIdsPerEntitySetEvent.OutputTuple,
      MaxNodeIdsPerEntitySetEvent.OutputObject
    >;

    "NodeIdRegistered(address,bytes20)": TypedContractEvent<
      NodeIdRegisteredEvent.InputTuple,
      NodeIdRegisteredEvent.OutputTuple,
      NodeIdRegisteredEvent.OutputObject
    >;
    NodeIdRegistered: TypedContractEvent<
      NodeIdRegisteredEvent.InputTuple,
      NodeIdRegisteredEvent.OutputTuple,
      NodeIdRegisteredEvent.OutputObject
    >;

    "NodeIdUnregistered(address,bytes20)": TypedContractEvent<
      NodeIdUnregisteredEvent.InputTuple,
      NodeIdUnregisteredEvent.OutputTuple,
      NodeIdUnregisteredEvent.OutputObject
    >;
    NodeIdUnregistered: TypedContractEvent<
      NodeIdUnregisteredEvent.InputTuple,
      NodeIdUnregisteredEvent.OutputTuple,
      NodeIdUnregisteredEvent.OutputObject
    >;

    "PublicKeyRegistered(address,bytes32,bytes32)": TypedContractEvent<
      PublicKeyRegisteredEvent.InputTuple,
      PublicKeyRegisteredEvent.OutputTuple,
      PublicKeyRegisteredEvent.OutputObject
    >;
    PublicKeyRegistered: TypedContractEvent<
      PublicKeyRegisteredEvent.InputTuple,
      PublicKeyRegisteredEvent.OutputTuple,
      PublicKeyRegisteredEvent.OutputObject
    >;

    "PublicKeyUnregistered(address,bytes32,bytes32)": TypedContractEvent<
      PublicKeyUnregisteredEvent.InputTuple,
      PublicKeyUnregisteredEvent.OutputTuple,
      PublicKeyUnregisteredEvent.OutputObject
    >;
    PublicKeyUnregistered: TypedContractEvent<
      PublicKeyUnregisteredEvent.InputTuple,
      PublicKeyUnregisteredEvent.OutputTuple,
      PublicKeyUnregisteredEvent.OutputObject
    >;

    "SigningPolicyAddressProposed(address,address)": TypedContractEvent<
      SigningPolicyAddressProposedEvent.InputTuple,
      SigningPolicyAddressProposedEvent.OutputTuple,
      SigningPolicyAddressProposedEvent.OutputObject
    >;
    SigningPolicyAddressProposed: TypedContractEvent<
      SigningPolicyAddressProposedEvent.InputTuple,
      SigningPolicyAddressProposedEvent.OutputTuple,
      SigningPolicyAddressProposedEvent.OutputObject
    >;

    "SigningPolicyAddressRegistrationConfirmed(address,address)": TypedContractEvent<
      SigningPolicyAddressRegistrationConfirmedEvent.InputTuple,
      SigningPolicyAddressRegistrationConfirmedEvent.OutputTuple,
      SigningPolicyAddressRegistrationConfirmedEvent.OutputObject
    >;
    SigningPolicyAddressRegistrationConfirmed: TypedContractEvent<
      SigningPolicyAddressRegistrationConfirmedEvent.InputTuple,
      SigningPolicyAddressRegistrationConfirmedEvent.OutputTuple,
      SigningPolicyAddressRegistrationConfirmedEvent.OutputObject
    >;

    "SubmitAddressProposed(address,address)": TypedContractEvent<
      SubmitAddressProposedEvent.InputTuple,
      SubmitAddressProposedEvent.OutputTuple,
      SubmitAddressProposedEvent.OutputObject
    >;
    SubmitAddressProposed: TypedContractEvent<
      SubmitAddressProposedEvent.InputTuple,
      SubmitAddressProposedEvent.OutputTuple,
      SubmitAddressProposedEvent.OutputObject
    >;

    "SubmitAddressRegistrationConfirmed(address,address)": TypedContractEvent<
      SubmitAddressRegistrationConfirmedEvent.InputTuple,
      SubmitAddressRegistrationConfirmedEvent.OutputTuple,
      SubmitAddressRegistrationConfirmedEvent.OutputObject
    >;
    SubmitAddressRegistrationConfirmed: TypedContractEvent<
      SubmitAddressRegistrationConfirmedEvent.InputTuple,
      SubmitAddressRegistrationConfirmedEvent.OutputTuple,
      SubmitAddressRegistrationConfirmedEvent.OutputObject
    >;

    "SubmitSignaturesAddressProposed(address,address)": TypedContractEvent<
      SubmitSignaturesAddressProposedEvent.InputTuple,
      SubmitSignaturesAddressProposedEvent.OutputTuple,
      SubmitSignaturesAddressProposedEvent.OutputObject
    >;
    SubmitSignaturesAddressProposed: TypedContractEvent<
      SubmitSignaturesAddressProposedEvent.InputTuple,
      SubmitSignaturesAddressProposedEvent.OutputTuple,
      SubmitSignaturesAddressProposedEvent.OutputObject
    >;

    "SubmitSignaturesAddressRegistrationConfirmed(address,address)": TypedContractEvent<
      SubmitSignaturesAddressRegistrationConfirmedEvent.InputTuple,
      SubmitSignaturesAddressRegistrationConfirmedEvent.OutputTuple,
      SubmitSignaturesAddressRegistrationConfirmedEvent.OutputObject
    >;
    SubmitSignaturesAddressRegistrationConfirmed: TypedContractEvent<
      SubmitSignaturesAddressRegistrationConfirmedEvent.InputTuple,
      SubmitSignaturesAddressRegistrationConfirmedEvent.OutputTuple,
      SubmitSignaturesAddressRegistrationConfirmedEvent.OutputObject
    >;
  };
}
