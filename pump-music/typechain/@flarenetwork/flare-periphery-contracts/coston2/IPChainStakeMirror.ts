/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPChainStakeMirrorVerifier {
  export type PChainStakeStruct = {
    txId: BytesLike;
    stakingType: BigNumberish;
    inputAddress: BytesLike;
    nodeId: BytesLike;
    startTime: BigNumberish;
    endTime: BigNumberish;
    weight: BigNumberish;
  };

  export type PChainStakeStructOutput = [
    txId: string,
    stakingType: bigint,
    inputAddress: string,
    nodeId: string,
    startTime: bigint,
    endTime: bigint,
    weight: bigint
  ] & {
    txId: string;
    stakingType: bigint;
    inputAddress: string;
    nodeId: string;
    startTime: bigint;
    endTime: bigint;
    weight: bigint;
  };
}

export interface IPChainStakeMirrorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "balanceOfAt"
      | "batchVotePowerOfAt"
      | "isActiveStakeMirrored"
      | "mirrorStake"
      | "stakesOf"
      | "stakesOfAt"
      | "totalSupply"
      | "totalSupplyAt"
      | "totalVotePower"
      | "totalVotePowerAt"
      | "totalVotePowerAtCached"
      | "votePowerFromTo"
      | "votePowerFromToAt"
      | "votePowerOf"
      | "votePowerOfAt"
      | "votePowerOfAtCached"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MaxUpdatesPerBlockSet"
      | "StakeConfirmed"
      | "StakeEnded"
      | "StakeRevoked"
      | "VotePowerCacheCreated"
      | "VotePowerChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchVotePowerOfAt",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveStakeMirrored",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorStake",
    values: [IPChainStakeMirrorVerifier.PChainStakeStruct, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAtCached",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromTo",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromToAt",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOf",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAt",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAtCached",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchVotePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveStakeMirrored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakesOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakesOfAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAtCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromToAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAtCached",
    data: BytesLike
  ): Result;
}

export namespace MaxUpdatesPerBlockSetEvent {
  export type InputTuple = [maxUpdatesPerBlock: BigNumberish];
  export type OutputTuple = [maxUpdatesPerBlock: bigint];
  export interface OutputObject {
    maxUpdatesPerBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeConfirmedEvent {
  export type InputTuple = [
    owner: AddressLike,
    nodeId: BytesLike,
    txHash: BytesLike,
    amountWei: BigNumberish,
    pChainTxId: BytesLike
  ];
  export type OutputTuple = [
    owner: string,
    nodeId: string,
    txHash: string,
    amountWei: bigint,
    pChainTxId: string
  ];
  export interface OutputObject {
    owner: string;
    nodeId: string;
    txHash: string;
    amountWei: bigint;
    pChainTxId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEndedEvent {
  export type InputTuple = [
    owner: AddressLike,
    nodeId: BytesLike,
    txHash: BytesLike,
    amountWei: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    nodeId: string,
    txHash: string,
    amountWei: bigint
  ];
  export interface OutputObject {
    owner: string;
    nodeId: string;
    txHash: string;
    amountWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeRevokedEvent {
  export type InputTuple = [
    owner: AddressLike,
    nodeId: BytesLike,
    txHash: BytesLike,
    amountWei: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    nodeId: string,
    txHash: string,
    amountWei: bigint
  ];
  export interface OutputObject {
    owner: string;
    nodeId: string;
    txHash: string;
    amountWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotePowerCacheCreatedEvent {
  export type InputTuple = [nodeId: BytesLike, blockNumber: BigNumberish];
  export type OutputTuple = [nodeId: string, blockNumber: bigint];
  export interface OutputObject {
    nodeId: string;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotePowerChangedEvent {
  export type InputTuple = [
    owner: AddressLike,
    nodeId: BytesLike,
    priorVotePower: BigNumberish,
    newVotePower: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    nodeId: string,
    priorVotePower: bigint,
    newVotePower: bigint
  ];
  export interface OutputObject {
    owner: string;
    nodeId: string;
    priorVotePower: bigint;
    newVotePower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPChainStakeMirror extends BaseContract {
  connect(runner?: ContractRunner | null): IPChainStakeMirror;
  waitForDeployment(): Promise<this>;

  interface: IPChainStakeMirrorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<[_owner: AddressLike], [bigint], "view">;

  balanceOfAt: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  batchVotePowerOfAt: TypedContractMethod<
    [_nodeIds: BytesLike[], _blockNumber: BigNumberish],
    [bigint[]],
    "view"
  >;

  isActiveStakeMirrored: TypedContractMethod<
    [_txId: BytesLike, _inputAddress: BytesLike],
    [boolean],
    "view"
  >;

  mirrorStake: TypedContractMethod<
    [
      _stakeData: IPChainStakeMirrorVerifier.PChainStakeStruct,
      _merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  stakesOf: TypedContractMethod<
    [_owner: AddressLike],
    [[string[], bigint[]] & { _nodeIds: string[]; _amounts: bigint[] }],
    "view"
  >;

  stakesOfAt: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [[string[], bigint[]] & { _nodeIds: string[]; _amounts: bigint[] }],
    "view"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyAt: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  totalVotePower: TypedContractMethod<[], [bigint], "view">;

  totalVotePowerAt: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  totalVotePowerAtCached: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  votePowerFromTo: TypedContractMethod<
    [_owner: AddressLike, _nodeId: BytesLike],
    [bigint],
    "view"
  >;

  votePowerFromToAt: TypedContractMethod<
    [_owner: AddressLike, _nodeId: BytesLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  votePowerOf: TypedContractMethod<[_nodeId: BytesLike], [bigint], "view">;

  votePowerOfAt: TypedContractMethod<
    [_nodeId: BytesLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  votePowerOfAtCached: TypedContractMethod<
    [_owner: BytesLike, _blockNumber: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfAt"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchVotePowerOfAt"
  ): TypedContractMethod<
    [_nodeIds: BytesLike[], _blockNumber: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isActiveStakeMirrored"
  ): TypedContractMethod<
    [_txId: BytesLike, _inputAddress: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mirrorStake"
  ): TypedContractMethod<
    [
      _stakeData: IPChainStakeMirrorVerifier.PChainStakeStruct,
      _merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakesOf"
  ): TypedContractMethod<
    [_owner: AddressLike],
    [[string[], bigint[]] & { _nodeIds: string[]; _amounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakesOfAt"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [[string[], bigint[]] & { _nodeIds: string[]; _amounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotePower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotePowerAt"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotePowerAtCached"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "votePowerFromTo"
  ): TypedContractMethod<
    [_owner: AddressLike, _nodeId: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerFromToAt"
  ): TypedContractMethod<
    [_owner: AddressLike, _nodeId: BytesLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerOf"
  ): TypedContractMethod<[_nodeId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "votePowerOfAt"
  ): TypedContractMethod<
    [_nodeId: BytesLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerOfAtCached"
  ): TypedContractMethod<
    [_owner: BytesLike, _blockNumber: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "MaxUpdatesPerBlockSet"
  ): TypedContractEvent<
    MaxUpdatesPerBlockSetEvent.InputTuple,
    MaxUpdatesPerBlockSetEvent.OutputTuple,
    MaxUpdatesPerBlockSetEvent.OutputObject
  >;
  getEvent(
    key: "StakeConfirmed"
  ): TypedContractEvent<
    StakeConfirmedEvent.InputTuple,
    StakeConfirmedEvent.OutputTuple,
    StakeConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "StakeEnded"
  ): TypedContractEvent<
    StakeEndedEvent.InputTuple,
    StakeEndedEvent.OutputTuple,
    StakeEndedEvent.OutputObject
  >;
  getEvent(
    key: "StakeRevoked"
  ): TypedContractEvent<
    StakeRevokedEvent.InputTuple,
    StakeRevokedEvent.OutputTuple,
    StakeRevokedEvent.OutputObject
  >;
  getEvent(
    key: "VotePowerCacheCreated"
  ): TypedContractEvent<
    VotePowerCacheCreatedEvent.InputTuple,
    VotePowerCacheCreatedEvent.OutputTuple,
    VotePowerCacheCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VotePowerChanged"
  ): TypedContractEvent<
    VotePowerChangedEvent.InputTuple,
    VotePowerChangedEvent.OutputTuple,
    VotePowerChangedEvent.OutputObject
  >;

  filters: {
    "MaxUpdatesPerBlockSet(uint256)": TypedContractEvent<
      MaxUpdatesPerBlockSetEvent.InputTuple,
      MaxUpdatesPerBlockSetEvent.OutputTuple,
      MaxUpdatesPerBlockSetEvent.OutputObject
    >;
    MaxUpdatesPerBlockSet: TypedContractEvent<
      MaxUpdatesPerBlockSetEvent.InputTuple,
      MaxUpdatesPerBlockSetEvent.OutputTuple,
      MaxUpdatesPerBlockSetEvent.OutputObject
    >;

    "StakeConfirmed(address,bytes20,bytes32,uint256,bytes32)": TypedContractEvent<
      StakeConfirmedEvent.InputTuple,
      StakeConfirmedEvent.OutputTuple,
      StakeConfirmedEvent.OutputObject
    >;
    StakeConfirmed: TypedContractEvent<
      StakeConfirmedEvent.InputTuple,
      StakeConfirmedEvent.OutputTuple,
      StakeConfirmedEvent.OutputObject
    >;

    "StakeEnded(address,bytes20,bytes32,uint256)": TypedContractEvent<
      StakeEndedEvent.InputTuple,
      StakeEndedEvent.OutputTuple,
      StakeEndedEvent.OutputObject
    >;
    StakeEnded: TypedContractEvent<
      StakeEndedEvent.InputTuple,
      StakeEndedEvent.OutputTuple,
      StakeEndedEvent.OutputObject
    >;

    "StakeRevoked(address,bytes20,bytes32,uint256)": TypedContractEvent<
      StakeRevokedEvent.InputTuple,
      StakeRevokedEvent.OutputTuple,
      StakeRevokedEvent.OutputObject
    >;
    StakeRevoked: TypedContractEvent<
      StakeRevokedEvent.InputTuple,
      StakeRevokedEvent.OutputTuple,
      StakeRevokedEvent.OutputObject
    >;

    "VotePowerCacheCreated(bytes20,uint256)": TypedContractEvent<
      VotePowerCacheCreatedEvent.InputTuple,
      VotePowerCacheCreatedEvent.OutputTuple,
      VotePowerCacheCreatedEvent.OutputObject
    >;
    VotePowerCacheCreated: TypedContractEvent<
      VotePowerCacheCreatedEvent.InputTuple,
      VotePowerCacheCreatedEvent.OutputTuple,
      VotePowerCacheCreatedEvent.OutputObject
    >;

    "VotePowerChanged(address,bytes20,uint256,uint256)": TypedContractEvent<
      VotePowerChangedEvent.InputTuple,
      VotePowerChangedEvent.OutputTuple,
      VotePowerChangedEvent.OutputObject
    >;
    VotePowerChanged: TypedContractEvent<
      VotePowerChangedEvent.InputTuple,
      VotePowerChangedEvent.OutputTuple,
      VotePowerChangedEvent.OutputObject
    >;
  };
}
