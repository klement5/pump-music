/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IEVMTransaction {
  export type RequestBodyStruct = {
    transactionHash: BytesLike;
    requiredConfirmations: BigNumberish;
    provideInput: boolean;
    listEvents: boolean;
    logIndices: BigNumberish[];
  };

  export type RequestBodyStructOutput = [
    transactionHash: string,
    requiredConfirmations: bigint,
    provideInput: boolean,
    listEvents: boolean,
    logIndices: bigint[]
  ] & {
    transactionHash: string;
    requiredConfirmations: bigint;
    provideInput: boolean;
    listEvents: boolean;
    logIndices: bigint[];
  };

  export type EventStruct = {
    logIndex: BigNumberish;
    emitterAddress: AddressLike;
    topics: BytesLike[];
    data: BytesLike;
    removed: boolean;
  };

  export type EventStructOutput = [
    logIndex: bigint,
    emitterAddress: string,
    topics: string[],
    data: string,
    removed: boolean
  ] & {
    logIndex: bigint;
    emitterAddress: string;
    topics: string[];
    data: string;
    removed: boolean;
  };

  export type ResponseBodyStruct = {
    blockNumber: BigNumberish;
    timestamp: BigNumberish;
    sourceAddress: AddressLike;
    isDeployment: boolean;
    receivingAddress: AddressLike;
    value: BigNumberish;
    input: BytesLike;
    status: BigNumberish;
    events: IEVMTransaction.EventStruct[];
  };

  export type ResponseBodyStructOutput = [
    blockNumber: bigint,
    timestamp: bigint,
    sourceAddress: string,
    isDeployment: boolean,
    receivingAddress: string,
    value: bigint,
    input: string,
    status: bigint,
    events: IEVMTransaction.EventStructOutput[]
  ] & {
    blockNumber: bigint;
    timestamp: bigint;
    sourceAddress: string;
    isDeployment: boolean;
    receivingAddress: string;
    value: bigint;
    input: string;
    status: bigint;
    events: IEVMTransaction.EventStructOutput[];
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IEVMTransaction.RequestBodyStruct;
    responseBody: IEVMTransaction.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IEVMTransaction.RequestBodyStructOutput,
    responseBody: IEVMTransaction.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IEVMTransaction.RequestBodyStructOutput;
    responseBody: IEVMTransaction.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IEVMTransaction.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IEVMTransaction.ResponseStructOutput
  ] & { merkleProof: string[]; data: IEVMTransaction.ResponseStructOutput };
}

export interface IEVMTransactionVerificationInterface extends Interface {
  getFunction(nameOrSignature: "verifyEVMTransaction"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyEVMTransaction",
    values: [IEVMTransaction.ProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyEVMTransaction",
    data: BytesLike
  ): Result;
}

export interface IEVMTransactionVerification extends BaseContract {
  connect(runner?: ContractRunner | null): IEVMTransactionVerification;
  waitForDeployment(): Promise<this>;

  interface: IEVMTransactionVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyEVMTransaction: TypedContractMethod<
    [_proof: IEVMTransaction.ProofStruct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyEVMTransaction"
  ): TypedContractMethod<
    [_proof: IEVMTransaction.ProofStruct],
    [boolean],
    "view"
  >;

  filters: {};
}
