/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export interface IDelegationAccountInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "DelegateFtso"
      | "DelegateGovernance"
      | "ExecutorFeePaid"
      | "ExternalTokenTransferred"
      | "Initialize"
      | "RevokeFtso"
      | "UndelegateAllFtso"
      | "UndelegateGovernance"
      | "WithdrawToOwner"
  ): EventFragment;
}

export namespace DelegateFtsoEvent {
  export type InputTuple = [to: AddressLike, bips: BigNumberish];
  export type OutputTuple = [to: string, bips: bigint];
  export interface OutputObject {
    to: string;
    bips: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateGovernanceEvent {
  export type InputTuple = [to: AddressLike];
  export type OutputTuple = [to: string];
  export interface OutputObject {
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutorFeePaidEvent {
  export type InputTuple = [executor: AddressLike, amount: BigNumberish];
  export type OutputTuple = [executor: string, amount: bigint];
  export interface OutputObject {
    executor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExternalTokenTransferredEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializeEvent {
  export type InputTuple = [owner: AddressLike, manager: AddressLike];
  export type OutputTuple = [owner: string, manager: string];
  export interface OutputObject {
    owner: string;
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeFtsoEvent {
  export type InputTuple = [to: AddressLike, blockNumber: BigNumberish];
  export type OutputTuple = [to: string, blockNumber: bigint];
  export interface OutputObject {
    to: string;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UndelegateAllFtsoEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UndelegateGovernanceEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawToOwnerEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDelegationAccount extends BaseContract {
  connect(runner?: ContractRunner | null): IDelegationAccount;
  waitForDeployment(): Promise<this>;

  interface: IDelegationAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "DelegateFtso"
  ): TypedContractEvent<
    DelegateFtsoEvent.InputTuple,
    DelegateFtsoEvent.OutputTuple,
    DelegateFtsoEvent.OutputObject
  >;
  getEvent(
    key: "DelegateGovernance"
  ): TypedContractEvent<
    DelegateGovernanceEvent.InputTuple,
    DelegateGovernanceEvent.OutputTuple,
    DelegateGovernanceEvent.OutputObject
  >;
  getEvent(
    key: "ExecutorFeePaid"
  ): TypedContractEvent<
    ExecutorFeePaidEvent.InputTuple,
    ExecutorFeePaidEvent.OutputTuple,
    ExecutorFeePaidEvent.OutputObject
  >;
  getEvent(
    key: "ExternalTokenTransferred"
  ): TypedContractEvent<
    ExternalTokenTransferredEvent.InputTuple,
    ExternalTokenTransferredEvent.OutputTuple,
    ExternalTokenTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Initialize"
  ): TypedContractEvent<
    InitializeEvent.InputTuple,
    InitializeEvent.OutputTuple,
    InitializeEvent.OutputObject
  >;
  getEvent(
    key: "RevokeFtso"
  ): TypedContractEvent<
    RevokeFtsoEvent.InputTuple,
    RevokeFtsoEvent.OutputTuple,
    RevokeFtsoEvent.OutputObject
  >;
  getEvent(
    key: "UndelegateAllFtso"
  ): TypedContractEvent<
    UndelegateAllFtsoEvent.InputTuple,
    UndelegateAllFtsoEvent.OutputTuple,
    UndelegateAllFtsoEvent.OutputObject
  >;
  getEvent(
    key: "UndelegateGovernance"
  ): TypedContractEvent<
    UndelegateGovernanceEvent.InputTuple,
    UndelegateGovernanceEvent.OutputTuple,
    UndelegateGovernanceEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawToOwner"
  ): TypedContractEvent<
    WithdrawToOwnerEvent.InputTuple,
    WithdrawToOwnerEvent.OutputTuple,
    WithdrawToOwnerEvent.OutputObject
  >;

  filters: {
    "DelegateFtso(address,uint256)": TypedContractEvent<
      DelegateFtsoEvent.InputTuple,
      DelegateFtsoEvent.OutputTuple,
      DelegateFtsoEvent.OutputObject
    >;
    DelegateFtso: TypedContractEvent<
      DelegateFtsoEvent.InputTuple,
      DelegateFtsoEvent.OutputTuple,
      DelegateFtsoEvent.OutputObject
    >;

    "DelegateGovernance(address)": TypedContractEvent<
      DelegateGovernanceEvent.InputTuple,
      DelegateGovernanceEvent.OutputTuple,
      DelegateGovernanceEvent.OutputObject
    >;
    DelegateGovernance: TypedContractEvent<
      DelegateGovernanceEvent.InputTuple,
      DelegateGovernanceEvent.OutputTuple,
      DelegateGovernanceEvent.OutputObject
    >;

    "ExecutorFeePaid(address,uint256)": TypedContractEvent<
      ExecutorFeePaidEvent.InputTuple,
      ExecutorFeePaidEvent.OutputTuple,
      ExecutorFeePaidEvent.OutputObject
    >;
    ExecutorFeePaid: TypedContractEvent<
      ExecutorFeePaidEvent.InputTuple,
      ExecutorFeePaidEvent.OutputTuple,
      ExecutorFeePaidEvent.OutputObject
    >;

    "ExternalTokenTransferred(address,uint256)": TypedContractEvent<
      ExternalTokenTransferredEvent.InputTuple,
      ExternalTokenTransferredEvent.OutputTuple,
      ExternalTokenTransferredEvent.OutputObject
    >;
    ExternalTokenTransferred: TypedContractEvent<
      ExternalTokenTransferredEvent.InputTuple,
      ExternalTokenTransferredEvent.OutputTuple,
      ExternalTokenTransferredEvent.OutputObject
    >;

    "Initialize(address,address)": TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;
    Initialize: TypedContractEvent<
      InitializeEvent.InputTuple,
      InitializeEvent.OutputTuple,
      InitializeEvent.OutputObject
    >;

    "RevokeFtso(address,uint256)": TypedContractEvent<
      RevokeFtsoEvent.InputTuple,
      RevokeFtsoEvent.OutputTuple,
      RevokeFtsoEvent.OutputObject
    >;
    RevokeFtso: TypedContractEvent<
      RevokeFtsoEvent.InputTuple,
      RevokeFtsoEvent.OutputTuple,
      RevokeFtsoEvent.OutputObject
    >;

    "UndelegateAllFtso()": TypedContractEvent<
      UndelegateAllFtsoEvent.InputTuple,
      UndelegateAllFtsoEvent.OutputTuple,
      UndelegateAllFtsoEvent.OutputObject
    >;
    UndelegateAllFtso: TypedContractEvent<
      UndelegateAllFtsoEvent.InputTuple,
      UndelegateAllFtsoEvent.OutputTuple,
      UndelegateAllFtsoEvent.OutputObject
    >;

    "UndelegateGovernance()": TypedContractEvent<
      UndelegateGovernanceEvent.InputTuple,
      UndelegateGovernanceEvent.OutputTuple,
      UndelegateGovernanceEvent.OutputObject
    >;
    UndelegateGovernance: TypedContractEvent<
      UndelegateGovernanceEvent.InputTuple,
      UndelegateGovernanceEvent.OutputTuple,
      UndelegateGovernanceEvent.OutputObject
    >;

    "WithdrawToOwner(uint256)": TypedContractEvent<
      WithdrawToOwnerEvent.InputTuple,
      WithdrawToOwnerEvent.OutputTuple,
      WithdrawToOwnerEvent.OutputObject
    >;
    WithdrawToOwner: TypedContractEvent<
      WithdrawToOwnerEvent.InputTuple,
      WithdrawToOwnerEvent.OutputTuple,
      WithdrawToOwnerEvent.OutputObject
    >;
  };
}
