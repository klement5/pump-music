/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IFdcInflationConfigurations {
  export type FdcConfigurationStruct = {
    attestationType: BytesLike;
    source: BytesLike;
    inflationShare: BigNumberish;
    minRequestsThreshold: BigNumberish;
    mode: BigNumberish;
  };

  export type FdcConfigurationStructOutput = [
    attestationType: string,
    source: string,
    inflationShare: bigint,
    minRequestsThreshold: bigint,
    mode: bigint
  ] & {
    attestationType: string;
    source: string;
    inflationShare: bigint;
    minRequestsThreshold: bigint;
    mode: bigint;
  };
}

export interface IFdcInflationConfigurationsInterface extends Interface {
  getFunction(
    nameOrSignature: "getFdcConfiguration" | "getFdcConfigurations"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFdcConfiguration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFdcConfigurations",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getFdcConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFdcConfigurations",
    data: BytesLike
  ): Result;
}

export interface IFdcInflationConfigurations extends BaseContract {
  connect(runner?: ContractRunner | null): IFdcInflationConfigurations;
  waitForDeployment(): Promise<this>;

  interface: IFdcInflationConfigurationsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFdcConfiguration: TypedContractMethod<
    [_index: BigNumberish],
    [IFdcInflationConfigurations.FdcConfigurationStructOutput],
    "view"
  >;

  getFdcConfigurations: TypedContractMethod<
    [],
    [IFdcInflationConfigurations.FdcConfigurationStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFdcConfiguration"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [IFdcInflationConfigurations.FdcConfigurationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFdcConfigurations"
  ): TypedContractMethod<
    [],
    [IFdcInflationConfigurations.FdcConfigurationStructOutput[]],
    "view"
  >;

  filters: {};
}
