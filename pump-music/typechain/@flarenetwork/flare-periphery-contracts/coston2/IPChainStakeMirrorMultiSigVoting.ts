/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IPChainStakeMirrorMultiSigVoting {
  export type PChainVotesStruct = {
    merkleRoot: BytesLike;
    votes: AddressLike[];
  };

  export type PChainVotesStructOutput = [
    merkleRoot: string,
    votes: string[]
  ] & { merkleRoot: string; votes: string[] };
}

export interface IPChainStakeMirrorMultiSigVotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCurrentEpochId"
      | "getEpochConfiguration"
      | "getEpochId"
      | "getMerkleRoot"
      | "getVoters"
      | "getVotes"
      | "getVotingThreshold"
      | "shouldVote"
      | "submitValidatorUptimeVote"
      | "submitVote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PChainStakeMirrorValidatorUptimeVoteSubmitted"
      | "PChainStakeMirrorVoteSubmitted"
      | "PChainStakeMirrorVotersSet"
      | "PChainStakeMirrorVotingFinalized"
      | "PChainStakeMirrorVotingReset"
      | "PChainStakeMirrorVotingThresholdSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getCurrentEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getVoters", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shouldVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitValidatorUptimeVote",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEpochId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shouldVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitValidatorUptimeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
}

export namespace PChainStakeMirrorValidatorUptimeVoteSubmittedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    timestamp: BigNumberish,
    voter: AddressLike,
    nodeIds: BytesLike[]
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    timestamp: bigint,
    voter: string,
    nodeIds: string[]
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    timestamp: bigint;
    voter: string;
    nodeIds: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PChainStakeMirrorVoteSubmittedEvent {
  export type InputTuple = [
    epochId: BigNumberish,
    voter: AddressLike,
    merkleRoot: BytesLike
  ];
  export type OutputTuple = [
    epochId: bigint,
    voter: string,
    merkleRoot: string
  ];
  export interface OutputObject {
    epochId: bigint;
    voter: string;
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PChainStakeMirrorVotersSetEvent {
  export type InputTuple = [voters: AddressLike[]];
  export type OutputTuple = [voters: string[]];
  export interface OutputObject {
    voters: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PChainStakeMirrorVotingFinalizedEvent {
  export type InputTuple = [epochId: BigNumberish, merkleRoot: BytesLike];
  export type OutputTuple = [epochId: bigint, merkleRoot: string];
  export interface OutputObject {
    epochId: bigint;
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PChainStakeMirrorVotingResetEvent {
  export type InputTuple = [epochId: BigNumberish];
  export type OutputTuple = [epochId: bigint];
  export interface OutputObject {
    epochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PChainStakeMirrorVotingThresholdSetEvent {
  export type InputTuple = [votingThreshold: BigNumberish];
  export type OutputTuple = [votingThreshold: bigint];
  export interface OutputObject {
    votingThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPChainStakeMirrorMultiSigVoting extends BaseContract {
  connect(runner?: ContractRunner | null): IPChainStakeMirrorMultiSigVoting;
  waitForDeployment(): Promise<this>;

  interface: IPChainStakeMirrorMultiSigVotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCurrentEpochId: TypedContractMethod<[], [bigint], "view">;

  getEpochConfiguration: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _firstEpochStartTs: bigint;
        _epochDurationSeconds: bigint;
      }
    ],
    "view"
  >;

  getEpochId: TypedContractMethod<[_timestamp: BigNumberish], [bigint], "view">;

  getMerkleRoot: TypedContractMethod<
    [_epochId: BigNumberish],
    [string],
    "view"
  >;

  getVoters: TypedContractMethod<[], [string[]], "view">;

  getVotes: TypedContractMethod<
    [_epochId: BigNumberish],
    [IPChainStakeMirrorMultiSigVoting.PChainVotesStructOutput[]],
    "view"
  >;

  getVotingThreshold: TypedContractMethod<[], [bigint], "view">;

  shouldVote: TypedContractMethod<
    [_epochId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;

  submitValidatorUptimeVote: TypedContractMethod<
    [_rewardEpochId: BigNumberish, _nodeIds: BytesLike[]],
    [void],
    "nonpayable"
  >;

  submitVote: TypedContractMethod<
    [_epochId: BigNumberish, _merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCurrentEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEpochConfiguration"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _firstEpochStartTs: bigint;
        _epochDurationSeconds: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochId"
  ): TypedContractMethod<[_timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMerkleRoot"
  ): TypedContractMethod<[_epochId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getVoters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<
    [_epochId: BigNumberish],
    [IPChainStakeMirrorMultiSigVoting.PChainVotesStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "shouldVote"
  ): TypedContractMethod<
    [_epochId: BigNumberish, _voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitValidatorUptimeVote"
  ): TypedContractMethod<
    [_rewardEpochId: BigNumberish, _nodeIds: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitVote"
  ): TypedContractMethod<
    [_epochId: BigNumberish, _merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PChainStakeMirrorValidatorUptimeVoteSubmitted"
  ): TypedContractEvent<
    PChainStakeMirrorValidatorUptimeVoteSubmittedEvent.InputTuple,
    PChainStakeMirrorValidatorUptimeVoteSubmittedEvent.OutputTuple,
    PChainStakeMirrorValidatorUptimeVoteSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "PChainStakeMirrorVoteSubmitted"
  ): TypedContractEvent<
    PChainStakeMirrorVoteSubmittedEvent.InputTuple,
    PChainStakeMirrorVoteSubmittedEvent.OutputTuple,
    PChainStakeMirrorVoteSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "PChainStakeMirrorVotersSet"
  ): TypedContractEvent<
    PChainStakeMirrorVotersSetEvent.InputTuple,
    PChainStakeMirrorVotersSetEvent.OutputTuple,
    PChainStakeMirrorVotersSetEvent.OutputObject
  >;
  getEvent(
    key: "PChainStakeMirrorVotingFinalized"
  ): TypedContractEvent<
    PChainStakeMirrorVotingFinalizedEvent.InputTuple,
    PChainStakeMirrorVotingFinalizedEvent.OutputTuple,
    PChainStakeMirrorVotingFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "PChainStakeMirrorVotingReset"
  ): TypedContractEvent<
    PChainStakeMirrorVotingResetEvent.InputTuple,
    PChainStakeMirrorVotingResetEvent.OutputTuple,
    PChainStakeMirrorVotingResetEvent.OutputObject
  >;
  getEvent(
    key: "PChainStakeMirrorVotingThresholdSet"
  ): TypedContractEvent<
    PChainStakeMirrorVotingThresholdSetEvent.InputTuple,
    PChainStakeMirrorVotingThresholdSetEvent.OutputTuple,
    PChainStakeMirrorVotingThresholdSetEvent.OutputObject
  >;

  filters: {
    "PChainStakeMirrorValidatorUptimeVoteSubmitted(uint256,uint256,address,bytes20[])": TypedContractEvent<
      PChainStakeMirrorValidatorUptimeVoteSubmittedEvent.InputTuple,
      PChainStakeMirrorValidatorUptimeVoteSubmittedEvent.OutputTuple,
      PChainStakeMirrorValidatorUptimeVoteSubmittedEvent.OutputObject
    >;
    PChainStakeMirrorValidatorUptimeVoteSubmitted: TypedContractEvent<
      PChainStakeMirrorValidatorUptimeVoteSubmittedEvent.InputTuple,
      PChainStakeMirrorValidatorUptimeVoteSubmittedEvent.OutputTuple,
      PChainStakeMirrorValidatorUptimeVoteSubmittedEvent.OutputObject
    >;

    "PChainStakeMirrorVoteSubmitted(uint256,address,bytes32)": TypedContractEvent<
      PChainStakeMirrorVoteSubmittedEvent.InputTuple,
      PChainStakeMirrorVoteSubmittedEvent.OutputTuple,
      PChainStakeMirrorVoteSubmittedEvent.OutputObject
    >;
    PChainStakeMirrorVoteSubmitted: TypedContractEvent<
      PChainStakeMirrorVoteSubmittedEvent.InputTuple,
      PChainStakeMirrorVoteSubmittedEvent.OutputTuple,
      PChainStakeMirrorVoteSubmittedEvent.OutputObject
    >;

    "PChainStakeMirrorVotersSet(address[])": TypedContractEvent<
      PChainStakeMirrorVotersSetEvent.InputTuple,
      PChainStakeMirrorVotersSetEvent.OutputTuple,
      PChainStakeMirrorVotersSetEvent.OutputObject
    >;
    PChainStakeMirrorVotersSet: TypedContractEvent<
      PChainStakeMirrorVotersSetEvent.InputTuple,
      PChainStakeMirrorVotersSetEvent.OutputTuple,
      PChainStakeMirrorVotersSetEvent.OutputObject
    >;

    "PChainStakeMirrorVotingFinalized(uint256,bytes32)": TypedContractEvent<
      PChainStakeMirrorVotingFinalizedEvent.InputTuple,
      PChainStakeMirrorVotingFinalizedEvent.OutputTuple,
      PChainStakeMirrorVotingFinalizedEvent.OutputObject
    >;
    PChainStakeMirrorVotingFinalized: TypedContractEvent<
      PChainStakeMirrorVotingFinalizedEvent.InputTuple,
      PChainStakeMirrorVotingFinalizedEvent.OutputTuple,
      PChainStakeMirrorVotingFinalizedEvent.OutputObject
    >;

    "PChainStakeMirrorVotingReset(uint256)": TypedContractEvent<
      PChainStakeMirrorVotingResetEvent.InputTuple,
      PChainStakeMirrorVotingResetEvent.OutputTuple,
      PChainStakeMirrorVotingResetEvent.OutputObject
    >;
    PChainStakeMirrorVotingReset: TypedContractEvent<
      PChainStakeMirrorVotingResetEvent.InputTuple,
      PChainStakeMirrorVotingResetEvent.OutputTuple,
      PChainStakeMirrorVotingResetEvent.OutputObject
    >;

    "PChainStakeMirrorVotingThresholdSet(uint256)": TypedContractEvent<
      PChainStakeMirrorVotingThresholdSetEvent.InputTuple,
      PChainStakeMirrorVotingThresholdSetEvent.OutputTuple,
      PChainStakeMirrorVotingThresholdSetEvent.OutputObject
    >;
    PChainStakeMirrorVotingThresholdSet: TypedContractEvent<
      PChainStakeMirrorVotingThresholdSetEvent.InputTuple,
      PChainStakeMirrorVotingThresholdSetEvent.OutputTuple,
      PChainStakeMirrorVotingThresholdSetEvent.OutputObject
    >;
  };
}
