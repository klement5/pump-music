/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IIGovernanceVotePowerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "delegate"
      | "getCleanupBlockNumber"
      | "getDelegateOfAt"
      | "getDelegateOfAtNow"
      | "getVotes"
      | "ownerToken"
      | "pChainStakeMirror"
      | "setCleanerContract"
      | "setCleanupBlockNumber"
      | "undelegate"
      | "updateAtTokenTransfer"
      | "votePowerOfAt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DelegateChanged" | "DelegateVotesChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCleanupBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateOfAtNow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pChainStakeMirror",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanerContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCleanupBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAtTokenTransfer",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAt",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCleanupBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateOfAtNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pChainStakeMirror",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCleanupBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "undelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAtTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAt",
    data: BytesLike
  ): Result;
}

export namespace DelegateChangedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    fromDelegate: AddressLike,
    toDelegate: AddressLike
  ];
  export type OutputTuple = [
    delegator: string,
    fromDelegate: string,
    toDelegate: string
  ];
  export interface OutputObject {
    delegator: string;
    fromDelegate: string;
    toDelegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateVotesChangedEvent {
  export type InputTuple = [
    delegate: AddressLike,
    previousBalance: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    delegate: string,
    previousBalance: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    delegate: string;
    previousBalance: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IIGovernanceVotePower extends BaseContract {
  connect(runner?: ContractRunner | null): IIGovernanceVotePower;
  waitForDeployment(): Promise<this>;

  interface: IIGovernanceVotePowerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  delegate: TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  getCleanupBlockNumber: TypedContractMethod<[], [bigint], "view">;

  getDelegateOfAt: TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;

  getDelegateOfAtNow: TypedContractMethod<
    [_who: AddressLike],
    [string],
    "view"
  >;

  getVotes: TypedContractMethod<[_who: AddressLike], [bigint], "view">;

  ownerToken: TypedContractMethod<[], [string], "view">;

  pChainStakeMirror: TypedContractMethod<[], [string], "view">;

  setCleanerContract: TypedContractMethod<
    [_cleanerContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setCleanupBlockNumber: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  undelegate: TypedContractMethod<[], [void], "nonpayable">;

  updateAtTokenTransfer: TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  votePowerOfAt: TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCleanupBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDelegateOfAt"
  ): TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDelegateOfAtNow"
  ): TypedContractMethod<[_who: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<[_who: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pChainStakeMirror"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setCleanerContract"
  ): TypedContractMethod<[_cleanerContract: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCleanupBlockNumber"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "undelegate"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAtTokenTransfer"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _fromBalance: BigNumberish,
      _toBalance: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votePowerOfAt"
  ): TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "DelegateChanged"
  ): TypedContractEvent<
    DelegateChangedEvent.InputTuple,
    DelegateChangedEvent.OutputTuple,
    DelegateChangedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateVotesChanged"
  ): TypedContractEvent<
    DelegateVotesChangedEvent.InputTuple,
    DelegateVotesChangedEvent.OutputTuple,
    DelegateVotesChangedEvent.OutputObject
  >;

  filters: {
    "DelegateChanged(address,address,address)": TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;
    DelegateChanged: TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;

    "DelegateVotesChanged(address,uint256,uint256)": TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;
    DelegateVotesChanged: TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;
  };
}
