/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IClaimSetupManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accountToDelegationAccount"
      | "allowedClaimRecipients"
      | "batchDelegate"
      | "claimExecutors"
      | "delegate"
      | "delegateGovernance"
      | "disableDelegationAccount"
      | "enableDelegationAccount"
      | "getDelegationAccountData"
      | "getExecutorCurrentFeeValue"
      | "getExecutorFeeValue"
      | "getExecutorInfo"
      | "getExecutorScheduledFeeValueChanges"
      | "getRegisteredExecutors"
      | "isClaimExecutor"
      | "registerExecutor"
      | "revokeDelegationAt"
      | "setAllowedClaimRecipients"
      | "setAutoClaiming"
      | "setClaimExecutors"
      | "transferExternalToken"
      | "undelegateAll"
      | "undelegateGovernance"
      | "unregisterExecutor"
      | "updateExecutorFeeValue"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowedClaimRecipientsChanged"
      | "ClaimExecutorFeeValueChanged"
      | "ClaimExecutorsChanged"
      | "DelegationAccountCreated"
      | "DelegationAccountUpdated"
      | "ExecutorRegistered"
      | "ExecutorUnregistered"
      | "MaxFeeSet"
      | "MinFeeSet"
      | "RegisterExecutorFeeSet"
      | "SetExecutorsExcessAmountRefunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accountToDelegationAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedClaimRecipients",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDelegate",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimExecutors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableDelegationAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableDelegationAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegationAccountData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorCurrentFeeValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorFeeValue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutorScheduledFeeValueChanges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredExecutors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimExecutor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerExecutor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegationAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedClaimRecipients",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAutoClaiming",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimExecutors",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferExternalToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutorFeeValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountToDelegationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedClaimRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableDelegationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableDelegationAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegationAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorCurrentFeeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorFeeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutorScheduledFeeValueChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegationAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedClaimRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutoClaiming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferExternalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutorFeeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AllowedClaimRecipientsChangedEvent {
  export type InputTuple = [owner: AddressLike, recipients: AddressLike[]];
  export type OutputTuple = [owner: string, recipients: string[]];
  export interface OutputObject {
    owner: string;
    recipients: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimExecutorFeeValueChangedEvent {
  export type InputTuple = [
    executor: AddressLike,
    validFromRewardEpoch: BigNumberish,
    feeValueWei: BigNumberish
  ];
  export type OutputTuple = [
    executor: string,
    validFromRewardEpoch: bigint,
    feeValueWei: bigint
  ];
  export interface OutputObject {
    executor: string;
    validFromRewardEpoch: bigint;
    feeValueWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimExecutorsChangedEvent {
  export type InputTuple = [owner: AddressLike, executors: AddressLike[]];
  export type OutputTuple = [owner: string, executors: string[]];
  export interface OutputObject {
    owner: string;
    executors: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegationAccountCreatedEvent {
  export type InputTuple = [owner: AddressLike, delegationAccount: AddressLike];
  export type OutputTuple = [owner: string, delegationAccount: string];
  export interface OutputObject {
    owner: string;
    delegationAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegationAccountUpdatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    delegationAccount: AddressLike,
    enabled: boolean
  ];
  export type OutputTuple = [
    owner: string,
    delegationAccount: string,
    enabled: boolean
  ];
  export interface OutputObject {
    owner: string;
    delegationAccount: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutorRegisteredEvent {
  export type InputTuple = [executor: AddressLike];
  export type OutputTuple = [executor: string];
  export interface OutputObject {
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutorUnregisteredEvent {
  export type InputTuple = [
    executor: AddressLike,
    validFromRewardEpoch: BigNumberish
  ];
  export type OutputTuple = [executor: string, validFromRewardEpoch: bigint];
  export interface OutputObject {
    executor: string;
    validFromRewardEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxFeeSetEvent {
  export type InputTuple = [maxFeeValueWei: BigNumberish];
  export type OutputTuple = [maxFeeValueWei: bigint];
  export interface OutputObject {
    maxFeeValueWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinFeeSetEvent {
  export type InputTuple = [minFeeValueWei: BigNumberish];
  export type OutputTuple = [minFeeValueWei: bigint];
  export interface OutputObject {
    minFeeValueWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegisterExecutorFeeSetEvent {
  export type InputTuple = [registerExecutorFeeValueWei: BigNumberish];
  export type OutputTuple = [registerExecutorFeeValueWei: bigint];
  export interface OutputObject {
    registerExecutorFeeValueWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetExecutorsExcessAmountRefundedEvent {
  export type InputTuple = [owner: AddressLike, excessAmount: BigNumberish];
  export type OutputTuple = [owner: string, excessAmount: bigint];
  export interface OutputObject {
    owner: string;
    excessAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IClaimSetupManager extends BaseContract {
  connect(runner?: ContractRunner | null): IClaimSetupManager;
  waitForDeployment(): Promise<this>;

  interface: IClaimSetupManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accountToDelegationAccount: TypedContractMethod<
    [_owner: AddressLike],
    [string],
    "view"
  >;

  allowedClaimRecipients: TypedContractMethod<
    [_rewardOwner: AddressLike],
    [string[]],
    "view"
  >;

  batchDelegate: TypedContractMethod<
    [_delegatees: AddressLike[], _bips: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimExecutors: TypedContractMethod<
    [_owner: AddressLike],
    [string[]],
    "view"
  >;

  delegate: TypedContractMethod<
    [_to: AddressLike, _bips: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegateGovernance: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "nonpayable"
  >;

  disableDelegationAccount: TypedContractMethod<[], [void], "nonpayable">;

  enableDelegationAccount: TypedContractMethod<[], [string], "nonpayable">;

  getDelegationAccountData: TypedContractMethod<
    [_owner: AddressLike],
    [[string, boolean] & { _delegationAccount: string; _enabled: boolean }],
    "view"
  >;

  getExecutorCurrentFeeValue: TypedContractMethod<
    [_executor: AddressLike],
    [bigint],
    "view"
  >;

  getExecutorFeeValue: TypedContractMethod<
    [_executor: AddressLike, _rewardEpoch: BigNumberish],
    [bigint],
    "view"
  >;

  getExecutorInfo: TypedContractMethod<
    [_executor: AddressLike],
    [[boolean, bigint] & { _registered: boolean; _currentFeeValue: bigint }],
    "view"
  >;

  getExecutorScheduledFeeValueChanges: TypedContractMethod<
    [_executor: AddressLike],
    [
      [bigint[], bigint[], boolean[]] & {
        _feeValue: bigint[];
        _validFromEpoch: bigint[];
        _fixed: boolean[];
      }
    ],
    "view"
  >;

  getRegisteredExecutors: TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [
      [string[], bigint] & {
        _registeredExecutors: string[];
        _totalLength: bigint;
      }
    ],
    "view"
  >;

  isClaimExecutor: TypedContractMethod<
    [_owner: AddressLike, _executor: AddressLike],
    [boolean],
    "view"
  >;

  registerExecutor: TypedContractMethod<
    [_feeValue: BigNumberish],
    [bigint],
    "payable"
  >;

  revokeDelegationAt: TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAllowedClaimRecipients: TypedContractMethod<
    [_recipients: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setAutoClaiming: TypedContractMethod<
    [_executors: AddressLike[], _enableDelegationAccount: boolean],
    [void],
    "payable"
  >;

  setClaimExecutors: TypedContractMethod<
    [_executors: AddressLike[]],
    [void],
    "payable"
  >;

  transferExternalToken: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  undelegateAll: TypedContractMethod<[], [void], "nonpayable">;

  undelegateGovernance: TypedContractMethod<[], [void], "nonpayable">;

  unregisterExecutor: TypedContractMethod<[], [bigint], "nonpayable">;

  updateExecutorFeeValue: TypedContractMethod<
    [_feeValue: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accountToDelegationAccount"
  ): TypedContractMethod<[_owner: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "allowedClaimRecipients"
  ): TypedContractMethod<[_rewardOwner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "batchDelegate"
  ): TypedContractMethod<
    [_delegatees: AddressLike[], _bips: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimExecutors"
  ): TypedContractMethod<[_owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<
    [_to: AddressLike, _bips: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateGovernance"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "disableDelegationAccount"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableDelegationAccount"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getDelegationAccountData"
  ): TypedContractMethod<
    [_owner: AddressLike],
    [[string, boolean] & { _delegationAccount: string; _enabled: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExecutorCurrentFeeValue"
  ): TypedContractMethod<[_executor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExecutorFeeValue"
  ): TypedContractMethod<
    [_executor: AddressLike, _rewardEpoch: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExecutorInfo"
  ): TypedContractMethod<
    [_executor: AddressLike],
    [[boolean, bigint] & { _registered: boolean; _currentFeeValue: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExecutorScheduledFeeValueChanges"
  ): TypedContractMethod<
    [_executor: AddressLike],
    [
      [bigint[], bigint[], boolean[]] & {
        _feeValue: bigint[];
        _validFromEpoch: bigint[];
        _fixed: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRegisteredExecutors"
  ): TypedContractMethod<
    [_start: BigNumberish, _end: BigNumberish],
    [
      [string[], bigint] & {
        _registeredExecutors: string[];
        _totalLength: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isClaimExecutor"
  ): TypedContractMethod<
    [_owner: AddressLike, _executor: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerExecutor"
  ): TypedContractMethod<[_feeValue: BigNumberish], [bigint], "payable">;
  getFunction(
    nameOrSignature: "revokeDelegationAt"
  ): TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAllowedClaimRecipients"
  ): TypedContractMethod<[_recipients: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAutoClaiming"
  ): TypedContractMethod<
    [_executors: AddressLike[], _enableDelegationAccount: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setClaimExecutors"
  ): TypedContractMethod<[_executors: AddressLike[]], [void], "payable">;
  getFunction(
    nameOrSignature: "transferExternalToken"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "undelegateAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "undelegateGovernance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterExecutor"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "updateExecutorFeeValue"
  ): TypedContractMethod<[_feeValue: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AllowedClaimRecipientsChanged"
  ): TypedContractEvent<
    AllowedClaimRecipientsChangedEvent.InputTuple,
    AllowedClaimRecipientsChangedEvent.OutputTuple,
    AllowedClaimRecipientsChangedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimExecutorFeeValueChanged"
  ): TypedContractEvent<
    ClaimExecutorFeeValueChangedEvent.InputTuple,
    ClaimExecutorFeeValueChangedEvent.OutputTuple,
    ClaimExecutorFeeValueChangedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimExecutorsChanged"
  ): TypedContractEvent<
    ClaimExecutorsChangedEvent.InputTuple,
    ClaimExecutorsChangedEvent.OutputTuple,
    ClaimExecutorsChangedEvent.OutputObject
  >;
  getEvent(
    key: "DelegationAccountCreated"
  ): TypedContractEvent<
    DelegationAccountCreatedEvent.InputTuple,
    DelegationAccountCreatedEvent.OutputTuple,
    DelegationAccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: "DelegationAccountUpdated"
  ): TypedContractEvent<
    DelegationAccountUpdatedEvent.InputTuple,
    DelegationAccountUpdatedEvent.OutputTuple,
    DelegationAccountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutorRegistered"
  ): TypedContractEvent<
    ExecutorRegisteredEvent.InputTuple,
    ExecutorRegisteredEvent.OutputTuple,
    ExecutorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ExecutorUnregistered"
  ): TypedContractEvent<
    ExecutorUnregisteredEvent.InputTuple,
    ExecutorUnregisteredEvent.OutputTuple,
    ExecutorUnregisteredEvent.OutputObject
  >;
  getEvent(
    key: "MaxFeeSet"
  ): TypedContractEvent<
    MaxFeeSetEvent.InputTuple,
    MaxFeeSetEvent.OutputTuple,
    MaxFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "MinFeeSet"
  ): TypedContractEvent<
    MinFeeSetEvent.InputTuple,
    MinFeeSetEvent.OutputTuple,
    MinFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "RegisterExecutorFeeSet"
  ): TypedContractEvent<
    RegisterExecutorFeeSetEvent.InputTuple,
    RegisterExecutorFeeSetEvent.OutputTuple,
    RegisterExecutorFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "SetExecutorsExcessAmountRefunded"
  ): TypedContractEvent<
    SetExecutorsExcessAmountRefundedEvent.InputTuple,
    SetExecutorsExcessAmountRefundedEvent.OutputTuple,
    SetExecutorsExcessAmountRefundedEvent.OutputObject
  >;

  filters: {
    "AllowedClaimRecipientsChanged(address,address[])": TypedContractEvent<
      AllowedClaimRecipientsChangedEvent.InputTuple,
      AllowedClaimRecipientsChangedEvent.OutputTuple,
      AllowedClaimRecipientsChangedEvent.OutputObject
    >;
    AllowedClaimRecipientsChanged: TypedContractEvent<
      AllowedClaimRecipientsChangedEvent.InputTuple,
      AllowedClaimRecipientsChangedEvent.OutputTuple,
      AllowedClaimRecipientsChangedEvent.OutputObject
    >;

    "ClaimExecutorFeeValueChanged(address,uint256,uint256)": TypedContractEvent<
      ClaimExecutorFeeValueChangedEvent.InputTuple,
      ClaimExecutorFeeValueChangedEvent.OutputTuple,
      ClaimExecutorFeeValueChangedEvent.OutputObject
    >;
    ClaimExecutorFeeValueChanged: TypedContractEvent<
      ClaimExecutorFeeValueChangedEvent.InputTuple,
      ClaimExecutorFeeValueChangedEvent.OutputTuple,
      ClaimExecutorFeeValueChangedEvent.OutputObject
    >;

    "ClaimExecutorsChanged(address,address[])": TypedContractEvent<
      ClaimExecutorsChangedEvent.InputTuple,
      ClaimExecutorsChangedEvent.OutputTuple,
      ClaimExecutorsChangedEvent.OutputObject
    >;
    ClaimExecutorsChanged: TypedContractEvent<
      ClaimExecutorsChangedEvent.InputTuple,
      ClaimExecutorsChangedEvent.OutputTuple,
      ClaimExecutorsChangedEvent.OutputObject
    >;

    "DelegationAccountCreated(address,address)": TypedContractEvent<
      DelegationAccountCreatedEvent.InputTuple,
      DelegationAccountCreatedEvent.OutputTuple,
      DelegationAccountCreatedEvent.OutputObject
    >;
    DelegationAccountCreated: TypedContractEvent<
      DelegationAccountCreatedEvent.InputTuple,
      DelegationAccountCreatedEvent.OutputTuple,
      DelegationAccountCreatedEvent.OutputObject
    >;

    "DelegationAccountUpdated(address,address,bool)": TypedContractEvent<
      DelegationAccountUpdatedEvent.InputTuple,
      DelegationAccountUpdatedEvent.OutputTuple,
      DelegationAccountUpdatedEvent.OutputObject
    >;
    DelegationAccountUpdated: TypedContractEvent<
      DelegationAccountUpdatedEvent.InputTuple,
      DelegationAccountUpdatedEvent.OutputTuple,
      DelegationAccountUpdatedEvent.OutputObject
    >;

    "ExecutorRegistered(address)": TypedContractEvent<
      ExecutorRegisteredEvent.InputTuple,
      ExecutorRegisteredEvent.OutputTuple,
      ExecutorRegisteredEvent.OutputObject
    >;
    ExecutorRegistered: TypedContractEvent<
      ExecutorRegisteredEvent.InputTuple,
      ExecutorRegisteredEvent.OutputTuple,
      ExecutorRegisteredEvent.OutputObject
    >;

    "ExecutorUnregistered(address,uint256)": TypedContractEvent<
      ExecutorUnregisteredEvent.InputTuple,
      ExecutorUnregisteredEvent.OutputTuple,
      ExecutorUnregisteredEvent.OutputObject
    >;
    ExecutorUnregistered: TypedContractEvent<
      ExecutorUnregisteredEvent.InputTuple,
      ExecutorUnregisteredEvent.OutputTuple,
      ExecutorUnregisteredEvent.OutputObject
    >;

    "MaxFeeSet(uint256)": TypedContractEvent<
      MaxFeeSetEvent.InputTuple,
      MaxFeeSetEvent.OutputTuple,
      MaxFeeSetEvent.OutputObject
    >;
    MaxFeeSet: TypedContractEvent<
      MaxFeeSetEvent.InputTuple,
      MaxFeeSetEvent.OutputTuple,
      MaxFeeSetEvent.OutputObject
    >;

    "MinFeeSet(uint256)": TypedContractEvent<
      MinFeeSetEvent.InputTuple,
      MinFeeSetEvent.OutputTuple,
      MinFeeSetEvent.OutputObject
    >;
    MinFeeSet: TypedContractEvent<
      MinFeeSetEvent.InputTuple,
      MinFeeSetEvent.OutputTuple,
      MinFeeSetEvent.OutputObject
    >;

    "RegisterExecutorFeeSet(uint256)": TypedContractEvent<
      RegisterExecutorFeeSetEvent.InputTuple,
      RegisterExecutorFeeSetEvent.OutputTuple,
      RegisterExecutorFeeSetEvent.OutputObject
    >;
    RegisterExecutorFeeSet: TypedContractEvent<
      RegisterExecutorFeeSetEvent.InputTuple,
      RegisterExecutorFeeSetEvent.OutputTuple,
      RegisterExecutorFeeSetEvent.OutputObject
    >;

    "SetExecutorsExcessAmountRefunded(address,uint256)": TypedContractEvent<
      SetExecutorsExcessAmountRefundedEvent.InputTuple,
      SetExecutorsExcessAmountRefundedEvent.OutputTuple,
      SetExecutorsExcessAmountRefundedEvent.OutputObject
    >;
    SetExecutorsExcessAmountRefunded: TypedContractEvent<
      SetExecutorsExcessAmountRefundedEvent.InputTuple,
      SetExecutorsExcessAmountRefundedEvent.OutputTuple,
      SetExecutorsExcessAmountRefundedEvent.OutputObject
    >;
  };
}
