/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IRelay {
  export type FeeConfigStruct = {
    protocolId: BigNumberish;
    feeInWei: BigNumberish;
  };

  export type FeeConfigStructOutput = [protocolId: bigint, feeInWei: bigint] & {
    protocolId: bigint;
    feeInWei: bigint;
  };

  export type RelayGovernanceConfigStruct = {
    descriptionHash: BytesLike;
    chainId: BigNumberish;
    newFeeConfigs: IRelay.FeeConfigStruct[];
  };

  export type RelayGovernanceConfigStructOutput = [
    descriptionHash: string,
    chainId: bigint,
    newFeeConfigs: IRelay.FeeConfigStructOutput[]
  ] & {
    descriptionHash: string;
    chainId: bigint;
    newFeeConfigs: IRelay.FeeConfigStructOutput[];
  };
}

export interface IRelayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "feeCollectionAddress"
      | "getRandomNumber"
      | "getRandomNumberHistorical"
      | "getVotingRoundId"
      | "governanceFeeSetup"
      | "isFinalized"
      | "lastInitializedRewardEpochData"
      | "merkleRoots"
      | "protocolFeeInWei"
      | "relay"
      | "startingVotingRoundIds"
      | "toSigningPolicyHash"
      | "verify"
      | "verifyCustomSignature"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProtocolMessageRelayed"
      | "SigningPolicyInitialized"
      | "SigningPolicyRelayed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "feeCollectionAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomNumberHistorical",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingRoundId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceFeeSetup",
    values: [BytesLike, IRelay.RelayGovernanceConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastInitializedRewardEpochData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoots",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeInWei",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "relay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startingVotingRoundIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toSigningPolicyHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCustomSignature",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "feeCollectionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomNumberHistorical",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceFeeSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastInitializedRewardEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeInWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startingVotingRoundIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toSigningPolicyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyCustomSignature",
    data: BytesLike
  ): Result;
}

export namespace ProtocolMessageRelayedEvent {
  export type InputTuple = [
    protocolId: BigNumberish,
    votingRoundId: BigNumberish,
    isSecureRandom: boolean,
    merkleRoot: BytesLike
  ];
  export type OutputTuple = [
    protocolId: bigint,
    votingRoundId: bigint,
    isSecureRandom: boolean,
    merkleRoot: string
  ];
  export interface OutputObject {
    protocolId: bigint;
    votingRoundId: bigint;
    isSecureRandom: boolean;
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SigningPolicyInitializedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    startVotingRoundId: BigNumberish,
    threshold: BigNumberish,
    seed: BigNumberish,
    voters: AddressLike[],
    weights: BigNumberish[],
    signingPolicyBytes: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    startVotingRoundId: bigint,
    threshold: bigint,
    seed: bigint,
    voters: string[],
    weights: bigint[],
    signingPolicyBytes: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    startVotingRoundId: bigint;
    threshold: bigint;
    seed: bigint;
    voters: string[];
    weights: bigint[];
    signingPolicyBytes: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SigningPolicyRelayedEvent {
  export type InputTuple = [rewardEpochId: BigNumberish];
  export type OutputTuple = [rewardEpochId: bigint];
  export interface OutputObject {
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRelay extends BaseContract {
  connect(runner?: ContractRunner | null): IRelay;
  waitForDeployment(): Promise<this>;

  interface: IRelayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  feeCollectionAddress: TypedContractMethod<[], [string], "view">;

  getRandomNumber: TypedContractMethod<
    [],
    [
      [bigint, boolean, bigint] & {
        _randomNumber: bigint;
        _isSecureRandom: boolean;
        _randomTimestamp: bigint;
      }
    ],
    "view"
  >;

  getRandomNumberHistorical: TypedContractMethod<
    [_votingRoundId: BigNumberish],
    [
      [bigint, boolean, bigint] & {
        _randomNumber: bigint;
        _isSecureRandom: boolean;
        _randomTimestamp: bigint;
      }
    ],
    "view"
  >;

  getVotingRoundId: TypedContractMethod<
    [_timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  governanceFeeSetup: TypedContractMethod<
    [_relayMessage: BytesLike, _config: IRelay.RelayGovernanceConfigStruct],
    [void],
    "nonpayable"
  >;

  isFinalized: TypedContractMethod<
    [_protocolId: BigNumberish, _votingRoundId: BigNumberish],
    [boolean],
    "view"
  >;

  lastInitializedRewardEpochData: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _lastInitializedRewardEpoch: bigint;
        _startingVotingRoundIdForLastInitializedRewardEpoch: bigint;
      }
    ],
    "view"
  >;

  merkleRoots: TypedContractMethod<
    [_protocolId: BigNumberish, _votingRoundId: BigNumberish],
    [string],
    "view"
  >;

  protocolFeeInWei: TypedContractMethod<
    [_protocolId: BigNumberish],
    [bigint],
    "view"
  >;

  relay: TypedContractMethod<[], [string], "nonpayable">;

  startingVotingRoundIds: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  toSigningPolicyHash: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [string],
    "view"
  >;

  verify: TypedContractMethod<
    [
      _protocolId: BigNumberish,
      _votingRoundId: BigNumberish,
      _leaf: BytesLike,
      _proof: BytesLike[]
    ],
    [boolean],
    "payable"
  >;

  verifyCustomSignature: TypedContractMethod<
    [_relayMessage: BytesLike, _messageHash: BytesLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "feeCollectionAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRandomNumber"
  ): TypedContractMethod<
    [],
    [
      [bigint, boolean, bigint] & {
        _randomNumber: bigint;
        _isSecureRandom: boolean;
        _randomTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRandomNumberHistorical"
  ): TypedContractMethod<
    [_votingRoundId: BigNumberish],
    [
      [bigint, boolean, bigint] & {
        _randomNumber: bigint;
        _isSecureRandom: boolean;
        _randomTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingRoundId"
  ): TypedContractMethod<[_timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "governanceFeeSetup"
  ): TypedContractMethod<
    [_relayMessage: BytesLike, _config: IRelay.RelayGovernanceConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isFinalized"
  ): TypedContractMethod<
    [_protocolId: BigNumberish, _votingRoundId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastInitializedRewardEpochData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _lastInitializedRewardEpoch: bigint;
        _startingVotingRoundIdForLastInitializedRewardEpoch: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "merkleRoots"
  ): TypedContractMethod<
    [_protocolId: BigNumberish, _votingRoundId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolFeeInWei"
  ): TypedContractMethod<[_protocolId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "relay"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "startingVotingRoundIds"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toSigningPolicyHash"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [
      _protocolId: BigNumberish,
      _votingRoundId: BigNumberish,
      _leaf: BytesLike,
      _proof: BytesLike[]
    ],
    [boolean],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verifyCustomSignature"
  ): TypedContractMethod<
    [_relayMessage: BytesLike, _messageHash: BytesLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "ProtocolMessageRelayed"
  ): TypedContractEvent<
    ProtocolMessageRelayedEvent.InputTuple,
    ProtocolMessageRelayedEvent.OutputTuple,
    ProtocolMessageRelayedEvent.OutputObject
  >;
  getEvent(
    key: "SigningPolicyInitialized"
  ): TypedContractEvent<
    SigningPolicyInitializedEvent.InputTuple,
    SigningPolicyInitializedEvent.OutputTuple,
    SigningPolicyInitializedEvent.OutputObject
  >;
  getEvent(
    key: "SigningPolicyRelayed"
  ): TypedContractEvent<
    SigningPolicyRelayedEvent.InputTuple,
    SigningPolicyRelayedEvent.OutputTuple,
    SigningPolicyRelayedEvent.OutputObject
  >;

  filters: {
    "ProtocolMessageRelayed(uint8,uint32,bool,bytes32)": TypedContractEvent<
      ProtocolMessageRelayedEvent.InputTuple,
      ProtocolMessageRelayedEvent.OutputTuple,
      ProtocolMessageRelayedEvent.OutputObject
    >;
    ProtocolMessageRelayed: TypedContractEvent<
      ProtocolMessageRelayedEvent.InputTuple,
      ProtocolMessageRelayedEvent.OutputTuple,
      ProtocolMessageRelayedEvent.OutputObject
    >;

    "SigningPolicyInitialized(uint24,uint32,uint16,uint256,address[],uint16[],bytes,uint64)": TypedContractEvent<
      SigningPolicyInitializedEvent.InputTuple,
      SigningPolicyInitializedEvent.OutputTuple,
      SigningPolicyInitializedEvent.OutputObject
    >;
    SigningPolicyInitialized: TypedContractEvent<
      SigningPolicyInitializedEvent.InputTuple,
      SigningPolicyInitializedEvent.OutputTuple,
      SigningPolicyInitializedEvent.OutputObject
    >;

    "SigningPolicyRelayed(uint256)": TypedContractEvent<
      SigningPolicyRelayedEvent.InputTuple,
      SigningPolicyRelayedEvent.OutputTuple,
      SigningPolicyRelayedEvent.OutputObject
    >;
    SigningPolicyRelayed: TypedContractEvent<
      SigningPolicyRelayedEvent.InputTuple,
      SigningPolicyRelayedEvent.OutputTuple,
      SigningPolicyRelayedEvent.OutputObject
    >;
  };
}
