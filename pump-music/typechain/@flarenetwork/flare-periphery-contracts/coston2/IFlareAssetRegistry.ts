/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IFlareAssetRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allAssetTypes"
      | "allAssets"
      | "allAssetsOfType"
      | "allAssetsOfTypeWithSymbols"
      | "allAssetsWithSymbols"
      | "assetBySymbol"
      | "assetType"
      | "getAttribute"
      | "incentivePoolFor"
      | "isFlareAsset"
      | "maxDelegatesByPercent"
      | "supportsFtsoDelegation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allAssetTypes",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allAssets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allAssetsOfType",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allAssetsOfTypeWithSymbols",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allAssetsWithSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetType",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttribute",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivePoolFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFlareAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDelegatesByPercent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsFtsoDelegation",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allAssetTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allAssets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allAssetsOfType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAssetsOfTypeWithSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allAssetsWithSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivePoolFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFlareAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDelegatesByPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsFtsoDelegation",
    data: BytesLike
  ): Result;
}

export interface IFlareAssetRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IFlareAssetRegistry;
  waitForDeployment(): Promise<this>;

  interface: IFlareAssetRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allAssetTypes: TypedContractMethod<[], [string[]], "view">;

  allAssets: TypedContractMethod<[], [string[]], "view">;

  allAssetsOfType: TypedContractMethod<
    [_assetType: BytesLike],
    [string[]],
    "view"
  >;

  allAssetsOfTypeWithSymbols: TypedContractMethod<
    [_assetType: BytesLike],
    [[string[], string[]]],
    "view"
  >;

  allAssetsWithSymbols: TypedContractMethod<[], [[string[], string[]]], "view">;

  assetBySymbol: TypedContractMethod<[symbol: string], [string], "view">;

  assetType: TypedContractMethod<[_token: AddressLike], [string], "view">;

  getAttribute: TypedContractMethod<
    [token: AddressLike, nameHash: BytesLike],
    [[boolean, string] & { defined: boolean; value: string }],
    "view"
  >;

  incentivePoolFor: TypedContractMethod<[token: AddressLike], [string], "view">;

  isFlareAsset: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  maxDelegatesByPercent: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  supportsFtsoDelegation: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allAssetTypes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "allAssets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "allAssetsOfType"
  ): TypedContractMethod<[_assetType: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "allAssetsOfTypeWithSymbols"
  ): TypedContractMethod<
    [_assetType: BytesLike],
    [[string[], string[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "allAssetsWithSymbols"
  ): TypedContractMethod<[], [[string[], string[]]], "view">;
  getFunction(
    nameOrSignature: "assetBySymbol"
  ): TypedContractMethod<[symbol: string], [string], "view">;
  getFunction(
    nameOrSignature: "assetType"
  ): TypedContractMethod<[_token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAttribute"
  ): TypedContractMethod<
    [token: AddressLike, nameHash: BytesLike],
    [[boolean, string] & { defined: boolean; value: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "incentivePoolFor"
  ): TypedContractMethod<[token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isFlareAsset"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxDelegatesByPercent"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsFtsoDelegation"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;

  filters: {};
}
