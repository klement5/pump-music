/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IWNatDelegationFeeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "defaultFeePercentageBIPS"
      | "feePercentageUpdateOffset"
      | "getVoterCurrentFeePercentage"
      | "getVoterFeePercentage"
      | "getVoterScheduledFeePercentageChanges"
      | "setVoterFeePercentage"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FeePercentageChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "defaultFeePercentageBIPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feePercentageUpdateOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterCurrentFeePercentage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterFeePercentage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterScheduledFeePercentageChanges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoterFeePercentage",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "defaultFeePercentageBIPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feePercentageUpdateOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterCurrentFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterScheduledFeePercentageChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVoterFeePercentage",
    data: BytesLike
  ): Result;
}

export namespace FeePercentageChangedEvent {
  export type InputTuple = [
    voter: AddressLike,
    value: BigNumberish,
    validFromEpochId: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    value: bigint,
    validFromEpochId: bigint
  ];
  export interface OutputObject {
    voter: string;
    value: bigint;
    validFromEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWNatDelegationFee extends BaseContract {
  connect(runner?: ContractRunner | null): IWNatDelegationFee;
  waitForDeployment(): Promise<this>;

  interface: IWNatDelegationFeeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  defaultFeePercentageBIPS: TypedContractMethod<[], [bigint], "view">;

  feePercentageUpdateOffset: TypedContractMethod<[], [bigint], "view">;

  getVoterCurrentFeePercentage: TypedContractMethod<
    [_voter: AddressLike],
    [bigint],
    "view"
  >;

  getVoterFeePercentage: TypedContractMethod<
    [_voter: AddressLike, _rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  getVoterScheduledFeePercentageChanges: TypedContractMethod<
    [_voter: AddressLike],
    [
      [bigint[], bigint[], boolean[]] & {
        _feePercentageBIPS: bigint[];
        _validFromEpochId: bigint[];
        _fixed: boolean[];
      }
    ],
    "view"
  >;

  setVoterFeePercentage: TypedContractMethod<
    [_feePercentageBIPS: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "defaultFeePercentageBIPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feePercentageUpdateOffset"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoterCurrentFeePercentage"
  ): TypedContractMethod<[_voter: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoterFeePercentage"
  ): TypedContractMethod<
    [_voter: AddressLike, _rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterScheduledFeePercentageChanges"
  ): TypedContractMethod<
    [_voter: AddressLike],
    [
      [bigint[], bigint[], boolean[]] & {
        _feePercentageBIPS: bigint[];
        _validFromEpochId: bigint[];
        _fixed: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setVoterFeePercentage"
  ): TypedContractMethod<
    [_feePercentageBIPS: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "FeePercentageChanged"
  ): TypedContractEvent<
    FeePercentageChangedEvent.InputTuple,
    FeePercentageChangedEvent.OutputTuple,
    FeePercentageChangedEvent.OutputObject
  >;

  filters: {
    "FeePercentageChanged(address,uint16,uint24)": TypedContractEvent<
      FeePercentageChangedEvent.InputTuple,
      FeePercentageChangedEvent.OutputTuple,
      FeePercentageChangedEvent.OutputObject
    >;
    FeePercentageChanged: TypedContractEvent<
      FeePercentageChangedEvent.InputTuple,
      FeePercentageChangedEvent.OutputTuple,
      FeePercentageChangedEvent.OutputObject
    >;
  };
}
