/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IFlareSystemsCalculatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "signingPolicySignNoRewardsDurationBlocks"
      | "signingPolicySignNonPunishableDurationBlocks"
      | "signingPolicySignNonPunishableDurationSeconds"
      | "wNatCapPPM"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "VoterRegistrationInfo"): EventFragment;

  encodeFunctionData(
    functionFragment: "signingPolicySignNoRewardsDurationBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signingPolicySignNonPunishableDurationBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signingPolicySignNonPunishableDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wNatCapPPM",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "signingPolicySignNoRewardsDurationBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signingPolicySignNonPunishableDurationBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signingPolicySignNonPunishableDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wNatCapPPM", data: BytesLike): Result;
}

export namespace VoterRegistrationInfoEvent {
  export type InputTuple = [
    voter: AddressLike,
    rewardEpochId: BigNumberish,
    delegationAddress: AddressLike,
    delegationFeeBIPS: BigNumberish,
    wNatWeight: BigNumberish,
    wNatCappedWeight: BigNumberish,
    nodeIds: BytesLike[],
    nodeWeights: BigNumberish[]
  ];
  export type OutputTuple = [
    voter: string,
    rewardEpochId: bigint,
    delegationAddress: string,
    delegationFeeBIPS: bigint,
    wNatWeight: bigint,
    wNatCappedWeight: bigint,
    nodeIds: string[],
    nodeWeights: bigint[]
  ];
  export interface OutputObject {
    voter: string;
    rewardEpochId: bigint;
    delegationAddress: string;
    delegationFeeBIPS: bigint;
    wNatWeight: bigint;
    wNatCappedWeight: bigint;
    nodeIds: string[];
    nodeWeights: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFlareSystemsCalculator extends BaseContract {
  connect(runner?: ContractRunner | null): IFlareSystemsCalculator;
  waitForDeployment(): Promise<this>;

  interface: IFlareSystemsCalculatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  signingPolicySignNoRewardsDurationBlocks: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  signingPolicySignNonPunishableDurationBlocks: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  signingPolicySignNonPunishableDurationSeconds: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  wNatCapPPM: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "signingPolicySignNoRewardsDurationBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "signingPolicySignNonPunishableDurationBlocks"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "signingPolicySignNonPunishableDurationSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wNatCapPPM"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "VoterRegistrationInfo"
  ): TypedContractEvent<
    VoterRegistrationInfoEvent.InputTuple,
    VoterRegistrationInfoEvent.OutputTuple,
    VoterRegistrationInfoEvent.OutputObject
  >;

  filters: {
    "VoterRegistrationInfo(address,uint24,address,uint16,uint256,uint256,bytes20[],uint256[])": TypedContractEvent<
      VoterRegistrationInfoEvent.InputTuple,
      VoterRegistrationInfoEvent.OutputTuple,
      VoterRegistrationInfoEvent.OutputObject
    >;
    VoterRegistrationInfo: TypedContractEvent<
      VoterRegistrationInfoEvent.InputTuple,
      VoterRegistrationInfoEvent.OutputTuple,
      VoterRegistrationInfoEvent.OutputObject
    >;
  };
}
