/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IVoterRegistry {
  export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

  export type SignatureStructOutput = [v: bigint, r: string, s: string] & {
    v: bigint;
    r: string;
    s: string;
  };
}

export interface IVoterRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chilledUntilRewardEpochId"
      | "getNumberOfRegisteredVoters"
      | "getRegisteredVoters"
      | "isVoterRegistered"
      | "maxVoters"
      | "newSigningPolicyInitializationStartBlockNumber"
      | "publicKeyRequired"
      | "registerVoter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BeneficiaryChilled"
      | "VoterRegistered"
      | "VoterRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "chilledUntilRewardEpochId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfRegisteredVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoterRegistered",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxVoters", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newSigningPolicyInitializationStartBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicKeyRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [AddressLike, IVoterRegistry.SignatureStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "chilledUntilRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfRegisteredVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoterRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxVoters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newSigningPolicyInitializationStartBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicKeyRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
}

export namespace BeneficiaryChilledEvent {
  export type InputTuple = [
    beneficiary: BytesLike,
    untilRewardEpochId: BigNumberish
  ];
  export type OutputTuple = [beneficiary: string, untilRewardEpochId: bigint];
  export interface OutputObject {
    beneficiary: string;
    untilRewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [
    voter: AddressLike,
    rewardEpochId: BigNumberish,
    signingPolicyAddress: AddressLike,
    submitAddress: AddressLike,
    submitSignaturesAddress: AddressLike,
    publicKeyPart1: BytesLike,
    publicKeyPart2: BytesLike,
    registrationWeight: BigNumberish
  ];
  export type OutputTuple = [
    voter: string,
    rewardEpochId: bigint,
    signingPolicyAddress: string,
    submitAddress: string,
    submitSignaturesAddress: string,
    publicKeyPart1: string,
    publicKeyPart2: string,
    registrationWeight: bigint
  ];
  export interface OutputObject {
    voter: string;
    rewardEpochId: bigint;
    signingPolicyAddress: string;
    submitAddress: string;
    submitSignaturesAddress: string;
    publicKeyPart1: string;
    publicKeyPart2: string;
    registrationWeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRemovedEvent {
  export type InputTuple = [voter: AddressLike, rewardEpochId: BigNumberish];
  export type OutputTuple = [voter: string, rewardEpochId: bigint];
  export interface OutputObject {
    voter: string;
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVoterRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IVoterRegistry;
  waitForDeployment(): Promise<this>;

  interface: IVoterRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chilledUntilRewardEpochId: TypedContractMethod<
    [_beneficiary: BytesLike],
    [bigint],
    "view"
  >;

  getNumberOfRegisteredVoters: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  getRegisteredVoters: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [string[]],
    "view"
  >;

  isVoterRegistered: TypedContractMethod<
    [_voter: AddressLike, _rewardEpochId: BigNumberish],
    [boolean],
    "view"
  >;

  maxVoters: TypedContractMethod<[], [bigint], "view">;

  newSigningPolicyInitializationStartBlockNumber: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  publicKeyRequired: TypedContractMethod<[], [boolean], "view">;

  registerVoter: TypedContractMethod<
    [_voter: AddressLike, _signature: IVoterRegistry.SignatureStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chilledUntilRewardEpochId"
  ): TypedContractMethod<[_beneficiary: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfRegisteredVoters"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRegisteredVoters"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isVoterRegistered"
  ): TypedContractMethod<
    [_voter: AddressLike, _rewardEpochId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxVoters"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "newSigningPolicyInitializationStartBlockNumber"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "publicKeyRequired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<
    [_voter: AddressLike, _signature: IVoterRegistry.SignatureStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BeneficiaryChilled"
  ): TypedContractEvent<
    BeneficiaryChilledEvent.InputTuple,
    BeneficiaryChilledEvent.OutputTuple,
    BeneficiaryChilledEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VoterRemoved"
  ): TypedContractEvent<
    VoterRemovedEvent.InputTuple,
    VoterRemovedEvent.OutputTuple,
    VoterRemovedEvent.OutputObject
  >;

  filters: {
    "BeneficiaryChilled(bytes20,uint256)": TypedContractEvent<
      BeneficiaryChilledEvent.InputTuple,
      BeneficiaryChilledEvent.OutputTuple,
      BeneficiaryChilledEvent.OutputObject
    >;
    BeneficiaryChilled: TypedContractEvent<
      BeneficiaryChilledEvent.InputTuple,
      BeneficiaryChilledEvent.OutputTuple,
      BeneficiaryChilledEvent.OutputObject
    >;

    "VoterRegistered(address,uint24,address,address,address,bytes32,bytes32,uint256)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;

    "VoterRemoved(address,uint256)": TypedContractEvent<
      VoterRemovedEvent.InputTuple,
      VoterRemovedEvent.OutputTuple,
      VoterRemovedEvent.OutputObject
    >;
    VoterRemoved: TypedContractEvent<
      VoterRemovedEvent.InputTuple,
      VoterRemovedEvent.OutputTuple,
      VoterRemovedEvent.OutputObject
    >;
  };
}
