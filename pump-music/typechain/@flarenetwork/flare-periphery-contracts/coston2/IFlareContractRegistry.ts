/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IFlareContractRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllContracts"
      | "getContractAddressByHash"
      | "getContractAddressByName"
      | "getContractAddressesByHash"
      | "getContractAddressesByName"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressByHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressesByHash",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractAddressesByName",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressesByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractAddressesByName",
    data: BytesLike
  ): Result;
}

export interface IFlareContractRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IFlareContractRegistry;
  waitForDeployment(): Promise<this>;

  interface: IFlareContractRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllContracts: TypedContractMethod<
    [],
    [[string[], string[]] & { _names: string[]; _addresses: string[] }],
    "view"
  >;

  getContractAddressByHash: TypedContractMethod<
    [_nameHash: BytesLike],
    [string],
    "view"
  >;

  getContractAddressByName: TypedContractMethod<
    [_name: string],
    [string],
    "view"
  >;

  getContractAddressesByHash: TypedContractMethod<
    [_nameHashes: BytesLike[]],
    [string[]],
    "view"
  >;

  getContractAddressesByName: TypedContractMethod<
    [_names: string[]],
    [string[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllContracts"
  ): TypedContractMethod<
    [],
    [[string[], string[]] & { _names: string[]; _addresses: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractAddressByHash"
  ): TypedContractMethod<[_nameHash: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getContractAddressByName"
  ): TypedContractMethod<[_name: string], [string], "view">;
  getFunction(
    nameOrSignature: "getContractAddressesByHash"
  ): TypedContractMethod<[_nameHashes: BytesLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractAddressesByName"
  ): TypedContractMethod<[_names: string[]], [string[]], "view">;

  filters: {};
}
