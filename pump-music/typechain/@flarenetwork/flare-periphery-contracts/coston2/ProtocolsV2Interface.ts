/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ProtocolsV2InterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "firstRewardEpochStartTs"
      | "firstVotingRoundStartTs"
      | "getCurrentRewardEpochId"
      | "getCurrentVotingEpochId"
      | "getStartVotingRoundId"
      | "getVotePowerBlock"
      | "rewardEpochDurationSeconds"
      | "votingEpochDurationSeconds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "firstRewardEpochStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstVotingRoundStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotingEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStartVotingRoundId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePowerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingEpochDurationSeconds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "firstRewardEpochStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstVotingRoundStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotingEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartVotingRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingEpochDurationSeconds",
    data: BytesLike
  ): Result;
}

export interface ProtocolsV2Interface extends BaseContract {
  connect(runner?: ContractRunner | null): ProtocolsV2Interface;
  waitForDeployment(): Promise<this>;

  interface: ProtocolsV2InterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  firstRewardEpochStartTs: TypedContractMethod<[], [bigint], "view">;

  firstVotingRoundStartTs: TypedContractMethod<[], [bigint], "view">;

  getCurrentRewardEpochId: TypedContractMethod<[], [bigint], "view">;

  getCurrentVotingEpochId: TypedContractMethod<[], [bigint], "view">;

  getStartVotingRoundId: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  getVotePowerBlock: TypedContractMethod<
    [_rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  rewardEpochDurationSeconds: TypedContractMethod<[], [bigint], "view">;

  votingEpochDurationSeconds: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "firstRewardEpochStartTs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "firstVotingRoundStartTs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRewardEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentVotingEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStartVotingRoundId"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVotePowerBlock"
  ): TypedContractMethod<[_rewardEpochId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardEpochDurationSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingEpochDurationSeconds"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
