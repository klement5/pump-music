/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ISubmissionInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCurrentRandom"
      | "getCurrentRandomWithQuality"
      | "getCurrentRandomWithQualityAndTimestamp"
      | "submit1"
      | "submit2"
      | "submit3"
      | "submitAndPass"
      | "submitSignatures"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewVotingRoundInitiated"): EventFragment;

  encodeFunctionData(
    functionFragment: "getCurrentRandom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRandomWithQuality",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRandomWithQualityAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "submit1", values?: undefined): string;
  encodeFunctionData(functionFragment: "submit2", values?: undefined): string;
  encodeFunctionData(functionFragment: "submit3", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitAndPass",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSignatures",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRandomWithQuality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRandomWithQualityAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submit1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitAndPass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSignatures",
    data: BytesLike
  ): Result;
}

export namespace NewVotingRoundInitiatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISubmission extends BaseContract {
  connect(runner?: ContractRunner | null): ISubmission;
  waitForDeployment(): Promise<this>;

  interface: ISubmissionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCurrentRandom: TypedContractMethod<[], [bigint], "view">;

  getCurrentRandomWithQuality: TypedContractMethod<
    [],
    [[bigint, boolean] & { _randomNumber: bigint; _isSecureRandom: boolean }],
    "view"
  >;

  getCurrentRandomWithQualityAndTimestamp: TypedContractMethod<
    [],
    [
      [bigint, boolean, bigint] & {
        _randomNumber: bigint;
        _isSecureRandom: boolean;
        _randomTimestamp: bigint;
      }
    ],
    "view"
  >;

  submit1: TypedContractMethod<[], [boolean], "nonpayable">;

  submit2: TypedContractMethod<[], [boolean], "nonpayable">;

  submit3: TypedContractMethod<[], [boolean], "nonpayable">;

  submitAndPass: TypedContractMethod<
    [_data: BytesLike],
    [boolean],
    "nonpayable"
  >;

  submitSignatures: TypedContractMethod<[], [boolean], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCurrentRandom"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRandomWithQuality"
  ): TypedContractMethod<
    [],
    [[bigint, boolean] & { _randomNumber: bigint; _isSecureRandom: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentRandomWithQualityAndTimestamp"
  ): TypedContractMethod<
    [],
    [
      [bigint, boolean, bigint] & {
        _randomNumber: bigint;
        _isSecureRandom: boolean;
        _randomTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submit1"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "submit2"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "submit3"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "submitAndPass"
  ): TypedContractMethod<[_data: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "submitSignatures"
  ): TypedContractMethod<[], [boolean], "nonpayable">;

  getEvent(
    key: "NewVotingRoundInitiated"
  ): TypedContractEvent<
    NewVotingRoundInitiatedEvent.InputTuple,
    NewVotingRoundInitiatedEvent.OutputTuple,
    NewVotingRoundInitiatedEvent.OutputObject
  >;

  filters: {
    "NewVotingRoundInitiated()": TypedContractEvent<
      NewVotingRoundInitiatedEvent.InputTuple,
      NewVotingRoundInitiatedEvent.OutputTuple,
      NewVotingRoundInitiatedEvent.OutputObject
    >;
    NewVotingRoundInitiated: TypedContractEvent<
      NewVotingRoundInitiatedEvent.InputTuple,
      NewVotingRoundInitiatedEvent.OutputTuple,
      NewVotingRoundInitiatedEvent.OutputObject
    >;
  };
}
