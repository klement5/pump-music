/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IFdcInflationConfigurations {
  export type FdcConfigurationStruct = {
    attestationType: BytesLike;
    source: BytesLike;
    inflationShare: BigNumberish;
    minRequestsThreshold: BigNumberish;
    mode: BigNumberish;
  };

  export type FdcConfigurationStructOutput = [
    attestationType: string,
    source: string,
    inflationShare: bigint,
    minRequestsThreshold: bigint,
    mode: bigint
  ] & {
    attestationType: string;
    source: string;
    inflationShare: bigint;
    minRequestsThreshold: bigint;
    mode: bigint;
  };
}

export interface IFdcHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fdcInflationConfigurations"
      | "fdcRequestFeeConfigurations"
      | "requestAttestation"
      | "requestsOffsetSeconds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttestationRequest"
      | "InflationRewardsOffered"
      | "RequestsOffsetSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "fdcInflationConfigurations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fdcRequestFeeConfigurations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestAttestation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestsOffsetSeconds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "fdcInflationConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fdcRequestFeeConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestsOffsetSeconds",
    data: BytesLike
  ): Result;
}

export namespace AttestationRequestEvent {
  export type InputTuple = [data: BytesLike, fee: BigNumberish];
  export type OutputTuple = [data: string, fee: bigint];
  export interface OutputObject {
    data: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InflationRewardsOfferedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    fdcConfigurations: IFdcInflationConfigurations.FdcConfigurationStruct[],
    amount: BigNumberish
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    fdcConfigurations: IFdcInflationConfigurations.FdcConfigurationStructOutput[],
    amount: bigint
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    fdcConfigurations: IFdcInflationConfigurations.FdcConfigurationStructOutput[];
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestsOffsetSetEvent {
  export type InputTuple = [requestsOffsetSeconds: BigNumberish];
  export type OutputTuple = [requestsOffsetSeconds: bigint];
  export interface OutputObject {
    requestsOffsetSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFdcHub extends BaseContract {
  connect(runner?: ContractRunner | null): IFdcHub;
  waitForDeployment(): Promise<this>;

  interface: IFdcHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fdcInflationConfigurations: TypedContractMethod<[], [string], "view">;

  fdcRequestFeeConfigurations: TypedContractMethod<[], [string], "view">;

  requestAttestation: TypedContractMethod<
    [_data: BytesLike],
    [void],
    "payable"
  >;

  requestsOffsetSeconds: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fdcInflationConfigurations"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fdcRequestFeeConfigurations"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requestAttestation"
  ): TypedContractMethod<[_data: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "requestsOffsetSeconds"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AttestationRequest"
  ): TypedContractEvent<
    AttestationRequestEvent.InputTuple,
    AttestationRequestEvent.OutputTuple,
    AttestationRequestEvent.OutputObject
  >;
  getEvent(
    key: "InflationRewardsOffered"
  ): TypedContractEvent<
    InflationRewardsOfferedEvent.InputTuple,
    InflationRewardsOfferedEvent.OutputTuple,
    InflationRewardsOfferedEvent.OutputObject
  >;
  getEvent(
    key: "RequestsOffsetSet"
  ): TypedContractEvent<
    RequestsOffsetSetEvent.InputTuple,
    RequestsOffsetSetEvent.OutputTuple,
    RequestsOffsetSetEvent.OutputObject
  >;

  filters: {
    "AttestationRequest(bytes,uint256)": TypedContractEvent<
      AttestationRequestEvent.InputTuple,
      AttestationRequestEvent.OutputTuple,
      AttestationRequestEvent.OutputObject
    >;
    AttestationRequest: TypedContractEvent<
      AttestationRequestEvent.InputTuple,
      AttestationRequestEvent.OutputTuple,
      AttestationRequestEvent.OutputObject
    >;

    "InflationRewardsOffered(uint24,tuple[],uint256)": TypedContractEvent<
      InflationRewardsOfferedEvent.InputTuple,
      InflationRewardsOfferedEvent.OutputTuple,
      InflationRewardsOfferedEvent.OutputObject
    >;
    InflationRewardsOffered: TypedContractEvent<
      InflationRewardsOfferedEvent.InputTuple,
      InflationRewardsOfferedEvent.OutputTuple,
      InflationRewardsOfferedEvent.OutputObject
    >;

    "RequestsOffsetSet(uint8)": TypedContractEvent<
      RequestsOffsetSetEvent.InputTuple,
      RequestsOffsetSetEvent.OutputTuple,
      RequestsOffsetSetEvent.OutputObject
    >;
    RequestsOffsetSet: TypedContractEvent<
      RequestsOffsetSetEvent.InputTuple,
      RequestsOffsetSetEvent.OutputTuple,
      RequestsOffsetSetEvent.OutputObject
    >;
  };
}
