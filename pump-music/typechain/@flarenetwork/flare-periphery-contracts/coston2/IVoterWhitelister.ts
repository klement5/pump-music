/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IVoterWhitelisterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chilledUntilRewardEpoch"
      | "defaultMaxVotersForFtso"
      | "getFtsoWhitelistedPriceProviders"
      | "getFtsoWhitelistedPriceProvidersBySymbol"
      | "maxVotersForFtso"
      | "requestFullVoterWhitelisting"
      | "requestWhitelistingVoter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "VoterChilled"
      | "VoterRemovedFromWhitelist"
      | "VoterWhitelisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "chilledUntilRewardEpoch",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMaxVotersForFtso",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoWhitelistedPriceProviders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFtsoWhitelistedPriceProvidersBySymbol",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVotersForFtso",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestFullVoterWhitelisting",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWhitelistingVoter",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "chilledUntilRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMaxVotersForFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoWhitelistedPriceProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFtsoWhitelistedPriceProvidersBySymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVotersForFtso",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFullVoterWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWhitelistingVoter",
    data: BytesLike
  ): Result;
}

export namespace VoterChilledEvent {
  export type InputTuple = [voter: AddressLike, untilRewardEpoch: BigNumberish];
  export type OutputTuple = [voter: string, untilRewardEpoch: bigint];
  export interface OutputObject {
    voter: string;
    untilRewardEpoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRemovedFromWhitelistEvent {
  export type InputTuple = [voter: AddressLike, ftsoIndex: BigNumberish];
  export type OutputTuple = [voter: string, ftsoIndex: bigint];
  export interface OutputObject {
    voter: string;
    ftsoIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterWhitelistedEvent {
  export type InputTuple = [voter: AddressLike, ftsoIndex: BigNumberish];
  export type OutputTuple = [voter: string, ftsoIndex: bigint];
  export interface OutputObject {
    voter: string;
    ftsoIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVoterWhitelister extends BaseContract {
  connect(runner?: ContractRunner | null): IVoterWhitelister;
  waitForDeployment(): Promise<this>;

  interface: IVoterWhitelisterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chilledUntilRewardEpoch: TypedContractMethod<
    [_voter: AddressLike],
    [bigint],
    "view"
  >;

  defaultMaxVotersForFtso: TypedContractMethod<[], [bigint], "view">;

  getFtsoWhitelistedPriceProviders: TypedContractMethod<
    [_ftsoIndex: BigNumberish],
    [string[]],
    "view"
  >;

  getFtsoWhitelistedPriceProvidersBySymbol: TypedContractMethod<
    [_symbol: string],
    [string[]],
    "view"
  >;

  maxVotersForFtso: TypedContractMethod<
    [_ftsoIndex: BigNumberish],
    [bigint],
    "view"
  >;

  requestFullVoterWhitelisting: TypedContractMethod<
    [_voter: AddressLike],
    [
      [bigint[], boolean[]] & {
        _supportedIndices: bigint[];
        _success: boolean[];
      }
    ],
    "nonpayable"
  >;

  requestWhitelistingVoter: TypedContractMethod<
    [_voter: AddressLike, _ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chilledUntilRewardEpoch"
  ): TypedContractMethod<[_voter: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultMaxVotersForFtso"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFtsoWhitelistedPriceProviders"
  ): TypedContractMethod<[_ftsoIndex: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFtsoWhitelistedPriceProvidersBySymbol"
  ): TypedContractMethod<[_symbol: string], [string[]], "view">;
  getFunction(
    nameOrSignature: "maxVotersForFtso"
  ): TypedContractMethod<[_ftsoIndex: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestFullVoterWhitelisting"
  ): TypedContractMethod<
    [_voter: AddressLike],
    [
      [bigint[], boolean[]] & {
        _supportedIndices: bigint[];
        _success: boolean[];
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestWhitelistingVoter"
  ): TypedContractMethod<
    [_voter: AddressLike, _ftsoIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "VoterChilled"
  ): TypedContractEvent<
    VoterChilledEvent.InputTuple,
    VoterChilledEvent.OutputTuple,
    VoterChilledEvent.OutputObject
  >;
  getEvent(
    key: "VoterRemovedFromWhitelist"
  ): TypedContractEvent<
    VoterRemovedFromWhitelistEvent.InputTuple,
    VoterRemovedFromWhitelistEvent.OutputTuple,
    VoterRemovedFromWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "VoterWhitelisted"
  ): TypedContractEvent<
    VoterWhitelistedEvent.InputTuple,
    VoterWhitelistedEvent.OutputTuple,
    VoterWhitelistedEvent.OutputObject
  >;

  filters: {
    "VoterChilled(address,uint256)": TypedContractEvent<
      VoterChilledEvent.InputTuple,
      VoterChilledEvent.OutputTuple,
      VoterChilledEvent.OutputObject
    >;
    VoterChilled: TypedContractEvent<
      VoterChilledEvent.InputTuple,
      VoterChilledEvent.OutputTuple,
      VoterChilledEvent.OutputObject
    >;

    "VoterRemovedFromWhitelist(address,uint256)": TypedContractEvent<
      VoterRemovedFromWhitelistEvent.InputTuple,
      VoterRemovedFromWhitelistEvent.OutputTuple,
      VoterRemovedFromWhitelistEvent.OutputObject
    >;
    VoterRemovedFromWhitelist: TypedContractEvent<
      VoterRemovedFromWhitelistEvent.InputTuple,
      VoterRemovedFromWhitelistEvent.OutputTuple,
      VoterRemovedFromWhitelistEvent.OutputObject
    >;

    "VoterWhitelisted(address,uint256)": TypedContractEvent<
      VoterWhitelistedEvent.InputTuple,
      VoterWhitelistedEvent.OutputTuple,
      VoterWhitelistedEvent.OutputObject
    >;
    VoterWhitelisted: TypedContractEvent<
      VoterWhitelistedEvent.InputTuple,
      VoterWhitelistedEvent.OutputTuple,
      VoterWhitelistedEvent.OutputObject
    >;
  };
}
