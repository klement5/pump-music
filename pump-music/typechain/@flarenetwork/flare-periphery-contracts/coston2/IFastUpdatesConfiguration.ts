/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IFastUpdatesConfiguration {
  export type FeedConfigurationStruct = {
    feedId: BytesLike;
    rewardBandValue: BigNumberish;
    inflationShare: BigNumberish;
  };

  export type FeedConfigurationStructOutput = [
    feedId: string,
    rewardBandValue: bigint,
    inflationShare: bigint
  ] & { feedId: string; rewardBandValue: bigint; inflationShare: bigint };
}

export interface IFastUpdatesConfigurationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFeedConfigurations"
      | "getFeedId"
      | "getFeedIds"
      | "getFeedIndex"
      | "getNumberOfFeeds"
      | "getUnusedIndices"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FeedAdded" | "FeedRemoved" | "FeedUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getFeedConfigurations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedIndex",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfFeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnusedIndices",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeedConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeedId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFeedIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnusedIndices",
    data: BytesLike
  ): Result;
}

export namespace FeedAddedEvent {
  export type InputTuple = [
    feedId: BytesLike,
    rewardBandValue: BigNumberish,
    inflationShare: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [
    feedId: string,
    rewardBandValue: bigint,
    inflationShare: bigint,
    index: bigint
  ];
  export interface OutputObject {
    feedId: string;
    rewardBandValue: bigint;
    inflationShare: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeedRemovedEvent {
  export type InputTuple = [feedId: BytesLike, index: BigNumberish];
  export type OutputTuple = [feedId: string, index: bigint];
  export interface OutputObject {
    feedId: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeedUpdatedEvent {
  export type InputTuple = [
    feedId: BytesLike,
    rewardBandValue: BigNumberish,
    inflationShare: BigNumberish,
    index: BigNumberish
  ];
  export type OutputTuple = [
    feedId: string,
    rewardBandValue: bigint,
    inflationShare: bigint,
    index: bigint
  ];
  export interface OutputObject {
    feedId: string;
    rewardBandValue: bigint;
    inflationShare: bigint;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFastUpdatesConfiguration extends BaseContract {
  connect(runner?: ContractRunner | null): IFastUpdatesConfiguration;
  waitForDeployment(): Promise<this>;

  interface: IFastUpdatesConfigurationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFeedConfigurations: TypedContractMethod<
    [],
    [IFastUpdatesConfiguration.FeedConfigurationStructOutput[]],
    "view"
  >;

  getFeedId: TypedContractMethod<[_index: BigNumberish], [string], "view">;

  getFeedIds: TypedContractMethod<[], [string[]], "view">;

  getFeedIndex: TypedContractMethod<[_feedId: BytesLike], [bigint], "view">;

  getNumberOfFeeds: TypedContractMethod<[], [bigint], "view">;

  getUnusedIndices: TypedContractMethod<[], [bigint[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFeedConfigurations"
  ): TypedContractMethod<
    [],
    [IFastUpdatesConfiguration.FeedConfigurationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedId"
  ): TypedContractMethod<[_index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFeedIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFeedIndex"
  ): TypedContractMethod<[_feedId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfFeeds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnusedIndices"
  ): TypedContractMethod<[], [bigint[]], "view">;

  getEvent(
    key: "FeedAdded"
  ): TypedContractEvent<
    FeedAddedEvent.InputTuple,
    FeedAddedEvent.OutputTuple,
    FeedAddedEvent.OutputObject
  >;
  getEvent(
    key: "FeedRemoved"
  ): TypedContractEvent<
    FeedRemovedEvent.InputTuple,
    FeedRemovedEvent.OutputTuple,
    FeedRemovedEvent.OutputObject
  >;
  getEvent(
    key: "FeedUpdated"
  ): TypedContractEvent<
    FeedUpdatedEvent.InputTuple,
    FeedUpdatedEvent.OutputTuple,
    FeedUpdatedEvent.OutputObject
  >;

  filters: {
    "FeedAdded(bytes21,uint32,uint24,uint256)": TypedContractEvent<
      FeedAddedEvent.InputTuple,
      FeedAddedEvent.OutputTuple,
      FeedAddedEvent.OutputObject
    >;
    FeedAdded: TypedContractEvent<
      FeedAddedEvent.InputTuple,
      FeedAddedEvent.OutputTuple,
      FeedAddedEvent.OutputObject
    >;

    "FeedRemoved(bytes21,uint256)": TypedContractEvent<
      FeedRemovedEvent.InputTuple,
      FeedRemovedEvent.OutputTuple,
      FeedRemovedEvent.OutputObject
    >;
    FeedRemoved: TypedContractEvent<
      FeedRemovedEvent.InputTuple,
      FeedRemovedEvent.OutputTuple,
      FeedRemovedEvent.OutputObject
    >;

    "FeedUpdated(bytes21,uint32,uint24,uint256)": TypedContractEvent<
      FeedUpdatedEvent.InputTuple,
      FeedUpdatedEvent.OutputTuple,
      FeedUpdatedEvent.OutputObject
    >;
    FeedUpdated: TypedContractEvent<
      FeedUpdatedEvent.InputTuple,
      FeedUpdatedEvent.OutputTuple,
      FeedUpdatedEvent.OutputObject
    >;
  };
}
