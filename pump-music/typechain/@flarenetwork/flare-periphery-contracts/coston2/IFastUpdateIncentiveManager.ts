/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IFastUpdatesConfiguration {
  export type FeedConfigurationStruct = {
    feedId: BytesLike;
    rewardBandValue: BigNumberish;
    inflationShare: BigNumberish;
  };

  export type FeedConfigurationStructOutput = [
    feedId: string,
    rewardBandValue: bigint,
    inflationShare: bigint
  ] & { feedId: string; rewardBandValue: bigint; inflationShare: bigint };
}

export declare namespace IFastUpdateIncentiveManager {
  export type IncentiveOfferStruct = {
    rangeIncrease: BigNumberish;
    rangeLimit: BigNumberish;
  };

  export type IncentiveOfferStructOutput = [
    rangeIncrease: bigint,
    rangeLimit: bigint
  ] & { rangeIncrease: bigint; rangeLimit: bigint };
}

export interface IFastUpdateIncentiveManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBaseScale"
      | "getCurrentSampleSizeIncreasePrice"
      | "getExpectedSampleSize"
      | "getIncentiveDuration"
      | "getPrecision"
      | "getRange"
      | "getScale"
      | "offerIncentive"
      | "rangeIncreaseLimit"
      | "rangeIncreasePrice"
      | "sampleIncreaseLimit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "IncentiveOffered" | "InflationRewardsOffered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getBaseScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSampleSizeIncreasePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedSampleSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIncentiveDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrecision",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRange", values?: undefined): string;
  encodeFunctionData(functionFragment: "getScale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "offerIncentive",
    values: [IFastUpdateIncentiveManager.IncentiveOfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rangeIncreaseLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rangeIncreasePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sampleIncreaseLimit",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getBaseScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSampleSizeIncreasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedSampleSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncentiveDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getScale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offerIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rangeIncreaseLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rangeIncreasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sampleIncreaseLimit",
    data: BytesLike
  ): Result;
}

export namespace IncentiveOfferedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    rangeIncrease: BigNumberish,
    sampleSizeIncrease: BigNumberish,
    offerAmount: BigNumberish
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    rangeIncrease: bigint,
    sampleSizeIncrease: bigint,
    offerAmount: bigint
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    rangeIncrease: bigint;
    sampleSizeIncrease: bigint;
    offerAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InflationRewardsOfferedEvent {
  export type InputTuple = [
    rewardEpochId: BigNumberish,
    feedConfigurations: IFastUpdatesConfiguration.FeedConfigurationStruct[],
    amount: BigNumberish
  ];
  export type OutputTuple = [
    rewardEpochId: bigint,
    feedConfigurations: IFastUpdatesConfiguration.FeedConfigurationStructOutput[],
    amount: bigint
  ];
  export interface OutputObject {
    rewardEpochId: bigint;
    feedConfigurations: IFastUpdatesConfiguration.FeedConfigurationStructOutput[];
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFastUpdateIncentiveManager extends BaseContract {
  connect(runner?: ContractRunner | null): IFastUpdateIncentiveManager;
  waitForDeployment(): Promise<this>;

  interface: IFastUpdateIncentiveManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBaseScale: TypedContractMethod<[], [bigint], "view">;

  getCurrentSampleSizeIncreasePrice: TypedContractMethod<[], [bigint], "view">;

  getExpectedSampleSize: TypedContractMethod<[], [bigint], "view">;

  getIncentiveDuration: TypedContractMethod<[], [bigint], "view">;

  getPrecision: TypedContractMethod<[], [bigint], "view">;

  getRange: TypedContractMethod<[], [bigint], "view">;

  getScale: TypedContractMethod<[], [bigint], "view">;

  offerIncentive: TypedContractMethod<
    [_offer: IFastUpdateIncentiveManager.IncentiveOfferStruct],
    [void],
    "payable"
  >;

  rangeIncreaseLimit: TypedContractMethod<[], [bigint], "view">;

  rangeIncreasePrice: TypedContractMethod<[], [bigint], "view">;

  sampleIncreaseLimit: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBaseScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentSampleSizeIncreasePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExpectedSampleSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getIncentiveDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrecision"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRange"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getScale"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "offerIncentive"
  ): TypedContractMethod<
    [_offer: IFastUpdateIncentiveManager.IncentiveOfferStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "rangeIncreaseLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rangeIncreasePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sampleIncreaseLimit"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "IncentiveOffered"
  ): TypedContractEvent<
    IncentiveOfferedEvent.InputTuple,
    IncentiveOfferedEvent.OutputTuple,
    IncentiveOfferedEvent.OutputObject
  >;
  getEvent(
    key: "InflationRewardsOffered"
  ): TypedContractEvent<
    InflationRewardsOfferedEvent.InputTuple,
    InflationRewardsOfferedEvent.OutputTuple,
    InflationRewardsOfferedEvent.OutputObject
  >;

  filters: {
    "IncentiveOffered(uint24,uint256,uint256,uint256)": TypedContractEvent<
      IncentiveOfferedEvent.InputTuple,
      IncentiveOfferedEvent.OutputTuple,
      IncentiveOfferedEvent.OutputObject
    >;
    IncentiveOffered: TypedContractEvent<
      IncentiveOfferedEvent.InputTuple,
      IncentiveOfferedEvent.OutputTuple,
      IncentiveOfferedEvent.OutputObject
    >;

    "InflationRewardsOffered(uint24,tuple[],uint256)": TypedContractEvent<
      InflationRewardsOfferedEvent.InputTuple,
      InflationRewardsOfferedEvent.OutputTuple,
      InflationRewardsOfferedEvent.OutputObject
    >;
    InflationRewardsOffered: TypedContractEvent<
      InflationRewardsOfferedEvent.InputTuple,
      InflationRewardsOfferedEvent.OutputTuple,
      InflationRewardsOfferedEvent.OutputObject
    >;
  };
}
