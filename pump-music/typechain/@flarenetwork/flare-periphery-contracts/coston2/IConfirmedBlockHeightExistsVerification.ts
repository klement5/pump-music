/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IConfirmedBlockHeightExists {
  export type RequestBodyStruct = {
    blockNumber: BigNumberish;
    queryWindow: BigNumberish;
  };

  export type RequestBodyStructOutput = [
    blockNumber: bigint,
    queryWindow: bigint
  ] & { blockNumber: bigint; queryWindow: bigint };

  export type ResponseBodyStruct = {
    blockTimestamp: BigNumberish;
    numberOfConfirmations: BigNumberish;
    lowestQueryWindowBlockNumber: BigNumberish;
    lowestQueryWindowBlockTimestamp: BigNumberish;
  };

  export type ResponseBodyStructOutput = [
    blockTimestamp: bigint,
    numberOfConfirmations: bigint,
    lowestQueryWindowBlockNumber: bigint,
    lowestQueryWindowBlockTimestamp: bigint
  ] & {
    blockTimestamp: bigint;
    numberOfConfirmations: bigint;
    lowestQueryWindowBlockNumber: bigint;
    lowestQueryWindowBlockTimestamp: bigint;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IConfirmedBlockHeightExists.RequestBodyStruct;
    responseBody: IConfirmedBlockHeightExists.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IConfirmedBlockHeightExists.RequestBodyStructOutput,
    responseBody: IConfirmedBlockHeightExists.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IConfirmedBlockHeightExists.RequestBodyStructOutput;
    responseBody: IConfirmedBlockHeightExists.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IConfirmedBlockHeightExists.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IConfirmedBlockHeightExists.ResponseStructOutput
  ] & {
    merkleProof: string[];
    data: IConfirmedBlockHeightExists.ResponseStructOutput;
  };
}

export interface IConfirmedBlockHeightExistsVerificationInterface
  extends Interface {
  getFunction(
    nameOrSignature: "verifyConfirmedBlockHeightExists"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyConfirmedBlockHeightExists",
    values: [IConfirmedBlockHeightExists.ProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyConfirmedBlockHeightExists",
    data: BytesLike
  ): Result;
}

export interface IConfirmedBlockHeightExistsVerification extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): IConfirmedBlockHeightExistsVerification;
  waitForDeployment(): Promise<this>;

  interface: IConfirmedBlockHeightExistsVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyConfirmedBlockHeightExists: TypedContractMethod<
    [_proof: IConfirmedBlockHeightExists.ProofStruct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyConfirmedBlockHeightExists"
  ): TypedContractMethod<
    [_proof: IConfirmedBlockHeightExists.ProofStruct],
    [boolean],
    "view"
  >;

  filters: {};
}
