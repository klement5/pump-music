/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type G1PointStruct = { x: BigNumberish; y: BigNumberish };

export type G1PointStructOutput = [x: bigint, y: bigint] & {
  x: bigint;
  y: bigint;
};

export type SortitionCredentialStruct = {
  replicate: BigNumberish;
  gamma: G1PointStruct;
  c: BigNumberish;
  s: BigNumberish;
};

export type SortitionCredentialStructOutput = [
  replicate: bigint,
  gamma: G1PointStructOutput,
  c: bigint,
  s: bigint
] & { replicate: bigint; gamma: G1PointStructOutput; c: bigint; s: bigint };

export declare namespace IFastUpdater {
  export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

  export type SignatureStructOutput = [v: bigint, r: string, s: string] & {
    v: bigint;
    r: string;
    s: string;
  };

  export type FastUpdatesStruct = {
    sortitionBlock: BigNumberish;
    sortitionCredential: SortitionCredentialStruct;
    deltas: BytesLike;
    signature: IFastUpdater.SignatureStruct;
  };

  export type FastUpdatesStructOutput = [
    sortitionBlock: bigint,
    sortitionCredential: SortitionCredentialStructOutput,
    deltas: string,
    signature: IFastUpdater.SignatureStructOutput
  ] & {
    sortitionBlock: bigint;
    sortitionCredential: SortitionCredentialStructOutput;
    deltas: string;
    signature: IFastUpdater.SignatureStructOutput;
  };
}

export interface IFastUpdaterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blockScoreCutoff"
      | "currentRewardEpochId"
      | "currentScoreCutoff"
      | "currentSortitionWeight"
      | "fetchAllCurrentFeeds"
      | "fetchCurrentFeeds"
      | "numberOfUpdates"
      | "numberOfUpdatesInBlock"
      | "submissionWindow"
      | "submitUpdates"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FastUpdateFeedRemoved"
      | "FastUpdateFeedReset"
      | "FastUpdateFeeds"
      | "FastUpdateFeedsSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "blockScoreCutoff",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRewardEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentScoreCutoff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSortitionWeight",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchAllCurrentFeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchCurrentFeeds",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfUpdates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfUpdatesInBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submissionWindow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitUpdates",
    values: [IFastUpdater.FastUpdatesStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "blockScoreCutoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRewardEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentScoreCutoff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSortitionWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchAllCurrentFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchCurrentFeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfUpdatesInBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitUpdates",
    data: BytesLike
  ): Result;
}

export namespace FastUpdateFeedRemovedEvent {
  export type InputTuple = [index: BigNumberish];
  export type OutputTuple = [index: bigint];
  export interface OutputObject {
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FastUpdateFeedResetEvent {
  export type InputTuple = [
    votingRoundId: BigNumberish,
    index: BigNumberish,
    id: BytesLike,
    value: BigNumberish,
    decimals: BigNumberish
  ];
  export type OutputTuple = [
    votingRoundId: bigint,
    index: bigint,
    id: string,
    value: bigint,
    decimals: bigint
  ];
  export interface OutputObject {
    votingRoundId: bigint;
    index: bigint;
    id: string;
    value: bigint;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FastUpdateFeedsEvent {
  export type InputTuple = [
    votingEpochId: BigNumberish,
    feeds: BigNumberish[],
    decimals: BigNumberish[]
  ];
  export type OutputTuple = [
    votingEpochId: bigint,
    feeds: bigint[],
    decimals: bigint[]
  ];
  export interface OutputObject {
    votingEpochId: bigint;
    feeds: bigint[];
    decimals: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FastUpdateFeedsSubmittedEvent {
  export type InputTuple = [
    votingRoundId: BigNumberish,
    signingPolicyAddress: AddressLike
  ];
  export type OutputTuple = [
    votingRoundId: bigint,
    signingPolicyAddress: string
  ];
  export interface OutputObject {
    votingRoundId: bigint;
    signingPolicyAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFastUpdater extends BaseContract {
  connect(runner?: ContractRunner | null): IFastUpdater;
  waitForDeployment(): Promise<this>;

  interface: IFastUpdaterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blockScoreCutoff: TypedContractMethod<
    [_blockNum: BigNumberish],
    [bigint],
    "view"
  >;

  currentRewardEpochId: TypedContractMethod<[], [bigint], "view">;

  currentScoreCutoff: TypedContractMethod<[], [bigint], "view">;

  currentSortitionWeight: TypedContractMethod<
    [_signingPolicyAddress: AddressLike],
    [bigint],
    "view"
  >;

  fetchAllCurrentFeeds: TypedContractMethod<
    [],
    [
      [string[], bigint[], bigint[], bigint] & {
        _feedIds: string[];
        _feeds: bigint[];
        _decimals: bigint[];
        _timestamp: bigint;
      }
    ],
    "payable"
  >;

  fetchCurrentFeeds: TypedContractMethod<
    [_indices: BigNumberish[]],
    [
      [bigint[], bigint[], bigint] & {
        _feeds: bigint[];
        _decimals: bigint[];
        _timestamp: bigint;
      }
    ],
    "payable"
  >;

  numberOfUpdates: TypedContractMethod<
    [_historySize: BigNumberish],
    [bigint[]],
    "view"
  >;

  numberOfUpdatesInBlock: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  submissionWindow: TypedContractMethod<[], [bigint], "view">;

  submitUpdates: TypedContractMethod<
    [_updates: IFastUpdater.FastUpdatesStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blockScoreCutoff"
  ): TypedContractMethod<[_blockNum: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentRewardEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentScoreCutoff"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentSortitionWeight"
  ): TypedContractMethod<
    [_signingPolicyAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchAllCurrentFeeds"
  ): TypedContractMethod<
    [],
    [
      [string[], bigint[], bigint[], bigint] & {
        _feedIds: string[];
        _feeds: bigint[];
        _decimals: bigint[];
        _timestamp: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fetchCurrentFeeds"
  ): TypedContractMethod<
    [_indices: BigNumberish[]],
    [
      [bigint[], bigint[], bigint] & {
        _feeds: bigint[];
        _decimals: bigint[];
        _timestamp: bigint;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "numberOfUpdates"
  ): TypedContractMethod<[_historySize: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "numberOfUpdatesInBlock"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "submissionWindow"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitUpdates"
  ): TypedContractMethod<
    [_updates: IFastUpdater.FastUpdatesStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FastUpdateFeedRemoved"
  ): TypedContractEvent<
    FastUpdateFeedRemovedEvent.InputTuple,
    FastUpdateFeedRemovedEvent.OutputTuple,
    FastUpdateFeedRemovedEvent.OutputObject
  >;
  getEvent(
    key: "FastUpdateFeedReset"
  ): TypedContractEvent<
    FastUpdateFeedResetEvent.InputTuple,
    FastUpdateFeedResetEvent.OutputTuple,
    FastUpdateFeedResetEvent.OutputObject
  >;
  getEvent(
    key: "FastUpdateFeeds"
  ): TypedContractEvent<
    FastUpdateFeedsEvent.InputTuple,
    FastUpdateFeedsEvent.OutputTuple,
    FastUpdateFeedsEvent.OutputObject
  >;
  getEvent(
    key: "FastUpdateFeedsSubmitted"
  ): TypedContractEvent<
    FastUpdateFeedsSubmittedEvent.InputTuple,
    FastUpdateFeedsSubmittedEvent.OutputTuple,
    FastUpdateFeedsSubmittedEvent.OutputObject
  >;

  filters: {
    "FastUpdateFeedRemoved(uint256)": TypedContractEvent<
      FastUpdateFeedRemovedEvent.InputTuple,
      FastUpdateFeedRemovedEvent.OutputTuple,
      FastUpdateFeedRemovedEvent.OutputObject
    >;
    FastUpdateFeedRemoved: TypedContractEvent<
      FastUpdateFeedRemovedEvent.InputTuple,
      FastUpdateFeedRemovedEvent.OutputTuple,
      FastUpdateFeedRemovedEvent.OutputObject
    >;

    "FastUpdateFeedReset(uint256,uint256,bytes21,uint256,int8)": TypedContractEvent<
      FastUpdateFeedResetEvent.InputTuple,
      FastUpdateFeedResetEvent.OutputTuple,
      FastUpdateFeedResetEvent.OutputObject
    >;
    FastUpdateFeedReset: TypedContractEvent<
      FastUpdateFeedResetEvent.InputTuple,
      FastUpdateFeedResetEvent.OutputTuple,
      FastUpdateFeedResetEvent.OutputObject
    >;

    "FastUpdateFeeds(uint256,uint256[],int8[])": TypedContractEvent<
      FastUpdateFeedsEvent.InputTuple,
      FastUpdateFeedsEvent.OutputTuple,
      FastUpdateFeedsEvent.OutputObject
    >;
    FastUpdateFeeds: TypedContractEvent<
      FastUpdateFeedsEvent.InputTuple,
      FastUpdateFeedsEvent.OutputTuple,
      FastUpdateFeedsEvent.OutputObject
    >;

    "FastUpdateFeedsSubmitted(uint32,address)": TypedContractEvent<
      FastUpdateFeedsSubmittedEvent.InputTuple,
      FastUpdateFeedsSubmittedEvent.OutputTuple,
      FastUpdateFeedsSubmittedEvent.OutputObject
    >;
    FastUpdateFeedsSubmitted: TypedContractEvent<
      FastUpdateFeedsSubmittedEvent.InputTuple,
      FastUpdateFeedsSubmittedEvent.OutputTuple,
      FastUpdateFeedsSubmittedEvent.OutputObject
    >;
  };
}
