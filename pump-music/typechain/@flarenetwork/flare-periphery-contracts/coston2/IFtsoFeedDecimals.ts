/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IFtsoFeedDecimalsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decimalsUpdateOffset"
      | "defaultDecimals"
      | "getCurrentDecimals"
      | "getCurrentDecimalsBulk"
      | "getDecimals"
      | "getDecimalsBulk"
      | "getScheduledDecimalsChanges"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DecimalsChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "decimalsUpdateOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDecimals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDecimalsBulk",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimalsBulk",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getScheduledDecimalsChanges",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decimalsUpdateOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDecimalsBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimalsBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScheduledDecimalsChanges",
    data: BytesLike
  ): Result;
}

export namespace DecimalsChangedEvent {
  export type InputTuple = [
    feedId: BytesLike,
    decimals: BigNumberish,
    rewardEpochId: BigNumberish
  ];
  export type OutputTuple = [
    feedId: string,
    decimals: bigint,
    rewardEpochId: bigint
  ];
  export interface OutputObject {
    feedId: string;
    decimals: bigint;
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFtsoFeedDecimals extends BaseContract {
  connect(runner?: ContractRunner | null): IFtsoFeedDecimals;
  waitForDeployment(): Promise<this>;

  interface: IFtsoFeedDecimalsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decimalsUpdateOffset: TypedContractMethod<[], [bigint], "view">;

  defaultDecimals: TypedContractMethod<[], [bigint], "view">;

  getCurrentDecimals: TypedContractMethod<
    [_feedId: BytesLike],
    [bigint],
    "view"
  >;

  getCurrentDecimalsBulk: TypedContractMethod<
    [_feedIds: BytesLike],
    [string],
    "view"
  >;

  getDecimals: TypedContractMethod<
    [_feedId: BytesLike, _rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;

  getDecimalsBulk: TypedContractMethod<
    [_feedIds: BytesLike, _rewardEpochId: BigNumberish],
    [string],
    "view"
  >;

  getScheduledDecimalsChanges: TypedContractMethod<
    [_feedId: BytesLike],
    [
      [bigint[], bigint[], boolean[]] & {
        _decimals: bigint[];
        _validFromEpochId: bigint[];
        _fixed: boolean[];
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decimalsUpdateOffset"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentDecimals"
  ): TypedContractMethod<[_feedId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentDecimalsBulk"
  ): TypedContractMethod<[_feedIds: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDecimals"
  ): TypedContractMethod<
    [_feedId: BytesLike, _rewardEpochId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDecimalsBulk"
  ): TypedContractMethod<
    [_feedIds: BytesLike, _rewardEpochId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getScheduledDecimalsChanges"
  ): TypedContractMethod<
    [_feedId: BytesLike],
    [
      [bigint[], bigint[], boolean[]] & {
        _decimals: bigint[];
        _validFromEpochId: bigint[];
        _fixed: boolean[];
      }
    ],
    "view"
  >;

  getEvent(
    key: "DecimalsChanged"
  ): TypedContractEvent<
    DecimalsChangedEvent.InputTuple,
    DecimalsChangedEvent.OutputTuple,
    DecimalsChangedEvent.OutputObject
  >;

  filters: {
    "DecimalsChanged(bytes21,int8,uint24)": TypedContractEvent<
      DecimalsChangedEvent.InputTuple,
      DecimalsChangedEvent.OutputTuple,
      DecimalsChangedEvent.OutputObject
    >;
    DecimalsChanged: TypedContractEvent<
      DecimalsChangedEvent.InputTuple,
      DecimalsChangedEvent.OutputTuple,
      DecimalsChangedEvent.OutputObject
    >;
  };
}
