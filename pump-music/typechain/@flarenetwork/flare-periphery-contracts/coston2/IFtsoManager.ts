/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IFtsoManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "active"
      | "getCurrentPriceEpochData"
      | "getCurrentPriceEpochId"
      | "getCurrentRewardEpoch"
      | "getFallbackMode"
      | "getFtsos"
      | "getPriceEpochConfiguration"
      | "getRewardEpochConfiguration"
      | "getRewardEpochToExpireNext"
      | "getRewardEpochVotePowerBlock"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccruingUnearnedRewardsFailed"
      | "DistributingRewardsFailed"
      | "FallbackMode"
      | "FinalizingPriceEpochFailed"
      | "FtsoAdded"
      | "FtsoFallbackMode"
      | "InitializingCurrentEpochStateForRevealFailed"
      | "PriceEpochFinalized"
      | "RewardEpochFinalized"
      | "UseGoodRandomSet"
  ): EventFragment;

  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceEpochData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPriceEpochId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackMode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFtsos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriceEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochToExpireNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochVotePowerBlock",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPriceEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFtsos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochToExpireNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochVotePowerBlock",
    data: BytesLike
  ): Result;
}

export namespace AccruingUnearnedRewardsFailedEvent {
  export type InputTuple = [epochId: BigNumberish];
  export type OutputTuple = [epochId: bigint];
  export interface OutputObject {
    epochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributingRewardsFailedEvent {
  export type InputTuple = [ftso: AddressLike, epochId: BigNumberish];
  export type OutputTuple = [ftso: string, epochId: bigint];
  export interface OutputObject {
    ftso: string;
    epochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FallbackModeEvent {
  export type InputTuple = [fallbackMode: boolean];
  export type OutputTuple = [fallbackMode: boolean];
  export interface OutputObject {
    fallbackMode: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizingPriceEpochFailedEvent {
  export type InputTuple = [
    ftso: AddressLike,
    epochId: BigNumberish,
    failingType: BigNumberish
  ];
  export type OutputTuple = [
    ftso: string,
    epochId: bigint,
    failingType: bigint
  ];
  export interface OutputObject {
    ftso: string;
    epochId: bigint;
    failingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FtsoAddedEvent {
  export type InputTuple = [ftso: AddressLike, add: boolean];
  export type OutputTuple = [ftso: string, add: boolean];
  export interface OutputObject {
    ftso: string;
    add: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FtsoFallbackModeEvent {
  export type InputTuple = [ftso: AddressLike, fallbackMode: boolean];
  export type OutputTuple = [ftso: string, fallbackMode: boolean];
  export interface OutputObject {
    ftso: string;
    fallbackMode: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializingCurrentEpochStateForRevealFailedEvent {
  export type InputTuple = [ftso: AddressLike, epochId: BigNumberish];
  export type OutputTuple = [ftso: string, epochId: bigint];
  export interface OutputObject {
    ftso: string;
    epochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceEpochFinalizedEvent {
  export type InputTuple = [
    chosenFtso: AddressLike,
    rewardEpochId: BigNumberish
  ];
  export type OutputTuple = [chosenFtso: string, rewardEpochId: bigint];
  export interface OutputObject {
    chosenFtso: string;
    rewardEpochId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardEpochFinalizedEvent {
  export type InputTuple = [
    votepowerBlock: BigNumberish,
    startBlock: BigNumberish
  ];
  export type OutputTuple = [votepowerBlock: bigint, startBlock: bigint];
  export interface OutputObject {
    votepowerBlock: bigint;
    startBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UseGoodRandomSetEvent {
  export type InputTuple = [
    useGoodRandom: boolean,
    maxWaitForGoodRandomSeconds: BigNumberish
  ];
  export type OutputTuple = [
    useGoodRandom: boolean,
    maxWaitForGoodRandomSeconds: bigint
  ];
  export interface OutputObject {
    useGoodRandom: boolean;
    maxWaitForGoodRandomSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFtsoManager extends BaseContract {
  connect(runner?: ContractRunner | null): IFtsoManager;
  waitForDeployment(): Promise<this>;

  interface: IFtsoManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  active: TypedContractMethod<[], [boolean], "view">;

  getCurrentPriceEpochData: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _priceEpochId: bigint;
        _priceEpochStartTimestamp: bigint;
        _priceEpochEndTimestamp: bigint;
        _priceEpochRevealEndTimestamp: bigint;
        _currentTimestamp: bigint;
      }
    ],
    "view"
  >;

  getCurrentPriceEpochId: TypedContractMethod<[], [bigint], "view">;

  getCurrentRewardEpoch: TypedContractMethod<[], [bigint], "view">;

  getFallbackMode: TypedContractMethod<
    [],
    [
      [boolean, string[], boolean[]] & {
        _fallbackMode: boolean;
        _ftsos: string[];
        _ftsoInFallbackMode: boolean[];
      }
    ],
    "view"
  >;

  getFtsos: TypedContractMethod<[], [string[]], "view">;

  getPriceEpochConfiguration: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _firstPriceEpochStartTs: bigint;
        _priceEpochDurationSeconds: bigint;
        _revealEpochDurationSeconds: bigint;
      }
    ],
    "view"
  >;

  getRewardEpochConfiguration: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _firstRewardEpochStartTs: bigint;
        _rewardEpochDurationSeconds: bigint;
      }
    ],
    "view"
  >;

  getRewardEpochToExpireNext: TypedContractMethod<[], [bigint], "view">;

  getRewardEpochVotePowerBlock: TypedContractMethod<
    [_rewardEpoch: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "active"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCurrentPriceEpochData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _priceEpochId: bigint;
        _priceEpochStartTimestamp: bigint;
        _priceEpochEndTimestamp: bigint;
        _priceEpochRevealEndTimestamp: bigint;
        _currentTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPriceEpochId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentRewardEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFallbackMode"
  ): TypedContractMethod<
    [],
    [
      [boolean, string[], boolean[]] & {
        _fallbackMode: boolean;
        _ftsos: string[];
        _ftsoInFallbackMode: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFtsos"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPriceEpochConfiguration"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _firstPriceEpochStartTs: bigint;
        _priceEpochDurationSeconds: bigint;
        _revealEpochDurationSeconds: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardEpochConfiguration"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        _firstRewardEpochStartTs: bigint;
        _rewardEpochDurationSeconds: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardEpochToExpireNext"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardEpochVotePowerBlock"
  ): TypedContractMethod<[_rewardEpoch: BigNumberish], [bigint], "view">;

  getEvent(
    key: "AccruingUnearnedRewardsFailed"
  ): TypedContractEvent<
    AccruingUnearnedRewardsFailedEvent.InputTuple,
    AccruingUnearnedRewardsFailedEvent.OutputTuple,
    AccruingUnearnedRewardsFailedEvent.OutputObject
  >;
  getEvent(
    key: "DistributingRewardsFailed"
  ): TypedContractEvent<
    DistributingRewardsFailedEvent.InputTuple,
    DistributingRewardsFailedEvent.OutputTuple,
    DistributingRewardsFailedEvent.OutputObject
  >;
  getEvent(
    key: "FallbackMode"
  ): TypedContractEvent<
    FallbackModeEvent.InputTuple,
    FallbackModeEvent.OutputTuple,
    FallbackModeEvent.OutputObject
  >;
  getEvent(
    key: "FinalizingPriceEpochFailed"
  ): TypedContractEvent<
    FinalizingPriceEpochFailedEvent.InputTuple,
    FinalizingPriceEpochFailedEvent.OutputTuple,
    FinalizingPriceEpochFailedEvent.OutputObject
  >;
  getEvent(
    key: "FtsoAdded"
  ): TypedContractEvent<
    FtsoAddedEvent.InputTuple,
    FtsoAddedEvent.OutputTuple,
    FtsoAddedEvent.OutputObject
  >;
  getEvent(
    key: "FtsoFallbackMode"
  ): TypedContractEvent<
    FtsoFallbackModeEvent.InputTuple,
    FtsoFallbackModeEvent.OutputTuple,
    FtsoFallbackModeEvent.OutputObject
  >;
  getEvent(
    key: "InitializingCurrentEpochStateForRevealFailed"
  ): TypedContractEvent<
    InitializingCurrentEpochStateForRevealFailedEvent.InputTuple,
    InitializingCurrentEpochStateForRevealFailedEvent.OutputTuple,
    InitializingCurrentEpochStateForRevealFailedEvent.OutputObject
  >;
  getEvent(
    key: "PriceEpochFinalized"
  ): TypedContractEvent<
    PriceEpochFinalizedEvent.InputTuple,
    PriceEpochFinalizedEvent.OutputTuple,
    PriceEpochFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "RewardEpochFinalized"
  ): TypedContractEvent<
    RewardEpochFinalizedEvent.InputTuple,
    RewardEpochFinalizedEvent.OutputTuple,
    RewardEpochFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "UseGoodRandomSet"
  ): TypedContractEvent<
    UseGoodRandomSetEvent.InputTuple,
    UseGoodRandomSetEvent.OutputTuple,
    UseGoodRandomSetEvent.OutputObject
  >;

  filters: {
    "AccruingUnearnedRewardsFailed(uint256)": TypedContractEvent<
      AccruingUnearnedRewardsFailedEvent.InputTuple,
      AccruingUnearnedRewardsFailedEvent.OutputTuple,
      AccruingUnearnedRewardsFailedEvent.OutputObject
    >;
    AccruingUnearnedRewardsFailed: TypedContractEvent<
      AccruingUnearnedRewardsFailedEvent.InputTuple,
      AccruingUnearnedRewardsFailedEvent.OutputTuple,
      AccruingUnearnedRewardsFailedEvent.OutputObject
    >;

    "DistributingRewardsFailed(address,uint256)": TypedContractEvent<
      DistributingRewardsFailedEvent.InputTuple,
      DistributingRewardsFailedEvent.OutputTuple,
      DistributingRewardsFailedEvent.OutputObject
    >;
    DistributingRewardsFailed: TypedContractEvent<
      DistributingRewardsFailedEvent.InputTuple,
      DistributingRewardsFailedEvent.OutputTuple,
      DistributingRewardsFailedEvent.OutputObject
    >;

    "FallbackMode(bool)": TypedContractEvent<
      FallbackModeEvent.InputTuple,
      FallbackModeEvent.OutputTuple,
      FallbackModeEvent.OutputObject
    >;
    FallbackMode: TypedContractEvent<
      FallbackModeEvent.InputTuple,
      FallbackModeEvent.OutputTuple,
      FallbackModeEvent.OutputObject
    >;

    "FinalizingPriceEpochFailed(address,uint256,uint8)": TypedContractEvent<
      FinalizingPriceEpochFailedEvent.InputTuple,
      FinalizingPriceEpochFailedEvent.OutputTuple,
      FinalizingPriceEpochFailedEvent.OutputObject
    >;
    FinalizingPriceEpochFailed: TypedContractEvent<
      FinalizingPriceEpochFailedEvent.InputTuple,
      FinalizingPriceEpochFailedEvent.OutputTuple,
      FinalizingPriceEpochFailedEvent.OutputObject
    >;

    "FtsoAdded(address,bool)": TypedContractEvent<
      FtsoAddedEvent.InputTuple,
      FtsoAddedEvent.OutputTuple,
      FtsoAddedEvent.OutputObject
    >;
    FtsoAdded: TypedContractEvent<
      FtsoAddedEvent.InputTuple,
      FtsoAddedEvent.OutputTuple,
      FtsoAddedEvent.OutputObject
    >;

    "FtsoFallbackMode(address,bool)": TypedContractEvent<
      FtsoFallbackModeEvent.InputTuple,
      FtsoFallbackModeEvent.OutputTuple,
      FtsoFallbackModeEvent.OutputObject
    >;
    FtsoFallbackMode: TypedContractEvent<
      FtsoFallbackModeEvent.InputTuple,
      FtsoFallbackModeEvent.OutputTuple,
      FtsoFallbackModeEvent.OutputObject
    >;

    "InitializingCurrentEpochStateForRevealFailed(address,uint256)": TypedContractEvent<
      InitializingCurrentEpochStateForRevealFailedEvent.InputTuple,
      InitializingCurrentEpochStateForRevealFailedEvent.OutputTuple,
      InitializingCurrentEpochStateForRevealFailedEvent.OutputObject
    >;
    InitializingCurrentEpochStateForRevealFailed: TypedContractEvent<
      InitializingCurrentEpochStateForRevealFailedEvent.InputTuple,
      InitializingCurrentEpochStateForRevealFailedEvent.OutputTuple,
      InitializingCurrentEpochStateForRevealFailedEvent.OutputObject
    >;

    "PriceEpochFinalized(address,uint256)": TypedContractEvent<
      PriceEpochFinalizedEvent.InputTuple,
      PriceEpochFinalizedEvent.OutputTuple,
      PriceEpochFinalizedEvent.OutputObject
    >;
    PriceEpochFinalized: TypedContractEvent<
      PriceEpochFinalizedEvent.InputTuple,
      PriceEpochFinalizedEvent.OutputTuple,
      PriceEpochFinalizedEvent.OutputObject
    >;

    "RewardEpochFinalized(uint256,uint256)": TypedContractEvent<
      RewardEpochFinalizedEvent.InputTuple,
      RewardEpochFinalizedEvent.OutputTuple,
      RewardEpochFinalizedEvent.OutputObject
    >;
    RewardEpochFinalized: TypedContractEvent<
      RewardEpochFinalizedEvent.InputTuple,
      RewardEpochFinalizedEvent.OutputTuple,
      RewardEpochFinalizedEvent.OutputObject
    >;

    "UseGoodRandomSet(bool,uint256)": TypedContractEvent<
      UseGoodRandomSetEvent.InputTuple,
      UseGoodRandomSetEvent.OutputTuple,
      UseGoodRandomSetEvent.OutputObject
    >;
    UseGoodRandomSet: TypedContractEvent<
      UseGoodRandomSetEvent.InputTuple,
      UseGoodRandomSetEvent.OutputTuple,
      UseGoodRandomSetEvent.OutputObject
    >;
  };
}
