/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IRNatInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "claimRewards"
      | "decimals"
      | "distributeRewards"
      | "firstMonthStartTs"
      | "getBalancesOf"
      | "getClaimableRewards"
      | "getCurrentMonth"
      | "getOwnerRewardsInfo"
      | "getProjectInfo"
      | "getProjectRewardsInfo"
      | "getProjectsBasicInfo"
      | "getProjectsCount"
      | "getRNatAccount"
      | "getRewardsInfo"
      | "name"
      | "setClaimExecutors"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferExternalToken"
      | "transferFrom"
      | "wNat"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ClaimingPermissionUpdated"
      | "DistributionPermissionUpdated"
      | "ProjectAdded"
      | "ProjectUpdated"
      | "RNatAccountCreated"
      | "RewardsAssigned"
      | "RewardsClaimed"
      | "RewardsDistributed"
      | "RewardsUnassigned"
      | "Transfer"
      | "UnassignedRewardsWithdrawn"
      | "UnclaimedRewardsUnassigned"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [BigNumberish, BigNumberish, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "firstMonthStartTs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalancesOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableRewards",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMonth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerRewardsInfo",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectRewardsInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectsBasicInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRNatAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setClaimExecutors",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferExternalToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wNat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [boolean]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstMonthStartTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalancesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerRewardsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectRewardsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectsBasicInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRNatAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimExecutors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferExternalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wNat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimingPermissionUpdatedEvent {
  export type InputTuple = [projectIds: BigNumberish[], disabled: boolean];
  export type OutputTuple = [projectIds: bigint[], disabled: boolean];
  export interface OutputObject {
    projectIds: bigint[];
    disabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionPermissionUpdatedEvent {
  export type InputTuple = [projectIds: BigNumberish[], disabled: boolean];
  export type OutputTuple = [projectIds: bigint[], disabled: boolean];
  export interface OutputObject {
    projectIds: bigint[];
    disabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    distributor: AddressLike,
    currentMonthDistributionEnabled: boolean
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    distributor: string,
    currentMonthDistributionEnabled: boolean
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    distributor: string;
    currentMonthDistributionEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    name: string,
    distributor: AddressLike,
    currentMonthDistributionEnabled: boolean
  ];
  export type OutputTuple = [
    id: bigint,
    name: string,
    distributor: string,
    currentMonthDistributionEnabled: boolean
  ];
  export interface OutputObject {
    id: bigint;
    name: string;
    distributor: string;
    currentMonthDistributionEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RNatAccountCreatedEvent {
  export type InputTuple = [owner: AddressLike, rNatAccount: AddressLike];
  export type OutputTuple = [owner: string, rNatAccount: string];
  export interface OutputObject {
    owner: string;
    rNatAccount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsAssignedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    month: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, month: bigint, amount: bigint];
  export interface OutputObject {
    projectId: bigint;
    month: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    month: BigNumberish,
    owner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    month: bigint,
    owner: string,
    amount: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    month: bigint;
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    month: BigNumberish,
    recipients: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    projectId: bigint,
    month: bigint,
    recipients: string[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    projectId: bigint;
    month: bigint;
    recipients: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsUnassignedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    month: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, month: bigint, amount: bigint];
  export interface OutputObject {
    projectId: bigint;
    month: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnassignedRewardsWithdrawnEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnclaimedRewardsUnassignedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    month: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [projectId: bigint, month: bigint, amount: bigint];
  export interface OutputObject {
    projectId: bigint;
    month: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRNat extends BaseContract {
  connect(runner?: ContractRunner | null): IRNat;
  waitForDeployment(): Promise<this>;

  interface: IRNatInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  claimRewards: TypedContractMethod<
    [_projectIds: BigNumberish[], _month: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  distributeRewards: TypedContractMethod<
    [
      _projectId: BigNumberish,
      _month: BigNumberish,
      _recipients: AddressLike[],
      _amountsWei: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  firstMonthStartTs: TypedContractMethod<[], [bigint], "view">;

  getBalancesOf: TypedContractMethod<
    [_owner: AddressLike],
    [
      [bigint, bigint, bigint] & {
        _wNatBalance: bigint;
        _rNatBalance: bigint;
        _lockedBalance: bigint;
      }
    ],
    "view"
  >;

  getClaimableRewards: TypedContractMethod<
    [_projectId: BigNumberish, _owner: AddressLike],
    [bigint],
    "view"
  >;

  getCurrentMonth: TypedContractMethod<[], [bigint], "view">;

  getOwnerRewardsInfo: TypedContractMethod<
    [_projectId: BigNumberish, _month: BigNumberish, _owner: AddressLike],
    [
      [bigint, bigint, boolean] & {
        _assignedRewards: bigint;
        _claimedRewards: bigint;
        _claimable: boolean;
      }
    ],
    "view"
  >;

  getProjectInfo: TypedContractMethod<
    [_projectId: BigNumberish],
    [
      [
        string,
        string,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint[]
      ] & {
        _name: string;
        _distributor: string;
        _currentMonthDistributionEnabled: boolean;
        _distributionDisabled: boolean;
        _claimingDisabled: boolean;
        _totalAssignedRewards: bigint;
        _totalDistributedRewards: bigint;
        _totalClaimedRewards: bigint;
        _totalUnassignedUnclaimedRewards: bigint;
        _monthsWithRewards: bigint[];
      }
    ],
    "view"
  >;

  getProjectRewardsInfo: TypedContractMethod<
    [_projectId: BigNumberish, _month: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        _assignedRewards: bigint;
        _distributedRewards: bigint;
        _claimedRewards: bigint;
        _unassignedUnclaimedRewards: bigint;
      }
    ],
    "view"
  >;

  getProjectsBasicInfo: TypedContractMethod<
    [],
    [
      [string[], boolean[]] & { _names: string[]; _claimingDisabled: boolean[] }
    ],
    "view"
  >;

  getProjectsCount: TypedContractMethod<[], [bigint], "view">;

  getRNatAccount: TypedContractMethod<[_owner: AddressLike], [string], "view">;

  getRewardsInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalAssignableRewards: bigint;
        _totalAssignedRewards: bigint;
        _totalClaimedRewards: bigint;
        _totalWithdrawnRewards: bigint;
        _totalWithdrawnAssignableRewards: bigint;
      }
    ],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  setClaimExecutors: TypedContractMethod<
    [_executors: AddressLike[]],
    [void],
    "payable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferExternalToken: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  wNat: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [_amount: BigNumberish, _wrap: boolean],
    [void],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<[_wrap: boolean], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [_projectIds: BigNumberish[], _month: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<
    [
      _projectId: BigNumberish,
      _month: BigNumberish,
      _recipients: AddressLike[],
      _amountsWei: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "firstMonthStartTs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBalancesOf"
  ): TypedContractMethod<
    [_owner: AddressLike],
    [
      [bigint, bigint, bigint] & {
        _wNatBalance: bigint;
        _rNatBalance: bigint;
        _lockedBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimableRewards"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _owner: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentMonth"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwnerRewardsInfo"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _month: BigNumberish, _owner: AddressLike],
    [
      [bigint, bigint, boolean] & {
        _assignedRewards: bigint;
        _claimedRewards: bigint;
        _claimable: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectInfo"
  ): TypedContractMethod<
    [_projectId: BigNumberish],
    [
      [
        string,
        string,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint[]
      ] & {
        _name: string;
        _distributor: string;
        _currentMonthDistributionEnabled: boolean;
        _distributionDisabled: boolean;
        _claimingDisabled: boolean;
        _totalAssignedRewards: bigint;
        _totalDistributedRewards: bigint;
        _totalClaimedRewards: bigint;
        _totalUnassignedUnclaimedRewards: bigint;
        _monthsWithRewards: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectRewardsInfo"
  ): TypedContractMethod<
    [_projectId: BigNumberish, _month: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        _assignedRewards: bigint;
        _distributedRewards: bigint;
        _claimedRewards: bigint;
        _unassignedUnclaimedRewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectsBasicInfo"
  ): TypedContractMethod<
    [],
    [
      [string[], boolean[]] & { _names: string[]; _claimingDisabled: boolean[] }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProjectsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRNatAccount"
  ): TypedContractMethod<[_owner: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRewardsInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        _totalAssignableRewards: bigint;
        _totalAssignedRewards: bigint;
        _totalClaimedRewards: bigint;
        _totalWithdrawnRewards: bigint;
        _totalWithdrawnAssignableRewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setClaimExecutors"
  ): TypedContractMethod<[_executors: AddressLike[]], [void], "payable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferExternalToken"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wNat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_amount: BigNumberish, _wrap: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[_wrap: boolean], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ClaimingPermissionUpdated"
  ): TypedContractEvent<
    ClaimingPermissionUpdatedEvent.InputTuple,
    ClaimingPermissionUpdatedEvent.OutputTuple,
    ClaimingPermissionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DistributionPermissionUpdated"
  ): TypedContractEvent<
    DistributionPermissionUpdatedEvent.InputTuple,
    DistributionPermissionUpdatedEvent.OutputTuple,
    DistributionPermissionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectAdded"
  ): TypedContractEvent<
    ProjectAddedEvent.InputTuple,
    ProjectAddedEvent.OutputTuple,
    ProjectAddedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectUpdated"
  ): TypedContractEvent<
    ProjectUpdatedEvent.InputTuple,
    ProjectUpdatedEvent.OutputTuple,
    ProjectUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RNatAccountCreated"
  ): TypedContractEvent<
    RNatAccountCreatedEvent.InputTuple,
    RNatAccountCreatedEvent.OutputTuple,
    RNatAccountCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsAssigned"
  ): TypedContractEvent<
    RewardsAssignedEvent.InputTuple,
    RewardsAssignedEvent.OutputTuple,
    RewardsAssignedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsUnassigned"
  ): TypedContractEvent<
    RewardsUnassignedEvent.InputTuple,
    RewardsUnassignedEvent.OutputTuple,
    RewardsUnassignedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UnassignedRewardsWithdrawn"
  ): TypedContractEvent<
    UnassignedRewardsWithdrawnEvent.InputTuple,
    UnassignedRewardsWithdrawnEvent.OutputTuple,
    UnassignedRewardsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "UnclaimedRewardsUnassigned"
  ): TypedContractEvent<
    UnclaimedRewardsUnassignedEvent.InputTuple,
    UnclaimedRewardsUnassignedEvent.OutputTuple,
    UnclaimedRewardsUnassignedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ClaimingPermissionUpdated(uint256[],bool)": TypedContractEvent<
      ClaimingPermissionUpdatedEvent.InputTuple,
      ClaimingPermissionUpdatedEvent.OutputTuple,
      ClaimingPermissionUpdatedEvent.OutputObject
    >;
    ClaimingPermissionUpdated: TypedContractEvent<
      ClaimingPermissionUpdatedEvent.InputTuple,
      ClaimingPermissionUpdatedEvent.OutputTuple,
      ClaimingPermissionUpdatedEvent.OutputObject
    >;

    "DistributionPermissionUpdated(uint256[],bool)": TypedContractEvent<
      DistributionPermissionUpdatedEvent.InputTuple,
      DistributionPermissionUpdatedEvent.OutputTuple,
      DistributionPermissionUpdatedEvent.OutputObject
    >;
    DistributionPermissionUpdated: TypedContractEvent<
      DistributionPermissionUpdatedEvent.InputTuple,
      DistributionPermissionUpdatedEvent.OutputTuple,
      DistributionPermissionUpdatedEvent.OutputObject
    >;

    "ProjectAdded(uint256,string,address,bool)": TypedContractEvent<
      ProjectAddedEvent.InputTuple,
      ProjectAddedEvent.OutputTuple,
      ProjectAddedEvent.OutputObject
    >;
    ProjectAdded: TypedContractEvent<
      ProjectAddedEvent.InputTuple,
      ProjectAddedEvent.OutputTuple,
      ProjectAddedEvent.OutputObject
    >;

    "ProjectUpdated(uint256,string,address,bool)": TypedContractEvent<
      ProjectUpdatedEvent.InputTuple,
      ProjectUpdatedEvent.OutputTuple,
      ProjectUpdatedEvent.OutputObject
    >;
    ProjectUpdated: TypedContractEvent<
      ProjectUpdatedEvent.InputTuple,
      ProjectUpdatedEvent.OutputTuple,
      ProjectUpdatedEvent.OutputObject
    >;

    "RNatAccountCreated(address,address)": TypedContractEvent<
      RNatAccountCreatedEvent.InputTuple,
      RNatAccountCreatedEvent.OutputTuple,
      RNatAccountCreatedEvent.OutputObject
    >;
    RNatAccountCreated: TypedContractEvent<
      RNatAccountCreatedEvent.InputTuple,
      RNatAccountCreatedEvent.OutputTuple,
      RNatAccountCreatedEvent.OutputObject
    >;

    "RewardsAssigned(uint256,uint256,uint128)": TypedContractEvent<
      RewardsAssignedEvent.InputTuple,
      RewardsAssignedEvent.OutputTuple,
      RewardsAssignedEvent.OutputObject
    >;
    RewardsAssigned: TypedContractEvent<
      RewardsAssignedEvent.InputTuple,
      RewardsAssignedEvent.OutputTuple,
      RewardsAssignedEvent.OutputObject
    >;

    "RewardsClaimed(uint256,uint256,address,uint128)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "RewardsDistributed(uint256,uint256,address[],uint128[])": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "RewardsUnassigned(uint256,uint256,uint128)": TypedContractEvent<
      RewardsUnassignedEvent.InputTuple,
      RewardsUnassignedEvent.OutputTuple,
      RewardsUnassignedEvent.OutputObject
    >;
    RewardsUnassigned: TypedContractEvent<
      RewardsUnassignedEvent.InputTuple,
      RewardsUnassignedEvent.OutputTuple,
      RewardsUnassignedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UnassignedRewardsWithdrawn(address,uint128)": TypedContractEvent<
      UnassignedRewardsWithdrawnEvent.InputTuple,
      UnassignedRewardsWithdrawnEvent.OutputTuple,
      UnassignedRewardsWithdrawnEvent.OutputObject
    >;
    UnassignedRewardsWithdrawn: TypedContractEvent<
      UnassignedRewardsWithdrawnEvent.InputTuple,
      UnassignedRewardsWithdrawnEvent.OutputTuple,
      UnassignedRewardsWithdrawnEvent.OutputObject
    >;

    "UnclaimedRewardsUnassigned(uint256,uint256,uint128)": TypedContractEvent<
      UnclaimedRewardsUnassignedEvent.InputTuple,
      UnclaimedRewardsUnassignedEvent.OutputTuple,
      UnclaimedRewardsUnassignedEvent.OutputObject
    >;
    UnclaimedRewardsUnassigned: TypedContractEvent<
      UnclaimedRewardsUnassignedEvent.InputTuple,
      UnclaimedRewardsUnassignedEvent.OutputTuple,
      UnclaimedRewardsUnassignedEvent.OutputObject
    >;
  };
}
