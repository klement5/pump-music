/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IVPTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfAt"
      | "batchDelegate"
      | "decimals"
      | "delegate"
      | "delegateExplicit"
      | "delegatesOf"
      | "delegatesOfAt"
      | "delegationModeOf"
      | "governanceVotePower"
      | "name"
      | "readVotePowerContract"
      | "revokeDelegationAt"
      | "symbol"
      | "totalSupply"
      | "totalSupplyAt"
      | "totalVotePower"
      | "totalVotePowerAt"
      | "transfer"
      | "transferFrom"
      | "undelegateAll"
      | "undelegateAllExplicit"
      | "undelegatedVotePowerOf"
      | "undelegatedVotePowerOfAt"
      | "votePowerFromTo"
      | "votePowerFromToAt"
      | "votePowerOf"
      | "votePowerOfAt"
      | "votePowerOfAtIgnoringRevocation"
      | "writeVotePowerContract"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDelegate",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateExplicit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatesOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatesOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegationModeOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceVotePower",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "readVotePowerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegationAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotePowerAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateAllExplicit",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegatedVotePowerOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegatedVotePowerOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromTo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerFromToAt",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerOfAtIgnoringRevocation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "writeVotePowerContract",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatesOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegationModeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readVotePowerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegationAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotePowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateAllExplicit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegatedVotePowerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegatedVotePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerFromToAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerOfAtIgnoringRevocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeVotePowerContract",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVPToken extends BaseContract {
  connect(runner?: ContractRunner | null): IVPToken;
  waitForDeployment(): Promise<this>;

  interface: IVPTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  balanceOfAt: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  batchDelegate: TypedContractMethod<
    [_delegatees: AddressLike[], _bips: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  delegate: TypedContractMethod<
    [_to: AddressLike, _bips: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegateExplicit: TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegatesOf: TypedContractMethod<
    [_who: AddressLike],
    [
      [string[], bigint[], bigint, bigint] & {
        _delegateAddresses: string[];
        _bips: bigint[];
        _count: bigint;
        _delegationMode: bigint;
      }
    ],
    "view"
  >;

  delegatesOfAt: TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [
      [string[], bigint[], bigint, bigint] & {
        _delegateAddresses: string[];
        _bips: bigint[];
        _count: bigint;
        _delegationMode: bigint;
      }
    ],
    "view"
  >;

  delegationModeOf: TypedContractMethod<[_who: AddressLike], [bigint], "view">;

  governanceVotePower: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  readVotePowerContract: TypedContractMethod<[], [string], "view">;

  revokeDelegationAt: TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyAt: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  totalVotePower: TypedContractMethod<[], [bigint], "view">;

  totalVotePowerAt: TypedContractMethod<
    [_blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  undelegateAll: TypedContractMethod<[], [void], "nonpayable">;

  undelegateAllExplicit: TypedContractMethod<
    [_delegateAddresses: AddressLike[]],
    [bigint],
    "nonpayable"
  >;

  undelegatedVotePowerOf: TypedContractMethod<
    [_owner: AddressLike],
    [bigint],
    "view"
  >;

  undelegatedVotePowerOfAt: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  votePowerFromTo: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike],
    [bigint],
    "view"
  >;

  votePowerFromToAt: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  votePowerOf: TypedContractMethod<[_owner: AddressLike], [bigint], "view">;

  votePowerOfAt: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  votePowerOfAtIgnoringRevocation: TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  writeVotePowerContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfAt"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "batchDelegate"
  ): TypedContractMethod<
    [_delegatees: AddressLike[], _bips: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<
    [_to: AddressLike, _bips: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateExplicit"
  ): TypedContractMethod<
    [_to: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegatesOf"
  ): TypedContractMethod<
    [_who: AddressLike],
    [
      [string[], bigint[], bigint, bigint] & {
        _delegateAddresses: string[];
        _bips: bigint[];
        _count: bigint;
        _delegationMode: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegatesOfAt"
  ): TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [
      [string[], bigint[], bigint, bigint] & {
        _delegateAddresses: string[];
        _bips: bigint[];
        _count: bigint;
        _delegationMode: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "delegationModeOf"
  ): TypedContractMethod<[_who: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "governanceVotePower"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "readVotePowerContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revokeDelegationAt"
  ): TypedContractMethod<
    [_who: AddressLike, _blockNumber: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotePower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotePowerAt"
  ): TypedContractMethod<[_blockNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "undelegateAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "undelegateAllExplicit"
  ): TypedContractMethod<
    [_delegateAddresses: AddressLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "undelegatedVotePowerOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "undelegatedVotePowerOfAt"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerFromTo"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerFromToAt"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "votePowerOfAt"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "votePowerOfAtIgnoringRevocation"
  ): TypedContractMethod<
    [_owner: AddressLike, _blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "writeVotePowerContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
