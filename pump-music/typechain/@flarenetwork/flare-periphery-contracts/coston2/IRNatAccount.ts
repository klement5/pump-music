/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IRNatAccountInterface extends Interface {
  getFunction(
    nameOrSignature: "owner" | "rNat" | "receivedRewards" | "withdrawnRewards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimExecutorsSet"
      | "ExternalTokenTransferred"
      | "FundsWithdrawn"
      | "Initialized"
      | "LockedAmountBurned"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rNat", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rNat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnRewards",
    data: BytesLike
  ): Result;
}

export namespace ClaimExecutorsSetEvent {
  export type InputTuple = [executors: AddressLike[]];
  export type OutputTuple = [executors: string[]];
  export interface OutputObject {
    executors: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExternalTokenTransferredEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [amount: BigNumberish, wrap: boolean];
  export type OutputTuple = [amount: bigint, wrap: boolean];
  export interface OutputObject {
    amount: bigint;
    wrap: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [owner: AddressLike, rNat: AddressLike];
  export type OutputTuple = [owner: string, rNat: string];
  export interface OutputObject {
    owner: string;
    rNat: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockedAmountBurnedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRNatAccount extends BaseContract {
  connect(runner?: ContractRunner | null): IRNatAccount;
  waitForDeployment(): Promise<this>;

  interface: IRNatAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  rNat: TypedContractMethod<[], [string], "view">;

  receivedRewards: TypedContractMethod<[], [bigint], "view">;

  withdrawnRewards: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rNat"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receivedRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawnRewards"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ClaimExecutorsSet"
  ): TypedContractEvent<
    ClaimExecutorsSetEvent.InputTuple,
    ClaimExecutorsSetEvent.OutputTuple,
    ClaimExecutorsSetEvent.OutputObject
  >;
  getEvent(
    key: "ExternalTokenTransferred"
  ): TypedContractEvent<
    ExternalTokenTransferredEvent.InputTuple,
    ExternalTokenTransferredEvent.OutputTuple,
    ExternalTokenTransferredEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LockedAmountBurned"
  ): TypedContractEvent<
    LockedAmountBurnedEvent.InputTuple,
    LockedAmountBurnedEvent.OutputTuple,
    LockedAmountBurnedEvent.OutputObject
  >;

  filters: {
    "ClaimExecutorsSet(address[])": TypedContractEvent<
      ClaimExecutorsSetEvent.InputTuple,
      ClaimExecutorsSetEvent.OutputTuple,
      ClaimExecutorsSetEvent.OutputObject
    >;
    ClaimExecutorsSet: TypedContractEvent<
      ClaimExecutorsSetEvent.InputTuple,
      ClaimExecutorsSetEvent.OutputTuple,
      ClaimExecutorsSetEvent.OutputObject
    >;

    "ExternalTokenTransferred(address,uint256)": TypedContractEvent<
      ExternalTokenTransferredEvent.InputTuple,
      ExternalTokenTransferredEvent.OutputTuple,
      ExternalTokenTransferredEvent.OutputObject
    >;
    ExternalTokenTransferred: TypedContractEvent<
      ExternalTokenTransferredEvent.InputTuple,
      ExternalTokenTransferredEvent.OutputTuple,
      ExternalTokenTransferredEvent.OutputObject
    >;

    "FundsWithdrawn(uint256,bool)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "Initialized(address,address)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LockedAmountBurned(uint256)": TypedContractEvent<
      LockedAmountBurnedEvent.InputTuple,
      LockedAmountBurnedEvent.OutputTuple,
      LockedAmountBurnedEvent.OutputObject
    >;
    LockedAmountBurned: TypedContractEvent<
      LockedAmountBurnedEvent.InputTuple,
      LockedAmountBurnedEvent.OutputTuple,
      LockedAmountBurnedEvent.OutputObject
    >;
  };
}
