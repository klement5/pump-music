/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IAddressBinderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cAddressToPAddress"
      | "pAddressToCAddress"
      | "registerAddresses"
      | "registerPublicKey"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AddressesRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "cAddressToPAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pAddressToCAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAddresses",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerPublicKey",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cAddressToPAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pAddressToCAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPublicKey",
    data: BytesLike
  ): Result;
}

export namespace AddressesRegisteredEvent {
  export type InputTuple = [
    publicKey: BytesLike,
    pAddress: BytesLike,
    cAddress: AddressLike
  ];
  export type OutputTuple = [
    publicKey: string,
    pAddress: string,
    cAddress: string
  ];
  export interface OutputObject {
    publicKey: string;
    pAddress: string;
    cAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAddressBinder extends BaseContract {
  connect(runner?: ContractRunner | null): IAddressBinder;
  waitForDeployment(): Promise<this>;

  interface: IAddressBinderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cAddressToPAddress: TypedContractMethod<
    [_cAddress: AddressLike],
    [string],
    "view"
  >;

  pAddressToCAddress: TypedContractMethod<
    [_pAddress: BytesLike],
    [string],
    "view"
  >;

  registerAddresses: TypedContractMethod<
    [_publicKey: BytesLike, _pAddress: BytesLike, _cAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  registerPublicKey: TypedContractMethod<
    [_publicKey: BytesLike],
    [[string, string] & { _pAddress: string; _cAddress: string }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cAddressToPAddress"
  ): TypedContractMethod<[_cAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "pAddressToCAddress"
  ): TypedContractMethod<[_pAddress: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "registerAddresses"
  ): TypedContractMethod<
    [_publicKey: BytesLike, _pAddress: BytesLike, _cAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerPublicKey"
  ): TypedContractMethod<
    [_publicKey: BytesLike],
    [[string, string] & { _pAddress: string; _cAddress: string }],
    "nonpayable"
  >;

  getEvent(
    key: "AddressesRegistered"
  ): TypedContractEvent<
    AddressesRegisteredEvent.InputTuple,
    AddressesRegisteredEvent.OutputTuple,
    AddressesRegisteredEvent.OutputObject
  >;

  filters: {
    "AddressesRegistered(bytes,bytes20,address)": TypedContractEvent<
      AddressesRegisteredEvent.InputTuple,
      AddressesRegisteredEvent.OutputTuple,
      AddressesRegisteredEvent.OutputObject
    >;
    AddressesRegistered: TypedContractEvent<
      AddressesRegisteredEvent.InputTuple,
      AddressesRegisteredEvent.OutputTuple,
      AddressesRegisteredEvent.OutputObject
    >;
  };
}
