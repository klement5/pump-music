/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IReferencedPaymentNonexistence {
  export type RequestBodyStruct = {
    minimalBlockNumber: BigNumberish;
    deadlineBlockNumber: BigNumberish;
    deadlineTimestamp: BigNumberish;
    destinationAddressHash: BytesLike;
    amount: BigNumberish;
    standardPaymentReference: BytesLike;
    checkSourceAddresses: boolean;
    sourceAddressesRoot: BytesLike;
  };

  export type RequestBodyStructOutput = [
    minimalBlockNumber: bigint,
    deadlineBlockNumber: bigint,
    deadlineTimestamp: bigint,
    destinationAddressHash: string,
    amount: bigint,
    standardPaymentReference: string,
    checkSourceAddresses: boolean,
    sourceAddressesRoot: string
  ] & {
    minimalBlockNumber: bigint;
    deadlineBlockNumber: bigint;
    deadlineTimestamp: bigint;
    destinationAddressHash: string;
    amount: bigint;
    standardPaymentReference: string;
    checkSourceAddresses: boolean;
    sourceAddressesRoot: string;
  };

  export type ResponseBodyStruct = {
    minimalBlockTimestamp: BigNumberish;
    firstOverflowBlockNumber: BigNumberish;
    firstOverflowBlockTimestamp: BigNumberish;
  };

  export type ResponseBodyStructOutput = [
    minimalBlockTimestamp: bigint,
    firstOverflowBlockNumber: bigint,
    firstOverflowBlockTimestamp: bigint
  ] & {
    minimalBlockTimestamp: bigint;
    firstOverflowBlockNumber: bigint;
    firstOverflowBlockTimestamp: bigint;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IReferencedPaymentNonexistence.RequestBodyStruct;
    responseBody: IReferencedPaymentNonexistence.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IReferencedPaymentNonexistence.RequestBodyStructOutput,
    responseBody: IReferencedPaymentNonexistence.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IReferencedPaymentNonexistence.RequestBodyStructOutput;
    responseBody: IReferencedPaymentNonexistence.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IReferencedPaymentNonexistence.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IReferencedPaymentNonexistence.ResponseStructOutput
  ] & {
    merkleProof: string[];
    data: IReferencedPaymentNonexistence.ResponseStructOutput;
  };
}

export interface IReferencedPaymentNonexistenceVerificationInterface
  extends Interface {
  getFunction(
    nameOrSignature: "verifyReferencedPaymentNonexistence"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "verifyReferencedPaymentNonexistence",
    values: [IReferencedPaymentNonexistence.ProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyReferencedPaymentNonexistence",
    data: BytesLike
  ): Result;
}

export interface IReferencedPaymentNonexistenceVerification
  extends BaseContract {
  connect(
    runner?: ContractRunner | null
  ): IReferencedPaymentNonexistenceVerification;
  waitForDeployment(): Promise<this>;

  interface: IReferencedPaymentNonexistenceVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  verifyReferencedPaymentNonexistence: TypedContractMethod<
    [_proof: IReferencedPaymentNonexistence.ProofStruct],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "verifyReferencedPaymentNonexistence"
  ): TypedContractMethod<
    [_proof: IReferencedPaymentNonexistence.ProofStruct],
    [boolean],
    "view"
  >;

  filters: {};
}
