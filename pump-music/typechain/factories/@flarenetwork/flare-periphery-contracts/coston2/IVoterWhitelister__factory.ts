/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IVoterWhitelister,
  IVoterWhitelisterInterface,
} from "../../../../@flarenetwork/flare-periphery-contracts/coston2/IVoterWhitelister";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "untilRewardEpoch",
        type: "uint256",
      },
    ],
    name: "VoterChilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ftsoIndex",
        type: "uint256",
      },
    ],
    name: "VoterRemovedFromWhitelist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ftsoIndex",
        type: "uint256",
      },
    ],
    name: "VoterWhitelisted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_voter",
        type: "address",
      },
    ],
    name: "chilledUntilRewardEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "defaultMaxVotersForFtso",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ftsoIndex",
        type: "uint256",
      },
    ],
    name: "getFtsoWhitelistedPriceProviders",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    name: "getFtsoWhitelistedPriceProvidersBySymbol",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ftsoIndex",
        type: "uint256",
      },
    ],
    name: "maxVotersForFtso",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_voter",
        type: "address",
      },
    ],
    name: "requestFullVoterWhitelisting",
    outputs: [
      {
        internalType: "uint256[]",
        name: "_supportedIndices",
        type: "uint256[]",
      },
      {
        internalType: "bool[]",
        name: "_success",
        type: "bool[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_voter",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_ftsoIndex",
        type: "uint256",
      },
    ],
    name: "requestWhitelistingVoter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IVoterWhitelister__factory {
  static readonly abi = _abi;
  static createInterface(): IVoterWhitelisterInterface {
    return new Interface(_abi) as IVoterWhitelisterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IVoterWhitelister {
    return new Contract(address, _abi, runner) as unknown as IVoterWhitelister;
  }
}
